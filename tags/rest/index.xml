<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rest on Jetoile</title>
    <link>https://blog.jetoile.fr/tags/rest.html</link>
    <description>Recent content in rest on Jetoile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#39;http://creativecommons.org/licenses/by/4.0/&#39; rel=&#39;license&#39;&gt;&lt;img alt=&#39;Licence Creative Commons&#39; src=&#39;https://blog.jetoile.fr/images/creative_common88x31.png&#39; style=&#39;border-width:0&#39;/&gt;&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 07 Oct 2015 17:33:08 +0200</lastBuildDate><atom:link href="https://blog.jetoile.fr/tags/rest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Template de projets REST</title>
      <link>https://blog.jetoile.fr/2015/10/template-de-projets-rest.html</link>
      <pubDate>Wed, 07 Oct 2015 17:33:08 +0200</pubDate>
      
      <guid>https://blog.jetoile.fr/2015/10/template-de-projets-rest.html</guid>
      <description>Il y a déjà un long moment, j&amp;rsquo;avais posté une série d&amp;rsquo;article expliquant comment il était possible de faire des web service de type REST de manière simple via RestEasy-Netty ou via Undertow.
Dans la continuité de cette course au plus léger, je me suis dit que cela pouvait être intéressant de faire une petite étude un peu plus exhaustive des solutions légères qui existaient.
L&amp;rsquo;objectif étant extraire une sorte de bench un peu naïf et un peu out of the box.</description>
    </item>
    
    <item>
      <title>Undertow pour booster vos services REST</title>
      <link>https://blog.jetoile.fr/2015/06/undertow-pour-booster-vos-services-rest.html</link>
      <pubDate>Tue, 23 Jun 2015 14:51:56 +0200</pubDate>
      
      <guid>https://blog.jetoile.fr/2015/06/undertow-pour-booster-vos-services-rest.html</guid>
      <description>Il y a quelques temps, j&amp;rsquo;avais fait une série d&amp;rsquo;articles sur resteasy-netty et resteasy-netty4.
Cette article repart du même besoin, à savoir disposer d&amp;rsquo;une stack légère pour réaliser un service REST, mais en utilisant Undertow plutôt que Resteasy-Netty.
Au niveau des besoins, ils seront identiques ie. :
utiliser JAX-RS, intégrer Swagger, intégrer Jolokia, générer un livrable autoporteur. RestEasy-Netty, même s&amp;rsquo;il existe de nombreux points d&amp;rsquo;entrée, demande quelques phases de hack (gestion du crossover domain par exemple) et dispose d&amp;rsquo;un mécanisme un peu limité concernant la partie sécurité.</description>
    </item>
    
    <item>
      <title>JAXRS, Netty4 et Spring Integration : ils reviennent et ils ne sont pas content!</title>
      <link>https://blog.jetoile.fr/2014/03/jaxrs-netty4-et-spring-integration-ils.html</link>
      <pubDate>Mon, 24 Mar 2014 19:12:29 +0100</pubDate>
      
      <guid>https://blog.jetoile.fr/2014/03/jaxrs-netty4-et-spring-integration-ils.html</guid>
      <description>Pour faire suite à mes articles resteasy-netty et resteasy-netty4, nous allons voir, dans cet article, comment il est possible de créer un service activator avec Spring Integration qui exposera via resteasy-netty4 un service REST.
Ce service REST esposera simplement une opération en POST qui, via Spring Integration, écrira dans un fichier et qui, pour le fun, écrira également sur la console.
Pour ce faire, rien de plus simple, un Service Activator de type gateway a été utilisé.</description>
    </item>
    
    <item>
      <title>JAXRS, Netty 4, Jackon 2... les mêmes mais en mieux...</title>
      <link>https://blog.jetoile.fr/2014/03/jaxrs-netty-4-jackon-2-les-memes-mais.html</link>
      <pubDate>Mon, 17 Mar 2014 08:43:12 +0100</pubDate>
      
      <guid>https://blog.jetoile.fr/2014/03/jaxrs-netty-4-jackon-2-les-memes-mais.html</guid>
      <description>Pour faire suite à mon article précédent qui montrait comment il était possible de construire une stack légère basée sur Resteasy-Netty3, Jackson, Jolokia et Swagger, cet article montrera comment il est possible de faire la même chose avec Resteasy-Netty4 et Jackson 2.
Même si les changements ne sont pas énormes, il y a quand même quelques variantes, et, histoire d&amp;rsquo;être exhaustif, cela permet de faire le tour complet&amp;hellip; ;-)</description>
    </item>
    
    <item>
      <title>JAXRS, Netty et bien plus encore... mode d&#39;emploi...</title>
      <link>https://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html</link>
      <pubDate>Mon, 10 Mar 2014 08:03:49 +0100</pubDate>
      
      <guid>https://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html</guid>
      <description>L&amp;rsquo;informatique évolue constamment et c&amp;rsquo;est également le cas des architectures qui ont tendance à s&amp;rsquo;orienter de plus en plus vers l&amp;rsquo;utilisation de services REST. Ces services REST doivent, en outre, être de plus en plus véloces afin de pouvoir répondre à une charge de plus en plus forte (que ce soit d&amp;rsquo;un point de vue temps de réponse mais également d&amp;rsquo;un point de vue charge suportée). C&amp;rsquo;est dans ce contexte que des solutions comme Restlet ou RestX (pour n&amp;rsquo;en citer que quelques-unes) ont vu le jour.</description>
    </item>
    
  </channel>
</rss>
