<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jetoile]]></title>
  <link href="http://blog.jetoile.fr/atom.xml" rel="self"/>
  <link href="http://blog.jetoile.fr/"/>
  <updated>2015-10-09T15:28:38+02:00</updated>
  <id>http://blog.jetoile.fr/</id>
  <author>
    <name><![CDATA[Khanh Maudoux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hadoop Et Son écosystème]]></title>
    <link href="http://blog.jetoile.fr/2015/10/hadoop-et-son-ecosysteme.html"/>
    <updated>2015-10-09T14:53:03+02:00</updated>
    <id>http://blog.jetoile.fr/2015/10/hadoop-et-son-ecosysteme</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/hadoop-all.png" alt="left-small" />
Avec l&#8217;arrivé de Apache Spark, Hadoop est souvent vu comme désuet et <em>legacy</em>. Il est vrai que le monde BigData est en perpétuelle évolution et qu&#8217;un produit peut être déprécié en quelques mois.</p>

<p>Cependant, restreindre le terme Hadoop aux seuls technologies MapReduce, HDFS et YARN est, pour moi, une erreur.</p>

<p>Déjà parce que ces technologies peuvent être décorrélées et ensuite car, souvent, la très grande majorité des nouvelles technologies issues du monde BigData s&#8217;appuient sur les couches existantes et s&#8217;intègrent avec ces dernières.</p>

<p>Par exemple, plutôt que dire que Hadoop est mort et que Spark est son remplaçant, il serait plus juste de dire que l&#8217;écosystème Hadoop se voit rajouter le nouveau moteur d&#8217;exécution Spark (n&#8217;oublions pas que Spark s&#8217;intègre très bien avec HDFS en l&#8217;occurence pour la partie colocalisation des données/traitements ou même pour répondre aux besoins de <em>checkpointing</em>).</p>

<p>Dans la présentation ci-dessous, j&#8217;ai tenté, de manière non exhaustive, de lister et regrouper par usage quelques unes des technologies que je considère faire partie de l&#8217;écosystème Hadoop et qui, de mon point de vue, constitue l&#8217;environnement Hadoop que certains nomment également <em>Data Platform</em>.</p>

<iframe src="//fr.slideshare.net/slideshow/embed_code/key/Bqq5ELZYyU3HSO" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//fr.slideshare.net/jetoile/hadoop-et-son-cosystme" title="Hadoop et son écosystème" target="_blank">Hadoop et son écosystème</a> </strong> from <strong><a href="//www.slideshare.net/jetoile" target="_blank">Khanh Maudoux</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Template De Projets REST]]></title>
    <link href="http://blog.jetoile.fr/2015/10/template-de-projets-rest.html"/>
    <updated>2015-10-07T17:33:08+02:00</updated>
    <id>http://blog.jetoile.fr/2015/10/template-de-projets-rest</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/template_rest.png" alt="left-small" />
Il y a déjà un long moment, j&#8217;avais posté une série d&#8217;article expliquant comment il était possible de faire des web service de type REST de manière simple via <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html">RestEasy-Netty</a> ou via <a href="http://blog.jetoile.fr/2015/06/undertow-pour-booster-vos-services-rest.html">Undertow</a>.</p>

<p>Dans la continuité de cette course au plus léger, je me suis dit que cela pouvait être intéressant de faire une petite étude un peu plus exhaustive des solutions légères qui existaient.</p>

<p>L&#8217;objectif étant extraire une sorte de bench un peu naïf et un peu <em>out of the box</em>. Parmi les solutions retenues, il y a :</p>

<ul>
<li>Resteasy-Netty</li>
<li>Resteasy-Undertow</li>
<li>Restlet</li>
<li>SpringBoot</li>
<li>Resteasy sur Tomcat en utilisant ses connecteurs NIO</li>
<li>Resteasy sur Jetty</li>
</ul>


<p>Cette article est là pour restituer mes résultats&hellip;</p>

<!-- more -->


<p>En fait, non&hellip; j&#8217;ai menti puisque je ne ferai aucun retour mais que je donnerai seulement le lien vers mon github où il est possible de trouver ces <em>bootstrap</em> de projets&hellip;</p>

<p>En effet, faire un <em>bench</em> est dangereux et complexe surtout quand toutes les implémentations ne sont pas maitrisées et qu&#8217;un <em>tuning</em> de ces dernières peut grandement modifier le résultat.</p>

<p>En outre, avoir un service exhaustif (autre que un simple <em>helloword</em>) qui est représentatif d&#8217;une vrai application et qui ne fait pas que taper dans le cache de la JVM ou de l&#8217;OS est plus complexe qu&#8217;écrire un simple <em>sample</em>.</p>

<p>Enfin, par manque de moyen (2 ordinateurs reliés par un wifi capricieux et par flemme de me monter des environnements plus représentatifs), je n&#8217;ai pu obtenir de résultats fiables&hellip;</p>

<p>Aussi, ci-joint les <em>repos</em> où il est possible de trouver le code (qui se veut ultra simple et qui a été fait sans chercher l&#8217;optimisation et sur un coin de table donc si des bourdes ont été faites, je m&#8217;en excuse&hellip;) :</p>

<ul>
<li><a href="https://github.com/jetoile/resteasy-netty-sample">Sample RestEasy-Netty</a></li>
<li><a href="https://github.com/jetoile/dropwizard-sample">Sample Dropwizard</a></li>
<li><a href="https://github.com/jetoile/restlet-sample">Sample Restlet</a></li>
<li><a href="https://github.com/jetoile/undertow-sample">Sample RestReasy-Undertow</a></li>
<li><a href="https://github.com/jetoile/tomcat-resteasy-sample">Sample Tomcat/Jetty</a> : simple webapp à déployer dans les conteneurs avec les bonnes options</li>
<li><a href="https://github.com/jetoile/springboot-sample">Sample SpringBoot</a></li>
<li><a href="https://github.com/jetoile/gatling-sample">Sample de projet Gatling pour le tir de performance</a></li>
</ul>


<p>Ainsi, si le coeur vous en dit, vous pourrez vous faire vous même une idée de qui est le plus fort&hellip; et même comparer avec vos solutions maisons&hellip; ;)</p>

<p>Allez, et parce que je suis sympa, je mets quand même le rapport Gatling obtenu suite à 1 seul tir en local. Je laisse le lecteur se faire une idée&hellip; ou pas&hellip;</p>

<ul>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/dropwizard-1/index.html">Résultat Dropwizard</a></li>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/jetty-1/index.html">Résultat Jetty</a></li>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/netty-1/index.html">Résultat RestEasy-Netty</a></li>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/restlet-1/index.html">Résultat Restlet</a></li>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/springboot-1/index.html">Résultat SpringBoot</a></li>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/tomcat-nio-1/index.html">Résultat Tomcat NIO</a></li>
<li><a href="http://blog.jetoile.fr/images/res_charge_gatling/undertow-1/index.html">Résultat RestEasy-Undertow</a></li>
</ul>


<p>Voilà un article un peu facile et qui n&#8217;apporte pas grand chose mais je trouvais qu&#8217;il était toujours intéressant pour les lecteurs curieux d&#8217;avoir la possibilité de voir différentes implementations&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undertow Pour Booster Vos Services REST]]></title>
    <link href="http://blog.jetoile.fr/2015/06/undertow-pour-booster-vos-services-rest.html"/>
    <updated>2015-06-23T14:51:56+02:00</updated>
    <id>http://blog.jetoile.fr/2015/06/undertow-pour-booster-vos-services-rest</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/undertow.png" alt="left-small" />
Il y a quelques temps, j&#8217;avais fait une série d&#8217;articles sur <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html">resteasy-netty</a> et <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-4-jackon-2-les-memes-mais.html">resteasy-netty4</a>.</p>

<p>Cette article repart du même besoin, à savoir disposer d&#8217;une <em>stack</em> légère pour réaliser un service REST, mais en utilisant <a href="http://undertow.io/">Undertow</a> plutôt que Resteasy-Netty.</p>

<!-- more -->


<p>Au niveau des besoins, ils seront identiques ie. :</p>

<ul>
<li>utiliser JAX-RS,</li>
<li>intégrer Swagger,</li>
<li>intégrer Jolokia,</li>
<li>générer un livrable autoporteur.</li>
</ul>


<p>RestEasy-Netty, même s&#8217;il existe de nombreux points d&#8217;entrée, demande quelques phases de <em>hack</em> (gestion du <em>crossover domain</em> par exemple) et dispose d&#8217;un mécanisme un peu limité concernant la partie sécurité.</p>

<p>En outre, l&#8217;absence du mécanisme de Servlet reste un peu embêtant pour mettre en place certaines <em>features</em> comme le MDC ( <a href="http://logback.qos.ch/manual/mdc.html"><em>Mapped Diagnostic Context</em></a> ) bien pratique lorsque l&#8217;on est dans une architecture type microservice.</p>

<p>Le code complet est disponible <a href="https://github.com/jetoile/undertow-sample">ici</a>.</p>

<h1>Rappel du cahier des charges</h1>

<p>Comme je l&#8217;ai déjà indiqué dans les autres posts, l&#8217;objectif est seulement de montrer comme il peut être simple d&#8217;exposer un service REST à l&#8217;aide d&#8217;<a href="http://undertow.io/">Undertow</a>. Pour ce faire, un simple service sera exposé et il consistera à répèter ce qu’on lui demande…</p>

<p>Il répondra donc à une requête de type GET du type : <a href="http://localhost:8081/sample/say/">http://localhost:8081/sample/say/</a><message></p>

<p>Du coté de la réponse, elle aura la forme suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">message</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;time&quot;</span><span class="o">:</span><span class="s2">&quot;2015-06-23T15:18:50.748&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Mise en oeuvre</h1>

<p>A titre informatif, les versions des différentes librairies qui sont utilisés dans les exemples de code ci-dessous sont les suivantes (au format gradle pour gagner de la place) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;jaxrs-api&#39;, version:&#39;3.0.11.Final&#39;
</span><span class='line'>compile group: &#39;org.jolokia&#39;, name: &#39;jolokia-jvm&#39;, version:&#39;1.3.1&#39;
</span><span class='line'>compile group: &#39;com.wordnik&#39;, name: &#39;swagger-jaxrs_2.10&#39;, version:&#39;1.3.12&#39;
</span><span class='line'>compile group: &#39;com.wordnik&#39;, name: &#39;swagger-annotations_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>compile group: &#39;javax.servlet&#39;, name: &#39;javax.servlet-api&#39;, version:&#39;3.1.0&#39;
</span><span class='line'>compile group: &#39;io.dropwizard.metrics&#39;, name: &#39;metrics-core&#39;, version:&#39;3.1.2&#39;
</span><span class='line'>compile group: &#39;io.undertow&#39;, name: &#39;undertow-core&#39;, version:&#39;1.2.8.Final&#39;
</span><span class='line'>compile group: &#39;io.undertow&#39;, name: &#39;undertow-servlet&#39;, version:&#39;1.2.8.Final&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-undertow&#39;, version:&#39;3.0.11.Final&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-jackson2-provider&#39;, version:&#39;3.0.11.Final&#39;
</span><span class='line'>compile group: &#39;com.fasterxml.jackson.core&#39;, name: &#39;jackson-core&#39;, version:&#39;2.5.4&#39;
</span><span class='line'>compile group: &#39;com.fasterxml.jackson.core&#39;, name: &#39;jackson-annotations&#39;, version:&#39;2.5.4&#39;
</span><span class='line'>compile group: &#39;com.fasterxml.jackson.core&#39;, name: &#39;jackson-databind&#39;, version:&#39;2.5.4&#39;
</span><span class='line'>compile group: &#39;commons-configuration&#39;, name: &#39;commons-configuration&#39;, version:&#39;1.10&#39;
</span><span class='line'>compile group: &#39;commons-collections&#39;, name: &#39;commons-collections&#39;, version:&#39;3.2.1&#39;
</span><span class='line'>compile group: &#39;commons-io&#39;, name: &#39;commons-io&#39;, version:&#39;2.4&#39;
</span><span class='line'>compile group: &#39;org.slf4j&#39;, name: &#39;slf4j-api&#39;, version:&#39;1.7.12&#39;
</span><span class='line'>compile group: &#39;ch.qos.logback&#39;, name: &#39;logback-classic&#39;, version:&#39;1.1.3&#39;
</span></code></pre></td></tr></table></div></figure>


<p>Concernant la version des différentes dépendances, on constate que ce n&#8217;est pas swagger2 qui est utilisé en raison d&#8217;une incapacité de ma part à l&#8217;intégrer&hellip; :&lsquo;(</p>

<h1>Implémentation du service REST</h1>

<p>Le mise en place du service REST basé sur JAX-RS est on ne peut plus trivial… et la classe ci-dessous fait humblement l’affaire :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Api</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/sample&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;the sample api&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/sample&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@RolesAllowed</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span>
</span><span class='line'>    <span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/say/{msg}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Produces</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;repeat the word&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">notes</span> <span class="o">=</span> <span class="s">&quot;response the word&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">DtoResponse</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ApiResponses</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">code</span> <span class="o">=</span> <span class="mi">500</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Internal server error&quot;</span><span class="o">)})</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nd">@PathParam</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;sample log&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="n">Main</span><span class="o">.</span><span class="na">metricRegistry</span><span class="o">.</span><span class="na">timer</span><span class="o">(</span><span class="n">name</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;say-service&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Timer</span><span class="o">.</span><span class="na">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">timer</span><span class="o">.</span><span class="na">time</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">DtoResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DtoResponse</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;internal error: {}&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coté du DTO, il est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DtoResponse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">LocalDateTime</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DtoResponse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">LocalDateTime</span> <span class="nf">getTime</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTime</span><span class="o">(</span><span class="n">LocalDateTime</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">time</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On remarquera l&#8217;utilisation de Java8 pour la gestion du temps plutôt que Joda-Time.</p>

<p>En outre, concernant les annotations Swagger et l&#8217;utilisation de metrics, nous y reviendrons plus tard.</p>

<p>Concernant le message de log, de même, nous y reviendrons plus tard avec l&#8217;intégration d&#8217;un MDC pour les logs.</p>

<h1>Mise en oeuvre avec Undertow</h1>

<p>Mettre en place Resteasy avec Undertow est très simple, d’après la documnentation, il suffit de faire :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SimpleService</span> <span class="n">simpleService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleService</span><span class="o">();</span>
</span><span class='line'><span class="n">ResteasyDeployment</span> <span class="n">deployment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResteasyDeployment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">deployment</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="n">asList</span><span class="o">(</span><span class="n">simpleService</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;undertow.port&quot;</span><span class="o">,</span> <span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
</span><span class='line'><span class="n">String</span> <span class="n">host</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;undertow.host&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getHost</span><span class="o">()));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;org.jboss.resteasy.port&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;org.jboss.resteasy.host&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getHost</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">UndertowJaxrsServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UndertowJaxrsServer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">DeploymentInfo</span> <span class="n">deploymentInfo</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">undertowDeployment</span><span class="o">(</span><span class="n">deployment</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">setDeploymentName</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">setContextPath</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">setClassLoader</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">deployment</span><span class="o">.</span><span class="na">setProviderFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">ResteasyProviderFactory</span><span class="o">());</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">deploy</span><span class="o">(</span><span class="n">deploymentInfo</span><span class="o">);</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">Undertow</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">addHttpListener</span><span class="o">(</span><span class="n">port</span><span class="o">,</span> <span class="n">host</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>On y constate que pour ajouter un service, il suffit juste de déclarer la classe implémentant JAX-RS via la méthode <code>setResources()</code> sur l’instance de <em>ResteasyDeployment</em> fournit au serveur <em>UndertowJaxrsServer</em> :</p>

<p>Et voilà! On dispose désormais d’un programme exécutable qui démarre un serveur REST basé sur Undertow.</p>

<p>Par contre, il semble que le service ne rende pas vraiment ce que l&#8217;on voulait :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="s1">&#39;http://localhost:8081/sample/say/&lt;message&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;message&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;hour&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;minute&quot;</span><span class="p">:</span> <span class="mi">55</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;second&quot;</span><span class="p">:</span> <span class="mi">51</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;nano&quot;</span><span class="p">:</span> <span class="mi">225000000</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;year&quot;</span><span class="p">:</span> <span class="mi">2015</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;month&quot;</span><span class="p">:</span> <span class="s2">&quot;JUNE&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;dayOfMonth&quot;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;dayOfWeek&quot;</span><span class="p">:</span> <span class="s2">&quot;TUESDAY&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;dayOfYear&quot;</span><span class="p">:</span> <span class="mi">174</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;monthValue&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;chronology&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;calendarType&quot;</span><span class="p">:</span> <span class="s2">&quot;iso8601&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;ISO&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas de souci, il suffit de préciser comment on souhaite que LocalDateTime soit sérialisé par Jackson :</p>

<p>Ainsi, notre DTO devient :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DtoResponse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@JsonSerialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="n">LocalDateTimeToStringSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">LocalDateTime</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DtoResponse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">LocalDateTime</span> <span class="nf">getTime</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTime</span><span class="o">(</span><span class="n">LocalDateTime</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">time</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>où :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalDateTimeToStringSerializer</span> <span class="kd">extends</span> <span class="n">JsonSerializer</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">LocalDateTime</span> <span class="n">value</span><span class="o">,</span> <span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jgen</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_DATE_TIME</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après ces modifications, on obtient bien :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;message&quot;</span><span class="p">:</span><span class="s2">&quot;&lt;message&gt;&quot;</span><span class="p">,</span><span class="nt">&quot;time&quot;</span><span class="p">:</span><span class="s2">&quot;2015-06-23T16:04:01.419&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Intégration de Metrics</h1>

<p>Concernant l&#8217;intégration de Metrics, pas grand chose de nouveau et donc pas grand chose à dire ;&ndash;)</p>

<p>Déclarer le registry :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">metricRegistry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MetricRegistry</span><span class="o">();</span>
</span><span class='line'><span class="kd">final</span> <span class="n">JmxReporter</span> <span class="n">reporter</span> <span class="o">=</span> <span class="n">JmxReporter</span><span class="o">.</span><span class="na">forRegistry</span><span class="o">(</span><span class="n">metricRegistry</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="n">reporter</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et utiliser le dans vos classes :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="n">Main</span><span class="o">.</span><span class="na">metricRegistry</span><span class="o">.</span><span class="na">timer</span><span class="o">(</span><span class="n">name</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;say-service&quot;</span><span class="o">));</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Timer</span><span class="o">.</span><span class="na">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">timer</span><span class="o">.</span><span class="na">time</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Intégration de la sécurité</h1>

<p>Undertow permet une bien meilleur intégration de la sécurité que RestEasy-Netty. En effet, grâce au mécanisme de Servlet, il est possible de bénéficier de toute la puissance des conteneurs de Servlets.</p>

<p>Du coté du serveur Undertow, il suffit donc de définir un <em>ServletIdentityManager</em> et de lui fournir un <em>LoginConfig</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">deployment</span><span class="o">.</span><span class="na">setSecurityEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ServletIdentityManager</span> <span class="n">identityManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletIdentityManager</span><span class="o">();</span>
</span><span class='line'><span class="n">identityManager</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="s">&quot;khanh&quot;</span><span class="o">,</span> <span class="s">&quot;khanh&quot;</span><span class="o">,</span> <span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">deploymentInfo</span> <span class="o">=</span> <span class="n">deploymentInfo</span><span class="o">.</span><span class="na">setIdentityManager</span><span class="o">(</span><span class="n">identityManager</span><span class="o">).</span><span class="na">setLoginConfig</span><span class="o">(</span><span class="k">new</span> <span class="n">LoginConfig</span><span class="o">(</span><span class="s">&quot;BASIC&quot;</span><span class="o">,</span> <span class="s">&quot;Test Realm&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>où :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletIdentityManager</span> <span class="kd">implements</span> <span class="n">IdentityManager</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Charset</span> <span class="n">UTF_8</span> <span class="o">=</span> <span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">UserAccount</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUser</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span><span class="o">...</span> <span class="n">roles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">UserAccount</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserAccount</span><span class="o">();</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="na">roles</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">roles</span><span class="o">));</span>
</span><span class='line'>        <span class="n">users</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Account</span> <span class="nf">verify</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Just re-use the existing account.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">account</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Account</span> <span class="nf">verify</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">Credential</span> <span class="n">credential</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">account</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">verifyCredential</span><span class="o">(</span><span class="n">account</span><span class="o">,</span> <span class="n">credential</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">account</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Account</span> <span class="nf">verify</span><span class="o">(</span><span class="n">Credential</span> <span class="n">credential</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">verifyCredential</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">,</span> <span class="n">Credential</span> <span class="n">credential</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// This approach should never be copied in a realm IdentityManager.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">account</span> <span class="k">instanceof</span> <span class="n">UserAccount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">credential</span> <span class="k">instanceof</span> <span class="n">PasswordCredential</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">char</span><span class="o">[]</span> <span class="n">expectedPassword</span> <span class="o">=</span> <span class="o">((</span><span class="n">UserAccount</span><span class="o">)</span> <span class="n">account</span><span class="o">).</span><span class="na">password</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">char</span><span class="o">[]</span> <span class="n">suppliedPassword</span> <span class="o">=</span> <span class="o">((</span><span class="n">PasswordCredential</span><span class="o">)</span> <span class="n">credential</span><span class="o">).</span><span class="na">getPassword</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">expectedPassword</span><span class="o">,</span> <span class="n">suppliedPassword</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">credential</span> <span class="k">instanceof</span> <span class="n">DigestCredential</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">DigestCredential</span> <span class="n">digCred</span> <span class="o">=</span> <span class="o">(</span><span class="n">DigestCredential</span><span class="o">)</span> <span class="n">credential</span><span class="o">;</span>
</span><span class='line'>                <span class="n">MessageDigest</span> <span class="n">digest</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">digest</span> <span class="o">=</span> <span class="n">digCred</span><span class="o">.</span><span class="na">getAlgorithm</span><span class="o">().</span><span class="na">getMessageDigest</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">account</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">().</span><span class="na">getName</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="n">UTF_8</span><span class="o">));</span>
</span><span class='line'>                    <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span> <span class="sc">&#39;:&#39;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">digCred</span><span class="o">.</span><span class="na">getRealm</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="n">UTF_8</span><span class="o">));</span>
</span><span class='line'>                    <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span> <span class="sc">&#39;:&#39;</span><span class="o">);</span>
</span><span class='line'>                    <span class="kt">char</span><span class="o">[]</span> <span class="n">expectedPassword</span> <span class="o">=</span> <span class="o">((</span><span class="n">UserAccount</span><span class="o">)</span> <span class="n">account</span><span class="o">).</span><span class="na">password</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">expectedPassword</span><span class="o">).</span><span class="na">getBytes</span><span class="o">(</span><span class="n">UTF_8</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">return</span> <span class="n">digCred</span><span class="o">.</span><span class="na">verifyHA1</span><span class="o">(</span><span class="n">HexConverter</span><span class="o">.</span><span class="na">convertToHexBytes</span><span class="o">(</span><span class="n">digest</span><span class="o">.</span><span class="na">digest</span><span class="o">()));</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Unsupported Algorithm&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">digest</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UserAccount</span> <span class="kd">implements</span> <span class="n">Account</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// In no way whatsoever should a class like this be considered a good idea for a real IdentityManager implementation,</span>
</span><span class='line'>        <span class="c1">// this is for testing only.</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">[]</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">Principal</span> <span class="n">principal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Principal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Principal</span> <span class="nf">getPrincipal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">principal</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getRoles</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">roles</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il s&#8217;agit ici d&#8217;une Basic Authentification mais il est bien sûr possible d&#8217;en mettre en place d&#8217;autre.</p>

<p>Coté autorisation, il est alors possible de bénéficier de l&#8217;annotation <code>@RolesAllowed</code> de JAX-RS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/sample&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@RolesAllowed</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Intégration d&#8217;un MDC</h1>

<p>Concernant la mise en place d&#8217;un MDC (<em>Mapped Diagnostic Context</em>), le fait de bénéficier du mécanisme de <em>Filter</em> des Servlets rend la chose beaucoup plus simple.</p>

<p>En effet, une fois la couche sécurité branchée, il suffit de récupérer le <code>UserPrincipal</code> dans la requête et l&#8217;enregistrer dans le MDC.</p>

<p>La déclaration des Filters se fait de la manière suivante pour Undertow :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FilterInfo</span> <span class="n">mdcFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FilterInfo</span><span class="o">(</span><span class="s">&quot;MDCFilter&quot;</span><span class="o">,</span> <span class="n">MDCServletFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="n">mdcFilter</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">addFilterUrlMapping</span><span class="o">(</span><span class="s">&quot;MDCFilter&quot;</span><span class="o">,</span> <span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FilterInfo</span> <span class="n">mdcInsertingFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FilterInfo</span><span class="o">(</span><span class="s">&quot;MDCInsertingServletFilter&quot;</span><span class="o">,</span> <span class="n">MDCInsertingServletFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="n">mdcInsertingFilter</span><span class="o">);</span>
</span><span class='line'><span class="n">deploymentInfo</span><span class="o">.</span><span class="na">addFilterUrlMapping</span><span class="o">(</span><span class="s">&quot;MDCInsertingServletFilter&quot;</span><span class="o">,</span> <span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec le filter ci-dessous :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDCServletFilter</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">USER_KEY</span> <span class="o">=</span> <span class="s">&quot;username&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span><span class='line'>                         <span class="n">FilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">successfulRegistration</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Principal</span> <span class="n">principal</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getUserPrincipal</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Please note that we could have also used a cookie to</span>
</span><span class='line'>        <span class="c1">// retrieve the user name</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">principal</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">principal</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="n">successfulRegistration</span> <span class="o">=</span> <span class="n">registerUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">successfulRegistration</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">MDC</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">USER_KEY</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">FilterConfig</span> <span class="n">arg0</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Register the user in the MDC under USER_KEY.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param username</span>
</span><span class='line'><span class="cm">     * @return true id the user can be successfully registered</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">registerUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">username</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">username</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MDC</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">USER_KEY</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi, disposer d&#8217;un MDC permet d&#8217;ajouter automatiquement des informations dans les logs :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;STDOUT&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;encoder&gt;</span>
</span><span class='line'>            <span class="nt">&lt;pattern&gt;</span>%d{HH:mm:ss.SSS} %-5level %logger{36} %X{req.remoteHost} %X{req.requestURI} - C:%X{username} - %msg%n
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;/pattern&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/encoder&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&quot;info&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;STDOUT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/root&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On obtient alors bien les logs voulues :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>17:15:11.466 INFO  f.j.sample.service.SimpleService 127.0.0.1 /sample/say/&lt;message&gt; - C:khanh - sample log
</span></code></pre></td></tr></table></div></figure>


<h1>Intégration de Jolokia</h1>

<p>Coté Jolokia, pas grand chose à ajouter par rapport à ma série d&#8217;article précédent&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">JolokiaServerConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JolokiaServerConfig</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">JolokiaServer</span> <span class="n">jolokiaServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JolokiaServer</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">jolokiaServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;unable to start jolokia server&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Intégration de Swagger</h1>

<p>Concernant l&#8217;intégration de Swagger, le fait de disposer des <em>Filter</em> de Servlet permet de n&#8217;avoir pas à faire de <em>hack</em> immonde pour gérer le CORS (cf. <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html">article précédent</a>) : il suffit de déclarer un <em>Filter</em> dans Undertow qui a, en outre, la chance d&#8217;exister :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CorsFilter</span> <span class="n">filter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsFilter</span><span class="o">();</span>
</span><span class='line'><span class="n">filter</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="s">&quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">filter</span><span class="o">.</span><span class="na">setAllowedHeaders</span><span class="o">(</span><span class="s">&quot;X-Requested-With, Content-Type, Content-Length, Authorization&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">filter</span><span class="o">.</span><span class="na">getAllowedOrigins</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">deployment</span><span class="o">.</span><span class="na">setProviderFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">ResteasyProviderFactory</span><span class="o">());</span>
</span><span class='line'><span class="n">deployment</span><span class="o">.</span><span class="na">getProviderFactory</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="n">filter</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concernant la déclaration dans Undertow, pas grand chose à ajouter :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">initSwagger</span><span class="o">(</span><span class="n">ResteasyDeployment</span> <span class="n">deployment</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">BeanConfig</span> <span class="n">swaggerConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanConfig</span><span class="o">();</span>
</span><span class='line'>        <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setVersion</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.version&quot;</span><span class="o">,</span> <span class="s">&quot;1.0.0&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setBasePath</span><span class="o">(</span><span class="s">&quot;http://&quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.host&quot;</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.port&quot;</span><span class="o">,</span> <span class="s">&quot;8081&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.title&quot;</span><span class="o">,</span> <span class="s">&quot;jetoile sample app&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setScan</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setResourcePackage</span><span class="o">(</span><span class="s">&quot;fr.jetoile.sample.service&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">deployment</span><span class="o">.</span><span class="na">setProviderClasses</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;com.wordnik.swagger.jaxrs.listing.ResourceListingProvider&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;com.wordnik.swagger.jaxrs.listing.ApiDeclarationProvider&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">deployment</span><span class="o">.</span><span class="na">setResourceClasses</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">deployment</span><span class="o">.</span><span class="na">setSecurityEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Branchement des plugins Maven Appassembler et Assembly</h1>

<p>Coté génération du livrable, encore une fois, pas grand chose à ajouter par rapport à mon précédent article : l&#8217;utilisation des plugins assembly et appassembler est identique.</p>

<h1>Conclusion</h1>

<p>On avait vu dans les articles précédents que RestEasy-Netty était une solution intéressante pour la simplicité de sa mise en oeuvre ainsi que pour le faible overhead.</p>

<p>Cependant, certaines intégrations ressemblaient plus à du <em>hack</em> qu&#8217;à une solution configurable.</p>

<p>Undertow (enfin pour être plus précis RestEasy-Undertow) pour sa part offre la même simplicité que RestEasy-Netty mais il permet en plus de s&#8217;intégrer avec beaucoup d&#8217;autres choses et le fait de retrouver le mécanisme de <em>Filter</em> facilite énormément les choses (par exemple, je ne suis pas sûr que bénéficier du MDC avec RestEasy-Netty ait été aussi simple).</p>

<p>Coté performance, je reviendrai dessus dans un autre article mais je peux déjà dire que la solution RestEasy-Undertow n&#8217;a rien à envier à RestEasy-Netty.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breizhcamp 2014 - Présentations en Ligne]]></title>
    <link href="http://blog.jetoile.fr/2014/06/breizhcamp-2014-presentation-en-ligne.html"/>
    <updated>2014-06-12T08:28:38+02:00</updated>
    <id>http://blog.jetoile.fr/2014/06/breizhcamp-2014-presentation-en-ligne</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/bzhcmp/Logo.png" alt="left-small" />
Pour ceux qui auraient manqué l&#8217;information, le <a href="http://www.breizhcamp.org/">BreizhCamp</a> s&#8217;est déroulé en mai dernier et j&#8217;y avais la chance d&#8217;y présenter un <em>talk</em> sur un retour d&#8217;expérience concernant le passage à l&#8217;échelle d&#8217;un SI afin de lui permettre de supporter 4 millions d&#8217;utilisateurs.</p>

<p>Le synopsis était le suivant :</p>

<blockquote><p><strong>De 20 000 à 4 millions d&#8217;utilisateurs</strong></p>

<p>Pour ce faire, il a été nécessaire de revoir certaines parties du SI afin de pouvoir stocker en masse les données des utilisateurs mais également afin d&#8217;être capable de les traiter.</p>

<p>Ce retour d&#8217;expérience montrera comment, avec une approche et des technologies simples, il a été possible de revoir la façon de faire et comment il a été proposé de traiter le sujet.</p>

<p>Il montrera également les pistes qui ont été étudiées et les solutions qui ont été retenues.</p>

<p>Les différents points qui seront abordés seront : Cassandra, REST, Netty, Spring Integration, Jolokia, Metrics saupoudré d&#8217;un peu de &ldquo;Big Data&rdquo;.</p></blockquote>

<p>Encore une fois, je remercie la <em>team</em> pour :</p>

<ul>
<li>l&#8217;organisation au top,</li>
<li>pour l&#8217;ambiance qu&#8217;ils ont su apporter à cette conférence,</li>
<li>mais également pour leur réactivité quant à mettre en ligne les vidéo des différents <em>talk</em> (sur <a href="https://www.youtube.com/playlist?list=PLHWl6dPnEb4l9S-nl4od10OkTOyZEn5Ef">YouTube</a> mais également sur <a href="http://parleys.com/channel/5148921d0364bc17fc56adbe/presentations?sort=date&amp;state=public">Parleys</a>)</li>
</ul>


<p>Du coup, vu que la vidéo de mon <em>talk</em> a été <em>processée</em>, j&#8217;en profite pour mettre le lien (désolé si je n&#8217;arrête pas de danser et désolé pour l&#8217;absence de démo dûe à mon ordinateur capricieux&hellip;) :</p>

<iframe type="text/html" width="420" height="290" mozallowfullscreen="true" webkitallowfullscreen="true" src="http://parleys.com/share.html#play/5391de0ee4b0359b3190f8f4" frameborder="0">&lt;br /&gt;</iframe>


<p>Et je vous invite à aller voir égalemnent les autres talk :
<a href="http://parleys.com/channel/5148921d0364bc17fc56adbe/presentations?sort=date&amp;state=public">http://parleys.com/channel/5148921d0364bc17fc56adbe/presentations?sort=date&amp;state=public</a></p>

<p>A noter également que les conf de Devoxx France ont aussi été publiée depuis un petit moment pour ceux qui seraient à la traine ;&ndash;) :
<a href="http://parleys.com/channel/5355419ce4b0524a2f28bca0/presentations?sort=date&amp;state=public">http://parleys.com/channel/5355419ce4b0524a2f28bca0/presentations?sort=date&amp;state=public</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breizhcamp 2014]]></title>
    <link href="http://blog.jetoile.fr/2014/05/breizhcamp-2014.html"/>
    <updated>2014-05-24T20:00:24+02:00</updated>
    <id>http://blog.jetoile.fr/2014/05/breizhcamp-2014</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/bzhcmp/Logo.png" alt="left-small" />
Encore un an de plus pour le <a href="http://www.breizhcamp.org/">breizhCamp</a> qui vient de fêter sa quatrième année.</p>

<p>Pour ceux qui ne seraient pas encore au courant de ce qu&#8217;est le breizhCamp, il s&#8217;agit d&#8217;une conférence technique qui se veut être un mix de technologies (même s&#8217;il faut bien reconnaitre que Java y est majoritairement représentée&hellip;) qui a eu lieu du 21 au 23 mai 2014 à Rennes dans les locaux de l&#8217;<a href="http://www.istic.univ-rennes1.fr/">ISTIC</a>.</p>

<p>Pour cette édition 2014, cela s&#8217;est déroulé sur 2 jours et demi et son <a href="http://www.breizhcamp.org/programme/">programme</a> a été réparti de la manière suivante :</p>

<ul>
<li>Une demi journée de démonstrations (enfin je ne sais comment définir précisément cette demi journée qui était un peu spéciale puisqu&#8217;elle hébergeait le <a href="http://www.labfab.fr/">LabFab</a>, un atelier agile, un hands on NodeJS, une présentation démystifiant les objets connectés, un <em>atelier</em> Devoxx4kids ainsi que diverses démos du NAO ou des <a href="http://optinvent.com/">ORA Smart Glasses</a>)</li>
<li>2 jours de conférences plus <em>classiques</em> avec des conférences, des <em>hands on</em>, des <em>tools in action</em> ainsi que des <em>quickies</em></li>
</ul>


<!-- more -->


<p>En ce qui concerne la qualité de la conférence, j&#8217;avoue avoir été très déçu&hellip; en effet :</p>

<ul>
<li><p>la pluie&hellip; non mais ALLO QUOI!!?? où était-elle? A peine quelques gouttes&hellip; et ils osent utiliser le mot <code>breizh</code>?!
<img src="http://blog.jetoile.fr/images/bzhcmp/temps.jpg" alt="medium" /></p></li>
<li><p>concernant la présentation &ldquo;Développer en Java et en Caleçon&rdquo; par Nicolas : le titre était mensonger! A peine une photo de caleçon et encore&hellip; le public a dû insister&hellip; et en plus ce n&#8217;était pas la meilleure&hellip;! A déconseiller au risque d&#8217;être déçu!! La vraie aurait dû être la suivante :
<img src="http://blog.jetoile.fr/images/bzhcmp/nico_calecon.jpg" title="Crédit photo : http://developer-blog.cloudbees.com/2013/04/cloudbees-works-from-home.html" alt="medium" /></p></li>
<li><p>une photo de van et même pas un seul poney&hellip; quelle déception&hellip; encore une fois une publicité mensongère&hellip;!
<img src="http://blog.jetoile.fr/images/bzhcmp/van.png" title="Crédit photo : https://twitter.com/lhuet35/status/469719681902051328" alt="medium" /></p></li>
</ul>


<p>Bref, vous l&#8217;aurez compris, une conférence très surfaite.</p>

<p>Concernant l&#8217;ambiance, j&#8217;ai été tellement déçu que je n&#8217;arrive même pas à le retranscrire. D&#8217;ailleurs les photos parlent d&#8217;elles-mêmes (il ne s&#8217;agit que de quelques photos qui ne sauraient être représentatives de l&#8217;ambiance réelle mais bon, <em>no comment</em>&hellip;)</p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/oculus.png" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/bieres.png" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/selfie.png" title="Crédit photo : https://twitter.com/seb_brousse/status/469160895869095936/photo/1" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/diner.png" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p>Et que dire des sponsors&hellip; des sociétés inconnues!
<img src="http://blog.jetoile.fr/images/bzhcmp/sponsors.png" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p>Ou encore des keynotes qui étaient complètement plates et sans aucune saveur&hellip;
<img src="http://blog.jetoile.fr/images/bzhcmp/balles.png" title="Crédit photo : https://twitter.com/NicoPennec/status/469889709985263616/photo/1" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/IMG_20140523_094741.jpg" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/IMG_20140523_095432.jpg" alt="medium" /></p>

<p>Et de l&#8217;orga&hellip; même pas capable de s&#8217;habiller correctement&hellip;
<img src="http://blog.jetoile.fr/images/bzhcmp/IMG_3457.JPG" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/IMG_3473.JPG" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p><img src="http://blog.jetoile.fr/images/bzhcmp/IMG_3480.JPG" title="Crédit photo : https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/" alt="medium" /></p>

<p>Heureusement, cette année, tout comme l&#8217;année dernière, j&#8217;ai eu la chance d&#8217;y présenter un talk (j&#8217;en remercie d&#8217;ailleurs l&#8217;équipe) qui, malgré quelques soucis techniques (mon ordi a refusé de &ldquo;partager&rdquo; son signal vidéo sur le rétroprojecteur m&#8217;empêchant ainsi de faire les démos prévues), s&#8217;est, à priori, bien passé (ndlr : j&#8217;attends les notes ainsi que la vidéo pour pouvoir juger du carnage&hellip; ;&ndash;) )&hellip; J&#8217;en profite d&#8217;ailleurs pour mettre à disposition mes slides.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35022180" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://fr.slideshare.net/jetoile/de-20-000-4-millions-dutilisateurs-mode-demploi" title="De 20 000 à 4 millions d&#x27;utilisateurs : mode d&#x27;emploi" target="_blank">De 20 000 à 4 millions d&#x27;utilisateurs : mode d&#x27;emploi</a> </strong> from <strong><a href="http://www.slideshare.net/jetoile" target="_blank">Khanh Maudoux</a></strong> </div></p>

<p>Enfin bref, vous l&#8217;aurez compris, une conf à conseiller bien évidemment!</p>

<p>Un grand merci aux sponsors, speakers ainsi qu&#8217;à toutes les personnes avec qui j&#8217;ai eu l&#8217;occasion de discuter!</p>

<p>Et bien sûr, un énorme bravo aux organisateurs qui étaient au top et qui ont, encore une fois, réussi à donner cette ambiance si particulière spécifique au BreizhCamp!</p>

<p>Les photos sont issues de :</p>

<ul>
<li>Alexandre Thomazo <a href="https://twitter.com/alexlg">@alexlg</a> : <a href="https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/">https://secure.flickr.com/photos/alexlg/sets/72157644386460788/with/14244372981/</a></li>
<li>Nicolas Pennec <a href="https://twitter.com/NicoPennec">@NicoPennec</a> : <a href="https://twitter.com/NicoPennec/status/469889709985263616/photo/1">https://twitter.com/NicoPennec/status/469889709985263616/photo/1</a></li>
<li>Sébastien Brousse <a href="https://twitter.com/seb_brousse">@seb_brousse</a> : <a href="https://twitter.com/seb_brousse/status/469160895869095936/photo/1">https://twitter.com/seb_brousse/status/469160895869095936/photo/1</a></li>
<li>Laurent Huet <a href="https://twitter.com/lhuet35">@lhuet35</a> : <a href="https://twitter.com/lhuet35/status/469719681902051328">https://twitter.com/lhuet35/status/469719681902051328</a></li>
<li>Le blog de Cloudbees : <a href="http://developer-blog.cloudbees.com/2013/04/cloudbees-works-from-home.html">http://developer-blog.cloudbees.com/2013/04/cloudbees-works-from-home.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RDD : Qu'est Ce Que C'est]]></title>
    <link href="http://blog.jetoile.fr/2014/05/rdd-quest-ce-que-cest.html"/>
    <updated>2014-05-12T09:21:35+02:00</updated>
    <id>http://blog.jetoile.fr/2014/05/rdd-quest-ce-que-cest</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/rdd/spark.png" alt="left-small" /></p>

<p><a href="http://spark.apache.org/">Spark</a> est un framework qui a de plus en plus le vent en poupe et le fait qu&#8217;il ait été <a href="https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces50">promu</a> en <em>top-level project</em> par la fondation Apache qu&#8217;il a rejoint récemment (en juin 2013) montre bien de l&#8217;intérêt qu&#8217;il succite (cela est d&#8217;aileurs confirmé par son intégration avec des solutions comme celles de <a href="http://www.datastax.com/">DataStax</a> (cf. <a href="http://databricks.com/blog/2014/05/08/Databricks-and-Datastax.html">ici</a>) ou <a href="http://www.mapr.com/">mapR</a> (cf. <a href="http://www.mapr.com/products/apache-spark">ici</a>).</p>

<p>Un des points central de Spark est son utilisation des RDDs (<em>Resilient Distributed Datasets</em>).</p>

<p>Cet article tentera d&#8217;expliquer un peu plus précisément ce que sont ces fameux RDDs (enfin, pour être plus précis, il ne s&#8217;agit (comme à mon habitude) que d&#8217;une pseudo-traduction du <a href="https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf">papier</a> de recherche expliquant ses tenants et aboutissants).</p>

<!-- more -->


<h1>Introduction</h1>

<p>Les frameworks de cluster de calcul tels que <a href="http://cs.brown.edu/~debrabant/cis570-website/papers/dryad.pdf"><em>Dryad</em></a> et ceux basés sur <a href="http://static.googleusercontent.com/media/research.google.com/fr//archive/mapreduce-osdi04.pdf"><em>MapReduce</em></a> ont largement été adoptés pour les analyses de données à grande échelle. Ces systèmes permettent aux utilisateurs d&#8217;écrire des calculs parallèles en utilisant des opérateurs de haut niveau sans avoir à se soucier de la distribution des unités de calcul ni de la tolérance aux pannes.</p>

<p>Bien que ces frameworks actuels fournissent de nombreuses abstractions pour accéder aux ressources de calcul du cluster, ils n&#8217;en fournissent pas pour accéder à la mémoire partagée. Cela les rend inefficace pour une importante classe d&#8217;applications émergeantes : celle qui doit réutiliser les résultats intermédiaires entre leurs différents calculs. La réutilisation de données est courante dans de nombreux algorithmes <em>itératifs</em> de <em>machine learning</em> et de graphe (comme le <strong>PageRank</strong>, <strong>K-Means</strong> et la régression logique) mais également dans des algorithmes d&#8217;extraction de données <em>interactive</em> où un utilisateur a besoin d&#8217;exécuter de multiples requêtes sur un même sous ensemble de données.</p>

<p>Malheureusement, dans la plupart des frameworks actuels, la seule manière de réutiliser des données entre les calculs (ie. entre deux <em>MapReduce</em> job) est de les écrire dans un système de stockage externe (ie. un système de fichiers distribué). Cela engendre un <em>overhead</em> dû à la réplication de données, aux I/O disques et à la sérialisation.</p>

<p>C&#8217;est pour palier à ces problèmes que des chercheurs ont développés des framework spécialisés pour les applications qui nécessitent la réutilisation de données. Par exemple, <a href="http://kowshik.github.io/JPregel/"><em>Pregel</em></a> est un système pour le calcul itératif de graphe qui garde les données intermédiares en mémoire, alors que <a href="https://code.google.com/p/haloop/"><em>HaLoop</em></a> offre une version itérative de <em>MapReduce</em>.</p>

<p>Cependant, ces frameworks ne supportent que des <em>patterns</em> de calculs précis (ie. une série d&#8217;étapes <em>MapReduce</em>) et s&#8217;appuient implicitement sur le partage de données. Ils ne fournissent pas l&#8217;abstraction pour une réutilisation plus globale.</p>

<p>C&#8217;est dans ce contexte qu&#8217;une nouvelle abstraction appelée <em>Resilient Distributed Datasets</em> (<strong>RDD</strong>s) permettant de réutiliser efficacement les données dans une large famille d&#8217;applications a été proposée. Les RDDs sont tolérants à la panne et proposent des structures de données parallèles qui laissent les utilisateurs :</p>

<ul>
<li>persister explicitement les données intermédiaires en mémoire,</li>
<li>controller leur partitionnement afin d&#8217;optimiser l&#8217;emplacement des données,</li>
<li>manipuler les données en utilisant un ensemble important d&#8217;opérateurs.</li>
</ul>


<p>La principale difficulté dans la conception des RDDs a été de définir une interface de programmation qui pouvait palier efficacement à la panne. Les abstractions de stockage en mémoire pour les clusters telles que les mémoires partagées distribuées, les stockages clé/valeur, les bases de données et Piccolo offrent une interface basée sur de petites mises à jours d&#8217;état mutables. Avec ces interface, les seules manières de fournir de la tolérance à la panne est de répliquer les données entre les machines ou de logger les mise à jours entre les machines. Ces deux approches sont consommatrices pour une charge de travail intensive sur des données puisque cela nécessite un fort transfert de données lors de la copie des informations entre les serveurs (le réseau est beaucoup plus lent que la RAM).</p>

<p>RDDs fournit, pour sa part, une interface basée sur des transformations &ldquo;grosses mailles&rdquo; (ie. <em>map</em>, <em>filter</em> et <em>join</em>) qui appliquent les mêmes opérations aux données. Cela permet d&#8217;être résiliant à la panne en loggant les transformations utilisées pour construire l&#8217;ensemble de données plutôt que les données réelles. Si une partition de RDD est perdue, le RDD dispose de suffisament d&#8217;informations sur la manière dont il a été produit pour recalculer la partition manquante. Ainsi les données perdues peuvent être récupérées souvent rapidement sans avoir à recourir aux mécanismes de réplication souvent couteux.</p>

<p>Bien qu&#8217;une interface basée sur des transformations &ldquo;grosses mailles&rdquo; peut sembler limité, RDDs convient pour beaucoup d&#8217;applications parallèles qui appliquent naturellement les mêmes opérations à de multiples éléments de données. En effet, RDDs peut répondre efficacement à de nombreux modèles de programmations de type cluster qui ont, jusque là, été traités comme des systèmes séparés.</p>

<h1>Resilient Distributed Datasets (RDDs)</h1>

<p>Un RDD est une collection partitionnée d&#8217;enregistrements en lecture seule qui ne peut être créée que par des opérations déterministes :</p>

<ul>
<li>soit à partir de données présentes dans un stockage stable,</li>
<li>soit à partir d&#8217;autres RDDs.</li>
</ul>


<p>Ces opérations sont appelées <strong>transformations</strong> pour les différentier des autres opérations. Parmi ces dernières il y a : <code>map</code>, <code>filter</code> et <code>join</code>.</p>

<p>Les RDDs n&#8217;ont pas besoin d&#8217;être matérialisés tout du long puisqu&#8217;un RDD dispose de suffisamment d&#8217;informations sur la façon dont il a été produit à partir d&#8217;un autre ensemble de données pour pouvoir être recalculé. Ainsi, un programme ne peut faire référence à un RDD s&#8217;il n&#8217;est pas capable de le reconstruire suite à une panne.</p>

<p>Enfin, les utilisateurs peuvent controler deux autres aspects des RDDs :</p>

<ul>
<li>la persistence : il est possible de préciser quels sont les RDDs réutilisés ainsi que la stratégie de stockage,</li>
<li>le partitionning : les éléments des RDDs peuvent être partitionnés entre les machines en se basant sur une clé dans chaque enregistrement.</li>
</ul>


<p>Par exemple, Spark expose les RDDs au travers d&#8217;une API où chaque ensemble de données est représenté comme un objet sur lequel des transformations sont appliquées. Les développeurs définissent un ou plusieurs RDDs au travers de transformations de données présente dans un stockage stable (ie. <code>map</code> ou <code>filter</code>) puis ils peuvent les utiliser dans des <strong>actions</strong> (comme <code>count</code>, <code>collect</code> ou <code>save</code>) qui retournent une valeur à l&#8217;application ou qui exporte des données sur un stockage du système. A cela peut s&#8217;ajouter l&#8217;opération <code>persist</code> qui indique quels RDDs pourront être réutilisés dans les opérations futures (à noter qu&#8217;il est possible d&#8217;indiquer que l&#8217;opération de persistance doit être faite entre plusieurs machines).</p>

<p>Pour comprendre les avantages des RDDs comme abstraction de mémoire distribuée, une comparaison avec les mémoires partagées distribuées (<em>DSM</em>) a été faite.</p>

<p><img src="http://blog.jetoile.fr/images/rdd/comparaisonRdd.png" title="crédit photo : https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf" alt="center" /></p>

<p>Dans un système à base de mémoire partagée distribuée, les applications lisent et écrivent de manière aléatoire dans un espace d&#8217;adressage global. La principale différence entre les RDDs et DSM est que les RDDs ne peuvent créés qu&#8217;au travers de transformations <em>macros</em> alors que DSM permet la lecture et l&#8217;écriture sur chaque allocation mémoire. Cela réduit l&#8217;utilisation des RDDs aux applications qui nécessitent de l&#8217;écriture en bloc mais cela permet une meilleure tolérance aux pannes. En outre, une autre particularité des RDDs est sa nature immuable qui permets de mieux gérer les cas où des noeuds peuvent être lents en effectuant des copies des tâches lentes comme dans MapReduce. Avec DSM, cela est difficilement implémentable car deux copies d&#8217;une tâche doivent potentiellement accéder aux mêmes allocations mémoires et que cela peut créer des conflits avec des mises à jour éventuelle.</p>

<p>Cependant, les RDDs s&#8217;appliquent mieux à des applications de type batch qui doivent exécuter les mêmes opérations sur tous les éléments de l&#8217;ensemble de données : dans ce cas, chaque transformation peut être vu comme une étape dans le graphe d&#8217;origine et la récupération des partitions perdues sans avoir à logger une grosse quantité d&#8217;information est plus adaptée. Dans le cas d&#8217;applications qui nécessitent une mise à jour d&#8217;un état partagé, les RDDs ne sont pas optimals.</p>

<p>Son intégration avec <em>Spark</em> se fait au travers d&#8217;un API intégré au framework. Le driver se connecte à une cluster de <em>workers</em> et permet de définir un ou plusieurs RDDs tout en y exécutant un ensemble d&#8217;action. Le driver permet également de suivre les modifications. Par exemple, l&#8217;utilisateur fournit des arguments aux opérations appliquées au RDD en passant des closures. En scala, chaque closure est représentée comme un objet Java qui peuvent être sérialisés et chargés sur un autre noeud.</p>

<p>Les principales transformations et actions disponibles dans Spark sont les suivantes :</p>

<p><img src="http://blog.jetoile.fr/images/rdd/spark_operation_action.png" title="crédit photo : https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf" alt="center" /></p>

<p>En fait, les <strong>transformations</strong> sont des opérations <em>lazy</em> qui permette de définir un nouveau RDD alors que les <strong>actions</strong> permettent d&#8217;exécuter un calcul et de retourner une valueur au programme ou de l&#8217;écrire sur un stockage externe. En plus de ces opérations, un RDD peut être persisté (méthode <code>persist</code>). En outre, il est possible d&#8217;obtenir l&#8217;ordre des partitions d&#8217;un RDD. Les opérations telles que <code>groupByKey</code>, <code>reduceByKey</code> et le <code>sort</code> fournissent un hash ou un interval de RDD partitionné.</p>

<p>Le choix de la représentation des RDDs doit permettre de retrouver la situation initiale au travers des transformations appliquées. Pour ce faire, une représentation sous forme de graphe a été choisie. En fait, chaque RDD est représenté par une interface commune qui expose différents types d&#8217;informations :</p>

<ul>
<li>un ensemble de partitions,</li>
<li>un ensemble de dépendances aux RDDs parents,</li>
<li>une fonction pour calculer l&#8217;ensemble de données en se basant sur ses parents,</li>
<li>et des métadonnées sur ses plans de distribution ainsi que sur l&#8217;emplacement des données.</li>
</ul>


<p><img src="http://blog.jetoile.fr/images/rdd/rdd_interface.png" title="crédit photo : https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf" alt="center" /></p>

<p>Ainsi, par exemple, un RDD qui représente un fichier HDFS a une partition pour chaque bloc de fichiers et connait l&#8217;emplacement de la machine où se trouve ce dernier. De même, le résultat d&#8217;une opération <code>map</code> sur ce RDD dispose des mêmes partitions mais applique la fonction <em>map</em> aux données parentes.</p>

<p>Un autre point intéressant concernant le <em>design</em> de cette interface est la manière de représenter les dépendances entres les RDDs. Cela a été résolu en définissant 2 types de dépendances :</p>

<ul>
<li>les dépendances <em>étroites</em> où chaque partition d&#8217;un parent RDD est utilisé par au plus une partition d&#8217;un RDD enfant,</li>
<li>les dépendances <em>larges</em> où plusieurs partitions filles peuvent dépendre d&#8217;une partition donnée.</li>
</ul>


<p>Par exemple, la fonction <code>map</code> peut engendrer des dépendances étroites alors que la fonction <code>join</code> peut produire des dépendances larges.</p>

<p>Ces distinctions sont importantes car :</p>

<ul>
<li>une dépendance étroite permet l&#8217;exécution en <em>pipeline</em> sur un seul noeud du cluster. A l&#8217;inverse, une dépendance large nécessite que les données de toutes les partitions parentes soient présentes et il convient donc de les déplacer entre les noeuds en utilisant une opération de type MapReduce</li>
<li>la récupération après un noeud en échec est plus efficace avec une dépendance étroite puisque seules les partitions parentes perdues doivent être recalculées et que cela peut être fait en parallèle sur différents noeuds. A l&#8217;inverse, avec une dépendance large, un simple échec d&#8217;un noeud peut entrainer la perte de plusieurs partitions sur tous les ancêtres d&#8217;un RDD entraînant une réexécution complète des opérations.</li>
</ul>


<p><img src="http://blog.jetoile.fr/images/rdd/rdd_dependencies.png" title="crédit photo : https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf" alt="center" /></p>

<h1>Implémentation</h1>

<p>Spark est un moteur rapide et général pour le traitement de données à grande échelle. Il permet, entre autre, de lire des données d&#8217;Hadoop (HDFS ou HBase) en utilisant les API de lecture existantes d&#8217;Hadoop.</p>

<p>Ce paragraphe revient sur quelques-unes des parties techniques du système.</p>

<h2>L&#8217;ordonnanceur de job</h2>

<p>L&#8217;ordonnanceur de Spark utilise la représentation des RDDs présentée précédemment.</p>

<p>Lorsqu&#8217;un utilisateur exécute une action sur un RDD, l&#8217;ordonnanceur examine le graphe d&#8217;origine des RDD pour construire un DAG (<a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph"><em>Directed Acyclic Graph</em></a>) des étapes à exécuter. Chaque étape (déterminée, soit par les opérations de déplacements de données nécessaires définies par les dépendances larges, soit par une partition déjà calculée qui peut être court circuité par le calcul d&#8217;un RDD parent) contient une série de transformations chainées avec autant de dépendances étroites que possible. L&#8217;ordonnanceur exécute alors les tâches pour calculer les partitions manquantes sur chacune des étapes jusqu&#8217;à l&#8217;optention du RDD cible.</p>

<p>L&#8217;ordonnanceur assigne les tâches aux machines en fonction des données locales. Si une tâche nécessite une partition qui est disponible en mémoire sur un noeud, cette dernière est rappatriée. Sinon, si une tâche calcule une partition pour laquelle le RDD fourni une localisation souhaitée, alors la partition est envoyée à ce noeud.</p>

<p>Pour les dépendances larges, les enregistrements intermédiaires sont matérialisés sur les noeuds hébergeant la partition parente afin de simplifier la reprise sur erreur.</p>

<p>Si la tâche échoue, elle est réexécutée sur un autre noeud tant que l&#8217;étape parente est disponible. Si certaines étapes deviennent inaccessibles, la tâche est re-soumise en parallèle afin de recalculer la partition manquante.</p>

<h2>Gestion mémoire</h2>

<p>Spark fournit 3 options de stockage pour les RDDs persistants :</p>

<ul>
<li>stockage en mémoire comme objet java désérialisé,</li>
<li>stockage en mémoire comme objet java sérialisé,</li>
<li>stockage sur disque.</li>
</ul>


<p>Le stockage en mémoire comme objet java désérialisé est le plus rapide car la JVM peut accéder nativement à chaque élément du RDD.</p>

<p>La seconde option permet aux utilisateurs de choisir une représentation plus efficace de la mémoire lorsque l&#8217;espace est limité. Bien sûr, la performance est moindre que pour la première option.</p>

<p>La troisième option est utile lorsque les RDDs sont trop larges pour tenir en RAM.</p>

<p>Afin de gérer la mémoire limitée disponible, la politique d&#8217;éviction LRU est utilisée pour les RDDs. Lorsqu&#8217;une nouvelle partition RDD est calculée mais qu&#8217;il n&#8217;y a pas suffisamment de place pour la stocker, la partition du RDD le plus anciennement accédée est évincée à moins qu&#8217;il ne s&#8217;agisse du même RDD que celui qui doit recevoir la nouvelle partition. Dans ce cas, la vieille partition est conservée en mémoire. Cela est important car la plupart des opérations exécutent des tâches sur un RDD entier. Aussi, la probabilité est forte pour qu&#8217;une partition déjà en mémoire soit utilisée ultérieurement.</p>

<h2>Point de contrôle</h2>

<p>Bien que l&#8217;état initial peut toujours être utilisé pour recalculer les RDDs suite à un échec, cela peut être couteux surtout si la chaine est longue. Ainsi, il peut être utile de disposer d&#8217;un point de controle des RDD (<em>checkpoint</em>) sur disque.</p>

<p>En général, les points de controle sont utiles pour des RDDs qui disposent d&#8217;un graphe contenant des dépendances larges. Dans les autres cas, cela peut être inutile. Ce point de controle peut être controlé manuellement via le flag <code>REPLICATE</code> de la méthode <code>persist</code>.</p>

<h1>Conclusion</h1>

<p>On a vu dans ce court article une première explication de ce qu&#8217;était les RDDs qui sont la pierre angulaire de Spark.</p>

<p>Pour ceux qui souhaiteraient avoir plus d&#8217;informations là-dessus, je les renverrai vers le papier officiel dont est extrait cet article disponible <a href="https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf">ici</a> ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture Et Traitement De Fichiers : Comment Faire Simple?]]></title>
    <link href="http://blog.jetoile.fr/2014/04/lecture-et-traitement-de-fichiers-comment-faire-simple.html"/>
    <updated>2014-04-10T14:15:44+02:00</updated>
    <id>http://blog.jetoile.fr/2014/04/lecture-et-traitement-de-fichiers-comment-faire-simple</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/batch/logo.png" alt="left-small" /></p>

<p>De nombreuses applications ou systèmes d&#8217;informations nécessitent le chargement de données issues de fichiers.</p>

<p>Bien souvent, cet import est exécuté par <em>batch</em>, mais il peut aussi être intéressant de faire cet import au fil de l&#8217;eau.</p>

<p>En outre, bien souvent, les fichiers à importer sont, soient nombreux, soient volumineux. Du coup, écrire un code simple et fiable peut devenir plus ardu que ce qu&#8217;il n&#8217;y parait. Si, de plus, on veut ajouter des logs parlant (c&#8217;est à dire avec, au minimum, le temps de traitement d&#8217;un fichier et son nom), cela a tendance a rajouter du bruit au code. Sans oublier que lire un fichier est bien mais que, souvent, un traitement est effectué dessus&hellip;</p>

<p>Enfin, lors d&#8217;une forte volumétrie, une scalabilité horizontale peut être intéressante surtout dans le contexte actuel où la quantité d&#8217;information vient à exploser.</p>

<p>Cet article parlera donc de la problématique d&#8217;import de fichiers dans une application en s&#8217;appuyant sur des framework comme <a href="http://projects.spring.io/spring-batch/">Spring Batch</a> ou <a href="http://projects.spring.io/spring-integration/">Spring Integration</a>. Le mot d&#8217;ordre sera de le faire le plus simplement possible en s&#8217;appuyant au maximum sur ces framework.</p>

<!-- more -->


<h1>Solution à base de <em>batch</em></h1>

<p>Ecrire un batch permettant de traiter des fichiers peut sembler simple mais lorsque le nombre de ces derniers vient à augmenter ou lorsque la taille des fichiers est volumineux, il arrive souvent que des bugs apparaissent. En outre, il convient alors de gérer manuellement les logs ainsi que la partie supervision.</p>

<p>Pour répondre à ce besoin, il est peut être avantageux d&#8217;utiliser <a href="http://projects.spring.io/spring-batch/">Spring Batch</a> (ou une autre implémentation de la <a href="https://jcp.org/en/jsr/detail?id=352">JSR 352</a>).</p>

<p><em>ndlr</em> : je ne présenterai pas le fonctionnement de Spring Batch à base de <strong>Job</strong> et <strong>Step</strong> puisque cela se trouve très facilement dans les documents officiels, livres ou articles de blog et je mettrai plutôt l&#8217;accent sur la faisabilité de tel ou tel chose.</p>

<p><img src="http://blog.jetoile.fr/images/batch/spring-batch-reference-model.png" title="crédit photo : http://docs.spring.io/spring-batch/trunk/reference/html-single/index.html" alt="center" /></p>

<p>Spring Batch offre nativement la possibilité de traiter les fichiers par <em>chunk</em> via :</p>

<ul>
<li><code>FlatFileItemReader</code> qui permet de lire un fichier plat ligne par ligne et où chaque ligne dispose de la même information (il est également possible de traiter des types de lignes différentes issues du même fichier avec <code>PatternMatchingCompositeLineMapper</code>).</li>
<li><code>StaxEventItemReader</code> pour lire fichiers xml composés de format de <em>fragments</em> identiques :
<img src="http://blog.jetoile.fr/images/batch/xmlinput.png" title="crédit photo : http://docs.spring.io/spring-batch/trunk/reference/html-single/index.html" alt="center" /></li>
</ul>


<p>avec :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;itemReader&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.xml.StaxEventItemReader&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;fragmentRootElementName&quot;</span> <span class="na">value=</span><span class="s">&quot;trade&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;resource&quot;</span> <span class="na">value=</span><span class="s">&quot;data/iosample/input/input.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;unmarshaller&quot;</span> <span class="na">ref=</span><span class="s">&quot;tradeMarshaller&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;tradeMarshaller&quot;</span>
</span><span class='line'>      <span class="na">class=</span><span class="s">&quot;org.springframework.oxm.xstream.XStreamMarshaller&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;aliases&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;util:map</span> <span class="na">id=</span><span class="s">&quot;aliases&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;trade&quot;</span>
</span><span class='line'>                   <span class="na">value=</span><span class="s">&quot;org.springframework.batch.sample.domain.Trade&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;price&quot;</span> <span class="na">value=</span><span class="s">&quot;java.math.BigDecimal&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;name&quot;</span> <span class="na">value=</span><span class="s">&quot;java.lang.String&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/util:map&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Généralement, il est nécessaire de préciser le nom du fichier à traiter mais il est également possible d&#8217;en traiter plusieurs de même type dans la même <em>Step</em> via la classe <code>MultiResourceItemReader</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;multiResourceReader&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.MultiResourceItemReader&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;resources&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath:data/input/file-*.txt&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;delegate&quot;</span> <span class="na">ref=</span><span class="s">&quot;flatFileItemReader&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spring Batch supporte également la scalabilité horizontale en permettant de préciser un <code>taskExecutor</code> au niveau de la <em>Step</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;step</span> <span class="na">id=</span><span class="s">&quot;loading&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tasklet</span> <span class="na">task-executor=</span><span class="s">&quot;taskExecutor&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/tasklet&gt;</span>
</span><span class='line'><span class="nt">&lt;/step&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi, on constate que Spring Batch offre nativement la possibilité de traiter des fichiers volumineux en les découpant par <em>chunk</em>.</p>

<p>De même, il offre nativement la possibilité de passer sur du traitement parallèle.</p>

<p>Concernant la partie supervision, vu que l&#8217;on est dans un environnement Spring, on bénéficie, bien sûr, de toute la partie JMX.</p>

<p>Pour la partie gestion des erreurs, Spring Batch permet de les gérer de manière très simple.</p>

<p>Cependant, on perd un grand intérêt si, par fichier, il n&#8217;y a qu&#8217;une seule donnée. En effet, le mécanisme de <em>chunk</em> devient alors inutile. Il reste cependant possible d&#8217;utiliser la scalabilité horizontale.</p>

<p>Concernant la partie log, j&#8217;avoue ne pas avoir creuser, je ne dirai donc rien sur ce point&hellip;</p>

<h1>Solution à base d&#8217;EIP</h1>

<p>Dans le cas où la volonté serait de traiter les fichiers au fil de l&#8217;eau, Spring Batch n&#8217;est pas la solution la plus adaptée&hellip;</p>

<p>Cependant, Spring Integration répond à ce besoin de manière très simple.</p>

<p>En effet, en utilisant un simple <strong>Service Activator</strong> (au sens EIP) de type <code>inbound-channel-adapter</code>, il devient alors possible de <em>poller</em> un répertoire et d&#8217;envoyer le contenu du fichier vers un <em>filter</em> (au sens EIP).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;file:inbound-channel-adapter</span> <span class="na">id=</span><span class="s">&quot;fileAdapter&quot;</span> <span class="na">auto-startup=</span><span class="s">&quot;true&quot;</span> <span class="na">auto-create-directory=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>                              <span class="na">filename-pattern=</span><span class="s">&quot;*.xml&quot;</span>
</span><span class='line'>                              <span class="na">directory=</span><span class="s">&quot;file:/tmp&quot;</span>
</span><span class='line'>                              <span class="na">scanner=</span><span class="s">&quot;recursiveScanner&quot;</span>
</span><span class='line'>                              <span class="na">prevent-duplicates=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>                              <span class="na">channel=</span><span class="s">&quot;inputChannel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;int:poller</span> <span class="na">fixed-delay=</span><span class="s">&quot;30000&quot;</span> <span class="na">max-messages-per-poll=</span><span class="s">&quot;500&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/file:inbound-channel-adapter&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;file:file-to-string-transformer</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">delete-files=</span><span class="s">&quot;true&quot;</span> <span class="na">input-channel=</span><span class="s">&quot;inputChannel&quot;</span>
</span><span class='line'>                                     <span class="na">output-channel=</span><span class="s">&quot;toLogger&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;int:logging-channel-adapter</span> <span class="na">auto-startup=</span><span class="s">&quot;true&quot;</span> <span class="na">channel=</span><span class="s">&quot;toLogger&quot;</span> <span class="na">level=</span><span class="s">&quot;DEBUG&quot;</span> <span class="na">log-full-message=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;int:channel</span> <span class="na">id=</span><span class="s">&quot;inputChannel&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;int:channel</span> <span class="na">id=</span><span class="s">&quot;toLogger&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>D&#8217;un point de vue scalabilité horizontale, il suffit de renseigner (tout comme pour Spring Batch) un <code>taskExecutor</code> au niveau du <em>Channel</em> et&hellip; c&#8217;est tout!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;task:executor</span> <span class="na">id=</span><span class="s">&quot;someExecutor&quot;</span>
</span><span class='line'>                   <span class="na">pool-size=</span><span class="s">&quot;20&quot;</span>
</span><span class='line'>                   <span class="na">keep-alive=</span><span class="s">&quot;2400&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;int:channel</span> <span class="na">id=</span><span class="s">&quot;toLogger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;int:dispatcher</span> <span class="na">task-executor=</span><span class="s">&quot;someExecutor&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/int:channel&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin, disposer d&#8217;une supervision est des plus aisé puisqu&#8217;il suffit de rajouter l&#8217;élément <code>message-history</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;int:message-history/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;ajout de cet élément indique à Spring Integration qui doit ajouter automatiquement dans le <em>header</em> du message le temps d&#8217;exécution de chaque <em>Filter</em>. Concernant le nom du fichier et son chemin, il se trouve renseigner automatiquement dans le header par l&#8217;<em>adapter</em> <code>file:inbound-channel-adapter</code>.</p>

<p>Coté gestion des erreurs, Spring Integration permet de les gérer très simplement sur le principe du canal d&#8217;erreur qui peut récupérer tous les messages en erreur.</p>

<p>Cependant, avec Spring Integration, si le fichier est volumineux, il n&#8217;est plus possible de le traiter en <em>chunk</em> et un risque de contention mémoire existe.</p>

<h1>Solution à base d&#8217;EIP et de batch</h1>

<p>On a vu dans les deux paragraphe précédent que Spring Integration était une très bonne solution pour traiter des fichiers au fil de l&#8217;eau alors que Spring Batch était plutôt orienté traitement par batch.</p>

<p>Cependant, il est très facile de composer les 2 modes. Cela permet, par exemple, de déclencher un traitement d&#8217;un fichier volumineux dès sa réception (via Spring Integration) et de bénéficier du mode <em>chunk</em> de Spring Batch pour le traitement.</p>

<p>Dans ce cas, bien sûr, il n&#8217;est pas question de faire de traitement sur le contenu du fichier dans la partie Spring Integration (seul l&#8217;objet <code>File</code> est transmis dans le corps du message) et c&#8217;est le jobs Spring Batch qui s&#8217;occupera du traitement à proprement parler.</p>

<p>Cela engendre peut être un <em>overhead</em> conséquent mais on est, au moins sûr, d&#8217;éviter le <em>Out Of Memory</em> dans le cas de fichiers volumineux. En outre, cela permet de bénéficier de la puissance des EIP (routage ou filtrage sur le nom du fichier par exemple) tant que le fichier n&#8217;a pas à être chargé.</p>

<p><img src="http://blog.jetoile.fr/images/batch/archi_combo.png" alt="large" /></p>

<h1>Conclusion</h1>

<p>On a vu dans cet article comment il pouvait être trivial de traiter l&#8217;import de fichiers sans avoir à gérer manuellement des pools de thread ou des logs d&#8217;audit.</p>

<p>Je ne suis pas rentré dans les détails mais mon objectif était surtout de montrer qu&#8217;en utilisant les bons outils/framework, il était possible de produire du code minimaliste et donc moins propice aux erreurs.</p>

<p>Pour avoir mis en oeuvre ces solutions, je peux vous assurer que le code écrit (ainsi que le temps passé) était minimaliste sinon nul (si on considère qu&#8217;écrire du xml n&#8217;est pas du code&hellip;). Bien sûr, je ne parle pas du code de traitement qui doit être écrit quoiqu&#8217;il arrive mais, encore une fois, le fait d&#8217;expédier la partie plomberie a permis de se concentrer sur le réel besoin métier.</p>

<p>Enfin, il est important de préciser que dans certains cas, une telle approche ne fonctionnera pas (si un fichier contient, par exemple, des dépendances à des données issues d&#8217;autres fichiers) et qu&#8217;il peut même être dangereux de vouloir absoluement utiliser ce type de framework au risque de leur faire faire des choses pour lesquelles ils ne sont pas prévus&hellip; Par exemple, il ne faut pas oublier que dans <strong>EIP</strong>, le <strong>I</strong> signifie Intégration!! Si le besoin est autre, il est fortement recommandé d&#8217;utiliser autre chose ou de le faire manuellement mais, par pitié, ne tordez pas le coup aux outils&hellip;! (si si, je l&#8217;ai vu&hellip; d&#8217;où mon désarroi&hellip;).</p>

<p><em>ndlr</em> : bon, j&#8217;admets que la partie qui a dû être la plus longue a sûrement été le <em>tuning</em> du pool de thread afin de tirer le meilleur partie de la machine mais, même si cela avait été fait de manière programmatique, cela aurait été nécessaire&hellip;</p>

<p><em>ndlr</em> : j&#8217;ai parlé, dans cet article, de Spring Integration pour la partie EIP mais il est tout aussi simple d&#8217;utiliser Apache Camel.</p>

<h1>Pour aller plus loin&hellip;</h1>

<ul>
<li><strong>Spring Integration in Action</strong> de Mark Fisher, Jonas Partner, Marius Bogoevici et Iwein Fuld chez Manning</li>
<li><strong>Camel in Action</strong> de Claus Ibsen et Jonathan Anstey chez Manning</li>
<li><strong>Spring Batch in Action</strong> de Arnaud Cogoluegnes, Thierry Templier, Gary Gregory et Olivier Bazoud chez Manning</li>
<li><strong>Enterprise Integration Patterns</strong> de G. Hohpe et B. Woolf chez Addisson Wesley</li>
<li><a href="http://www.eaipatterns.com/">http://www.eaipatterns.com/</a></li>
<li><a href="http://projects.spring.io/spring-integration/">http://projects.spring.io/spring-integration/</a></li>
<li><a href="http://projects.spring.io/spring-batch">http://projects.spring.io/spring-batch</a></li>
<li><a href="http://www.technologies-ebusiness.com/langages/spring-batch-spring-integration-une-usine-de-batchs-a-moindre-cout">http://www.technologies-ebusiness.com/langages/spring-batch-spring-integration-une-usine-de-batchs-a-moindre-cout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logstash : Tour D'horizon Sur Les Stratégies De Déploiement]]></title>
    <link href="http://blog.jetoile.fr/2014/04/logstash-petit-tour-dhorizon.html"/>
    <updated>2014-04-07T11:20:26+02:00</updated>
    <id>http://blog.jetoile.fr/2014/04/logstash-petit-tour-dhorizon</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/logstash/logstash.png" alt="left-small" />
Cet article fera un rapide tour d&#8217;horizon sur les différentes stratégies qui peuvent être utilisées pour <a href="http://logstash.net/">Logstash</a>.</p>

<p>Pour ce faire, je m&#8217;appuierai sur le très bon <a href="http://www.logstashbook.com/">livre officiel</a> que je me suis procuré (moyennant environ 10€) et qui fournit une très bonne vision sur ce qui est possible de faire ainsi que sur les différents concepts mais également sur les différentes stratégies de déploiement.</p>

<p>Même si je résumerai succinctement quelques-uns des concepts afin que cet article soit un minimum compréhensible, cet article traitera surtout sur la façon dont il est possible de déployer les agents Logstash.</p>

<p>[<em>ndlr</em> : par contre, je ne ferai, comme à mon habitude, que retranscrire ce qui est présent dans le livre&hellip;]</p>

<!-- more -->


<h1>Les concepts</h1>

<p>Logstash est écrit en JRuby et fonctionne dans une JVM. Son architecture est orientée messages et est très simple. Plutôt que de séparer le concepts d&#8217;agents et de serveurs, Logstash se présente comme  un simple agent qui est configuré pour combiner différentes fonctions avec d&#8217;autres composants open souce.</p>

<p>L&#8217;écosystème de Logstash est constitué de 4 composants :</p>

<ul>
<li><strong>Shipper</strong> qui envoie des événements à Logstash.</li>
<li><strong>Broker</strong> et <strong>Indexer</strong> qui reçoivent et indexent les événements.</li>
<li><strong>Search</strong> et <strong>Stockage</strong> qui permettent de rechercher et de stocker les événements.</li>
<li><strong>Web Interface</strong> qui est une interface web appelée <a href="http://www.elasticsearch.org/overview/kibana/"><strong>Kibana</strong></a>.</li>
</ul>


<p>Les serveurs Logstash sont constitués d&#8217;un ou de plusieurs de ces composants indépendamment, ce qui permet de les séparer offrant ainsi la possibilité de <em>scaler</em>  mais également de les combiner en fonction du besoin.</p>

<p>Dans le plupart des cas, Logstash sera déployé de la manière suivante :</p>

<ul>
<li>Les hôtes exécutant les agent Logstash comme des <strong>Shipper</strong> qui émettent, comme des événements, les logs des applications, services et hôte à un serveur central Logstash. Ces hôtes n&#8217;ont besoin de disposer que d&#8217;agents Logstash.</li>
<li>Le serveur central Logstash qui aura à sa charge l&#8217;exécution du <strong>Broker</strong>, <strong>Indexer</strong>, <strong>Search</strong>, <strong>Storage</strong> et <strong>Web Interface</strong> afin de recevoir, <em>processer</em> et stocker les logs.</li>
</ul>


<p><img src="http://blog.jetoile.fr/images/logstash/archi01.png" alt="center" /></p>

<p>En fait, une configuration typique de Logstash est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>input {
</span><span class='line'>  stdin { }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  grok {
</span><span class='line'>    match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot; }
</span><span class='line'>  }
</span><span class='line'>  date {
</span><span class='line'>    match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  elasticsearch { host =&gt; localhost }
</span><span class='line'>  stdout { codec =&gt; rubydebug }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>où :</p>

<ul>
<li><code>input</code> peut prendre en valeur des <em>plugins</em> qui correspondent à ce que peut prendre en entrée l&#8217;agent (comme, par exemple, l&#8217;entrée standard ou le contenu d&#8217;un fichier).</li>
<li><code>filter</code> peut prendre en valeur des <em>plugins</em> qui permettent de manipuler l&#8217;événement en le <em>parsant</em>, filtrant ou en ajoutant des informations issues du parsing ou non.</li>
<li><code>output</code> peut prendre en valeur des <em>plugins</em> qui permettent de préciser où seront envoyés les événements (comme, par exemple, la sortie standard ou ElasticSearch).</li>
</ul>


<h1>Les différentes stratégies de déploiement possibles</h1>

<h2>Le mode de déploiement <em>classique</em></h2>

<p>Dans l&#8217;architecture de déploiement <em>classique</em>, on retrouve la <em>stack</em> préconisée qui est la suivante :</p>

<ul>
<li>Les agents Logstash se trouvant sur les machines hôtes collectent et émettent les logs (sous forme d&#8217;événements) au système central.</li>
<li>Une instance d&#8217;un système de bufferisation (comme <a href="http://redis.io/"><strong>Redis</strong></a> ou autre, comme une implémentation d&#8217;<a href="http://www.amqp.org/"><strong>AMQP</strong></a>) reçoit les événement sur le serveur central et joue le rôle de buffer.</li>
<li>Un agent Logstash extrait les événements de logs du buffer et les traite.</li>
<li>L&#8217;agent Logstash envoie les événements d&#8217;index dans ElasticSearch.</li>
<li>ElasticSearch stocke et rend les événements cherchable.</li>
<li>Kibana permet la recherche et le rendu des événements indexés dans ElasticSearch.</li>
</ul>


<p><img src="http://blog.jetoile.fr/images/logstash/archi02.png" alt="center" /></p>

<p>En fait, le <strong>broker</strong> permet de servir de buffer entre les agents et le serveur Logstash. Cela est essentiel pour les raisons suivantes :</p>

<ul>
<li>Cela permet d&#8217;améliorer les performances de l&#8217;environnement Logstash en fournissant une buffer de cache pour les événements de log.</li>
<li>Cele permet de fournir de la résiliance. Si l&#8217;indexation Logstash échoue, alors les événements sont mise en fils d&#8217;attente afin d&#8217;éviter la perte d&#8217;informations.</li>
</ul>


<p>On observe donc, dans cette configuration, que les agents Logstash présents sur les machines hôtes ne font que transmettre sans intelligence réelle au buffer les différents événements de log et qu&#8217;ils n&#8217;ont pas <em>vraiment</em> de logique (ie. ils n&#8217;ont pas de section <strong>filter</strong> mais juste les sections <strong>input</strong> et <strong>output</strong>).</p>

<h2>Le mode de déploiement sans agent</h2>

<h3>A la mode système</h3>

<p>Comme on a pu voir dans le paragraphe précédent, les machines hôtes disposent d&#8217;un agent Logstash complet. Cependant, ils n&#8217;ont pas vraiment de logique puisqu&#8217;ils ne font que transmettre les événements de logs au broker dont le rôle est de servir de buffer.</p>

<p>Cependant, parfois, il peut être intéressant de ne pas à avoir besoin d&#8217;installer un agent Logstash sur les machines hôtes :</p>

<ul>
<li>si la JVM déployé sur la machine hôte est limitée,</li>
<li>si la machine hôte est un périphérique qui dispose de peu de ressource et qu&#8217;il n&#8217;est pas possible d&#8217;y installer une JVM ou d&#8217;exécuter un agent,</li>
<li>s&#8217;il n&#8217;est pas possible d&#8217;installer n&#8217;importe quel logiciel sur la machine hôte.</li>
</ul>


<p>Pour répondre à cette problématique, il est possible d&#8217;utiliser des outils systèmes comme <strong>Syslog</strong>.</p>

<p>Dans ce cas, le serveur Logstash n&#8217;aura qu&#8217;à déclarer un <em>input</em> supplémentaire permettant d&#8217;écouter des événéments (dans notre cas, Syslog).</p>

<p>A titre informatif, il est possible d&#8217;utiliser un <em>Appender</em> syslog dans log4j ou logback (entre autre).</p>

<p><img src="http://blog.jetoile.fr/images/logstash/archi03.png" alt="center" /></p>

<h3>A la mode agent</h3>

<p>Dans le cas où ni un agent Logstash ni Syslog ne sont envisageables, il est possible d&#8217;utiliser <a href="https://github.com/elasticsearch/logstash-forwarder">Logstash Forwarder</a> (anciennement Lumberjack).</p>

<p>Il s&#8217;agit d&#8217;un client légé permettant d&#8217;envoyer des messages à Logstash en offrant un protocole maison intégrant de la sécurité (encryption SSL) ainsi que de la compression.</p>

<p>Il a été conçu pour être petit avec une faible emprunte mémoire tout en étant rapide. Il a été écrit en <a href="http://golang.org/">Go</a>.</p>

<p>Dans ce cas, il suffit d&#8217;exécuter logstash-forwarder avec les <em>bons</em> fichiers de configuration spécifiant l&#8217;adresse du serveur cible ainsi que l&#8217;emplacement du certificat et les fichiers à scruter.</p>

<p>Du coté serveur, il suffit, tout comme pour le mode sans agent à base de Syslog, de déclarer un <em>input</em> lumberjack.</p>

<p>A noter que d&#8217;autres <em>shipper</em> sont également disponibles tels que :</p>

<ul>
<li><a href="https://github.com/josegonzalez/beaver">Beaver</a></li>
<li><a href="https://github.com/danryan/woodchuck">Woodchuck</a></li>
</ul>


<h1>Les filtres</h1>

<p>Logstash vient avec un système de filtre qu&#8217;il est possible de configurer via la section <strong>filter</strong>.</p>

<p>Ces filtres permettent de filtrer mais également de modifier (via <strong>mutable</strong>) le contenu de l&#8217;événement. Ils permettent également de <em>parser</em> les événements (via <strong>grok</strong>) afin de les rajouter lors de la phase d&#8217;indexation (et donc de stockage). Cela permet ainsi de pouvoir rechercher des événements de manière plus ciblé.</p>

<p>Il existe plusieurs stratégies lors de l&#8217;utilisation de filtres :</p>

<ul>
<li>filtrer les événements sur l&#8217;agent,</li>
<li>filtrer les événements sur le serveur central,</li>
<li>émettre les événements au bon format.</li>
</ul>


<p>Le plus simple est encore d&#8217;émettre les logs au bon format, cependant, cela n&#8217;est pas toujours possible (trop de log différents, systèmes hétérogènes, code legacy, &hellip;).</p>

<p>Une autre manière de faire est d&#8217;exécuter le filtrage localement (ie. directement sur l&#8217;agent). Cela permet de réduire la charge de traitement du serveur central et d&#8217;être sûr que seuls les événements propres et structurés seront stockés. Cependant, cela oblige à maintenir une configuration plus complexe sur chaque agent.</p>

<p>A l&#8217;inverse, si le filtrage est effectué sur le serveur central, cela permet de centraliser les filtres et permet donc une administration plus simple. Cependant, cela demande des ressources supplémentaires pour effectuer le filtrage sur un plus grand nombre d&#8217;événements.</p>

<h1>La scalabilité et Logstash</h1>

<p>Une des grande force de Logstash est qu&#8217;il est possible de le composer avec différents composants : Logstash lui-même, Redis comme <em>broker</em>, ElasticSearch et bien d&#8217;autres éléments qu&#8217;il est possible de composer via la configuration de Logstash.</p>

<p>Ainsi, il est possible de jouer à plusieurs niveaux pour répondre à telles ou telles problématiques comme la perte de messages, le fait d&#8217;avoir un SPOF (<em>Single Point Of Failure</em>) ou d&#8217;avoir un point de contention dans le système.</p>

<p>Par exemple, si Redis est utilisé comme broker entre les agents Logstash et le serveur central, il peut être intéressant de passer Redis en mode <em>failover</em> afin d&#8217;éviter une perte d&#8217;événements lors de la transmission de ces derniers. Pour ce faire, il suffit de configurer le plugin <strong>redis</strong> de la section <strong>output</strong>  avec l&#8217;option <code>shuffle_hosts</code> pour indiquer à l&#8217;agent Logstash de n&#8217;utiliser qu&#8217;un seul noeud Redis lors de sa phase d&#8217;écriture. Du coté du serveur central, il suffit d&#8217;ajouter (et de configurer) autant de plugin <strong>redis</strong> de la section <strong>input</strong> que de noeud.</p>

<p><img src="http://blog.jetoile.fr/images/logstash/archi04.png" alt="center" /></p>

<p>Afin de permettre à la partie stockage/indexation d&#8217;être scalable, il suffit de configurer ElasticSearch en mode cluster, ce qui est natif chez lui.</p>

<p>Enfin, il est possible de rendre le serveur central Logstash robuste à la panne en en créant d&#8217;autres instances (mode <em>failover</em>) qui partageront la même configuration.</p>

<p><img src="http://blog.jetoile.fr/images/logstash/archi05.png" alt="center" /></p>

<h1>Conclusion</h1>

<p>En conclusion de cet article où je ne suis pas rentré dans les détails (mais ce n&#8217;est pas ce qui m&#8217;intéressait&hellip;), on peut constater qu&#8217;il existe moultes façons de configurer Logstash (et son écosystème) qui dépendent à chaque fois des besoins.</p>

<p>Cela est rendu possible par l&#8217;architecture et la conception modulaire de Logstash et le fait qu&#8217;il est très simple de le <em>plugger</em> à différentes solutions.</p>

<p>Même si cela est évident, je trouvais utile de le marquer noir sur blanc dans un court article&hellip; ;&ndash;)</p>

<h1>Pour aller plus loin&hellip;</h1>

<ul>
<li><a href="http://logstash.net/">http://logstash.net/</a></li>
<li><a href="http://www.logstashbook.com/">http://www.logstashbook.com/</a></li>
<li><a href="http://blog.xebia.fr/2013/12/12/logstash-elasticsearch-kibana-s01e02-analyse-orientee-business-de-vos-logs-applicatifs/">http://blog.xebia.fr/2013/12/12/logstash-elasticsearch-kibana-s01e02-analyse-orientee-business-de-vos-logs-applicatifs/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changement Du Flux RSS]]></title>
    <link href="http://blog.jetoile.fr/2014/03/changement-flux-rss.html"/>
    <updated>2014-03-31T18:54:22+02:00</updated>
    <id>http://blog.jetoile.fr/2014/03/changement-flux-rss</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/rss_jetoile.png" alt="left-small" /></p>

<p>Comme certain ont pu le constater, le <em>look &amp; feel</em> du blog a évolué et j&#8217;espère qu&#8217;il vous plait.</p>

<p>Normalement, en plus d&#8217;un meilleur confort pour moi lorsque j&#8217;écris, une amélioration devrait être visible sur le temps de chargement des pages en raison d&#8217;un allègement de ces dernières.</p>

<p>Cependant, en raison d&#8217;une <em>limitation</em> de <a href="http://www.feedburner.com">feedburner</a> sur la taille du fichier <strong>atom.xml</strong>, j&#8217;ai été obligé de ne faire pointer que la catégorie <code>Java</code> (je n&#8217;ai pas trouver comment il était possible de générer ce fichier avec seulement une partie de l&#8217;article ou juste le titre&hellip;).</p>

<p>Du coup, je vous invite à modifier vos lecteurs RSS si vous en utilisez un pour pointer directement sur le nouveau flux :</p>

<ul>
<li>soit par celui de <strong>feedburner</strong> mais dans ce cas, il n&#8217;y aura que la catégorie <code>Java</code> : <a href="http://feeds.feedburner.com/jetoile">http://feeds.feedburner.com/jetoile</a> ,</li>
<li>soit en utilisant celui-ci : <a href="http://blog.jetoile.fr/atom.xml">http://blog.jetoile.fr/atom.xml</a> .</li>
</ul>


<!-- more -->


<p>Je m&#8217;excuse par avance pour ce changement et j&#8217;espère que vous continuerez à me lire ;&ndash;)</p>

<p>A oui, cela prend effet dès maintenant (si ça ce n&#8217;est pas agile, alors je ne sais pas ce que c&#8217;est&hellip; ;&ndash;) )</p>

<p>crédit photo : <a href="http://www.netpublic.fr/2013/04/7-solutions-pour-remplacer-google-reader/">http://www.netpublic.fr/2013/04/7-solutions-pour-remplacer-google-reader/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changement De Look Et D'hébergeur]]></title>
    <link href="http://blog.jetoile.fr/2014/03/changement-de-look-et-dhebergeur.html"/>
    <updated>2014-03-28T10:00:03+01:00</updated>
    <id>http://blog.jetoile.fr/2014/03/changement-de-look-et-dhebergeur</id>
    <content type="html"><![CDATA[<p><img src="http://blog.jetoile.fr/images/octopress/img_octopress_blogger.png" alt="left-small" /></p>

<p>Cet article n&#8217;a rien à voir avec Java et il est plus à titre informatif.</p>

<p>En effet, j&#8217;ai décidé de passer de <strong>Blogger</strong> pour l&#8217;hébergement de mon blog à une solution basée sur <a href="http://octopress.org/">Octopress</a> et un hébergement sur <a href="http://pages.github.com/">github.io</a>.</p>

<p>Pourquoi ce choix?</p>

<p>Et ben, en fait, pour plusieurs raisons :</p>

<ul>
<li>J&#8217;ai toujours aimé la philosophie de <a href="http://www.latex-project.org/">LaTeX</a> qui permettait d&#8217;écrire au kilomètre sans avoir à se soucier de la mise en forme.</li>
<li>Mon blog était long à charger et la partie <em>tuning</em> de trucs <em>front</em> (et je ne le dis de manière non péjorative) n&#8217;étant pas mon fort, je n&#8217;ai pas réussi à l&#8217;alléger.</li>
<li>La partie <em>syntaxhighlight</em> était vraiment <em>chiante</em> à gérer et alourdissait vraiment (mais alors <em>vraiment</em>!) le chargement des pages.</li>
<li>J&#8217;avais envie d&#8217;une solution plus simple pour me permettre d&#8217;écrire mes articles (d&#8217;où mon <a href="http://blog.jetoile.fr/2014/03/livereload-et-linux-ou-comment-rediger.html">post sur livereload</a>) et pas à avoir à faire de copier/coller + retouche dans <a href="http://blogger.com/">Blogger</a> :

<ul>
<li>Ca correspond à la philo jrebel (<em>ndlr</em> : que j&#8217;aime beaucoup) (cf. <a href="ihttp://blog.jetoile.fr/2010/02/jrebel-ou-comment-accelerer-le_24.html">ici</a>) pour le code Java mais appliqué, ici, à la partie front.</li>
<li>C&#8217;est toujours plus marrant de pouvoir écrire un truc et de le voir se recharger automatiquement dans son navigateur &ndash; ça c&#8217;est pour la partie_geek ;&ndash;).</li>
<li>C&#8217;est <em>nouveau</em> (enfin pour moi&hellip;).</li>
</ul>
</li>
<li>Blogger ne me convenait plus car il faisait trop de choses dont je ne me servais pas et, de plus, la façon dont il le faisait ne me convenait plus (son mécanisme de <em>templating</em> est assez lourd).</li>
<li>De nombreux blogs ont migrés et je trouve leur <em>look &amp; feel</em> plus proche de ce qu&#8217;on attend d&#8217;un blog actuellement sans le coté <em>bling bling</em> de ce qui se faisait il y a quelques années.</li>
</ul>


<!-- more -->


<p>Ce sont ces différentes raisons qui m&#8217;ont fait préférer :</p>

<ul>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown</a> pour la partie écriture pure (sachant que je m&#8217;étais déjà fait chier à faire marcher livereload avec&hellip;)</li>
<li><a href="http://octopress.org/">Octopress</a> pour la génération : plus simple et sûrement (je n&#8217;ai pas fait de recherche précise) plus utilisé (donc documenté) que d&#8217;autres solutions comme <a href="http://jekyllrb.com/">Jekyll</a> ou <a href="http://blog.getpelican.com/">Pelican</a>. En outre, Octopress permettait de manière très simple de générer le site en local pour voir le rendu.</li>
</ul>


<p>Je ne l&#8217;avais pas fait à l&#8217;époque car je n&#8217;avais pas envie de m&#8217;embêter avec l&#8217;intégration de services pour, au final, avoir des fonctionnalités offertes en natif par Blogger. Cependant, le nombre de blogs migrant et l&#8217;adoption de solutions comme Jekyll et Octopress m&#8217;ont montré que, au final, c&#8217;était simple.</p>

<p>Je ne reviendrai pas sur la façon dont j&#8217;ai migré puisque de nombreux blogs en parle et que je n&#8217;ai fait que suivre leurs instructions.</p>

<p>Par contre, la partie <em>import</em> ne m&#8217;ayant pas convaincue (pages générée crade), j&#8217;ai décigé de porter tous mes anciens articles avec Markdown. Il ne s&#8217;agit que de copier/coller + ré-application des styles, des liens et des images mais cela m&#8217;a demandé un temps considérable&hellip; (je suis sûr que si j&#8217;avais été malin, j&#8217;aurais faire le gros du boulot avec un bon <code>sed</code>&hellip; mais bon&hellip;). Du coup, j&#8217;espère qu&#8217;il n&#8217;y a pas de pertes&hellip;</p>

<p><del>Pour l&#8217;instant, je n&#8217;ai pas réussi à importer les commentaires via <a href="http://disqus.com/">Disqus</a> (enfin l&#8217;import est fait mais les commentaires ne s&#8217;affichent pas&hellip; :&lsquo;( ).</del>
[<em>ndlr</em> : après un coup de remapping des url des commentaires importés via <strong>Disqus</strong>, les commentaires sont revenus \o/]</p>

<p><del>La partie rss est un peu <em>buggé</em> car mon flux <em>atom</em> généré par Octopress est trop gros pour être utilisé par <a href="http://www.feedburner.com">feedburner</a> (du coup, le flux n&#8217;est pas global mais seulement sur la catégorie <code>Java</code>).</del> [<em>ndlr</em> : cf ce <a href="http://blog.jetoile.fr/2014/03/changement-flux-rss.html">post</a> ]</p>

<p>Enfin, il faut encore que je change l&#8217;image de bannière ;&ndash;)</p>

<p>Pour info, l&#8217;ancien blog est toujours accessible à l&#8217;adresse <a href="http://jetoile.blogspot.com">http://jetoile.blogspot.com</a> mais a été retiré de l&#8217;indexation google. Je ne porterai pas non plus les nouveaux articles sur ce dernier&hellip;</p>

<p>Voili voilou&hellip; j&#8217;espère que cette nouvelle disposition vous plait ;&ndash;)</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAXRS, Netty4 Et Spring Integration : Ils Reviennent Et Ils Ne Sont Pas Content!]]></title>
    <link href="http://blog.jetoile.fr/2014/03/jaxrs-netty4-et-spring-integration-ils.html"/>
    <updated>2014-03-24T19:12:29+01:00</updated>
    <id>http://blog.jetoile.fr/2014/03/jaxrs-netty4-et-spring-integration-ils</id>
    <content type="html"><![CDATA[<p><img src="http://4.bp.blogspot.com/-XR47rmCwXK0/Ux8gpmR-TLI/AAAAAAAABR0/T1h_RtvDED0/s1600/resteasy_jolokia_metrics_orig3.png" alt="left-small" /></p>

<p>Pour faire suite à mes articles <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html">resteasy-netty</a> et <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-4-jackon-2-les-memes-mais.html">resteasy-netty4</a>, nous allons voir, dans cet article, comment il est possible de créer un service activator avec <a href="http://projects.spring.io/spring-integration/">Spring Integration</a> qui exposera via resteasy-netty4 un service REST.</p>

<p>Ce service REST esposera simplement une opération en POST qui, via Spring Integration, écrira dans un fichier et qui, pour le fun, écrira également sur la console.</p>

<p>Pour ce faire, rien de plus simple, un <a href="http://www.eaipatterns.com/MessagingAdapter.html">Service Activator</a> de type <a href="http://docs.spring.io/spring-integration/docs/3.0.1.RELEASE/reference/html/messaging-endpoints-chapter.html#gateway">gateway</a> a été utilisé.</p>

<p>Cet article montrera donc comment il est possible d&#8217;intégrer Spring Integration à notre petite stack basé sur Resteasy-Netty4, Jackson, <a href="http://metrics.codahale.com/">Metrics</a>, <a href="https://helloreverb.com/developers/swagger">Swagger</a> et <a href="http://www.jolokia.org/">Jolokia</a>.</p>

<p>Le code se trouve sur Github <a href="https://github.com/jetoile/spring-integration-netty4">ici</a>.</p>

<!-- more -->


<h1>Présentation du usecase</h1>

<p>Le service qui est exposé est un service de type REST répondant à un appel de type POST et acceptant du JSON.</p>

<p>Il répondra à une requête de type :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;message&quot;: &quot;hello&quot;, &quot;time&quot;: &quot;2014-03-05T10:55:39.835+01:00&quot;}&#39;</span>  http://127.0.0.1:8081/sample/write
</span></code></pre></td></tr></table></div></figure>


<p>et écrira un fichier par requête reçue dans le répertoire <code>/tmp</code>. En outre, il loggera sur la console le message reçu.</p>

<p>Ainsi, avec la commande suivante, on devrait voir un incrément du nombre à chaque réception de message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>watch <span class="s1">&#39;ls *.msg | wc -l&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Mise en oeuvre</h1>

<h2>Dépendances</h2>

<p>A titre informatif, les dépendances ainsi que leurs versions sont les suivantes (au format gradle) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>dependencies {
</span><span class='line'>    compile group: &#39;org.springframework.integration&#39;, name: &#39;spring-integration-core&#39;, version:&#39;3.0.1.RELEASE&#39;
</span><span class='line'>    compile group: &#39;org.springframework.integration&#39;, name: &#39;spring-integration-jmx&#39;, version:&#39;3.0.1.RELEASE&#39;
</span><span class='line'>    compile group: &#39;org.springframework.integration&#39;, name: &#39;spring-integration-http&#39;, version:&#39;3.0.1.RELEASE&#39;
</span><span class='line'>    compile group: &#39;org.springframework.integration&#39;, name: &#39;spring-integration-file&#39;, version:&#39;3.0.1.RELEASE&#39;
</span><span class='line'>    compile group: &#39;io.netty&#39;, name: &#39;netty-all&#39;, version:&#39;4.0.17.Final&#39;
</span><span class='line'>    compile group: &#39;org.jboss.resteasy&#39;, name: &#39;jaxrs-api&#39;, version:&#39;3.0.4.Final&#39;
</span><span class='line'>    compile group: &#39;org.jolokia&#39;, name: &#39;jolokia-spring&#39;, version:&#39;1.1.2&#39;
</span><span class='line'>    compile group: &#39;com.wordnik&#39;, name: &#39;swagger-jaxrs_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>    compile group: &#39;com.wordnik&#39;, name: &#39;swagger-annotations_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>    compile group: &#39;javax.servlet&#39;, name: &#39;servlet-api&#39;, version:&#39;2.5&#39;
</span><span class='line'>    compile group: &#39;com.ryantenney.metrics&#39;, name: &#39;metrics-spring&#39;, version:&#39;3.0.0-RC4&#39;
</span><span class='line'>    compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-netty4&#39;, version:&#39;3.0.6.Final&#39;
</span><span class='line'>    compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-jackson-provider&#39;, version:&#39;3.0.6.Final&#39;
</span><span class='line'>    compile group: &#39;commons-configuration&#39;, name: &#39;commons-configuration&#39;, version:&#39;1.9&#39;
</span><span class='line'>    compile group: &#39;commons-collections&#39;, name: &#39;commons-collections&#39;, version:&#39;3.2.1&#39;
</span><span class='line'>    compile group: &#39;commons-io&#39;, name: &#39;commons-io&#39;, version:&#39;2.4&#39;
</span><span class='line'>    compile group: &#39;joda-time&#39;, name: &#39;joda-time&#39;, version:&#39;2.3&#39;
</span><span class='line'>    compile(group: &#39;com.google.guava&#39;, name: &#39;guava&#39;, version:&#39;15.0&#39;) {exclude(module: &#39;jsr305&#39;)}
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Pour le lecteur averti, il constatera que la version de Jackson utilisé ici est la 1 (ie. avec le groupId <strong>org.codehaus</strong>). En effet, Jackson 2 et JodaTime m&#8217;ont fait des misères et je n&#8217;ai pas réussi à les résoudre rapidement, donc, par flemme, je suis repassé en version 1&hellip; ;&ndash;)</p>

<h2>DTO</h2>

<p>Un DTO annoté JAX-B (compris par Jackson) sera utilisé pour représenter le JSON reçu dans le corps du POST.</p>

<p>Il se présente comme suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DtoRequest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DateTime</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMessage</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">message</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DateTime</span> <span class="nf">getTime</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">time</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTime</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">time</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;DtoRequest{&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;message=&#39;&quot;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;, time=&quot;</span> <span class="o">+</span> <span class="n">time</span> <span class="o">+</span>
</span><span class='line'>                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ici, la méthode <code>toString()</code> a été overridé car utilisé lors de l&#8217;affichage du message par le loggueur sur la console.</p>

<p>Jusque là, ça ne casse pas trois pattes à un canard ;&ndash;)</p>

<h2>Intégration complète de Spring Integration</h2>

<p>Pour rappel, Spring Integration est une implémentation des <a href="http://blog.jetoile.fr/2009/12/eip-quest-ce-que-cest.html">EIP</a> (<em>Enterprise Integration Patterns</em>) et propose donc une mise en oeuvre de l&#8217;architecture <strong>Pipes and Filters</strong>.</p>

<p><img src="http://3.bp.blogspot.com/-Pd_JIILTp_0/Ux8fIIRV-tI/AAAAAAAABRQ/hevpIqdQU4M/s1600/si-netty4-graph.png" alt="large" /></p>

<p>Au niveau écriture dans un répertoire, le <code>file-outbound-adapter</code> offert par Spring Integration sera utilisé :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>file:outbound-channel-adapter id=&quot;fileAdapter&quot; auto-create-directory=&quot;true&quot;
</span><span class='line'>                                       directory=&quot;file:${out.directory}&quot;
</span><span class='line'>                                       channel=&quot;channel&quot;/&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Coté loggueur, ce sera le composant logging :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;int:logging-channel-adapter</span> <span class="na">auto-startup=</span><span class="s">&quot;true&quot;</span> <span class="na">channel=</span><span class="s">&quot;channel&quot;</span> <span class="na">level=</span><span class="s">&quot;INFO&quot;</span> <span class="na">log-full-message=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>et où on aura un Pipe (channel) en mode <code>Publish-Subscribe</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;int:publish-subscribe-channel</span> <span class="na">id=</span><span class="s">&quot;channel&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au niveau des namespaces et autres informations, on aura ce qui suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:int=</span><span class="s">&quot;http://www.springframework.org/schema/integration&quot;</span>
</span><span class='line'>       <span class="na">xmlns:file=</span><span class="s">&quot;http://www.springframework.org/schema/integration/file&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:int-jmx=</span><span class="s">&quot;http://www.springframework.org/schema/integration/jmx&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span> <span class="na">id=</span><span class="s">&quot;corePlaceHolder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;locations&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>classpath:/conf.properties<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;mbeanServer&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jmx.support.MBeanServerFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;locateExistingServerIfPossible&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;int-jmx:mbean-export</span> <span class="na">default-domain=</span><span class="s">&quot;fr.jetoile.sample&quot;</span> <span class="na">server=</span><span class="s">&quot;mbeanServer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;int:message-history/&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On y remarque la lecture du fichier de configuration, ainsi que les activations jmx adéquate afin d&#8217;avoir un peu d&#8217;informations ;&ndash;) Concernant l&#8217;élément message-history, cela permet de préciser à Spring Integration d&#8217;ajouter dans les headers du message (qui, pour rappel, transite via les Pipes entre les différents Filters) des informations de temps d&#8217;exécution.</p>

<p>En soit, il s&#8217;agit d&#8217;une configuration extrèmement simple pour toute personne connaissant un minimum Spring Integration, donc encore une fois, rien de compliqué&hellip; ;&ndash;)</p>

<h2>Gateway Spring Integration</h2>

<p>Afin de rentrer dans le vif du sujet, ce paragraphe montrera comment il est possible de transformer notre petit serveur Resteasy-Netty4 en une Gateway Spring Integration.</p>

<p>Pour ce faire, il suffit de définir une interface (NettyGateway) qui sera utilisée par Spring Integration.
Ci dessous un petit extract de la <a href="http://docs.spring.io/spring-integration/docs/3.0.1.RELEASE/reference/html/messaging-endpoints-chapter.html#gateway">documentation officielle</a> :</p>

<blockquote><p>Le rôle principale d&#8217;une Gateway est de chacher l&#8217;API de messaging fournit par Spring Integration. Cela permet à la logique business de l&#8217;application de s&#8217;abstraire complètement de l&#8217;API de Spring Integration et, en utilisant une Gateway générique, le code n&#8217;interagit qu&#8217;avec une simple interface.</p>

<p>&hellip;</p>

<p>En fait, Spring Integration fournit un GatewayProxyFactoryBean qui génère un proxy pour n&#8217;importe quelle interface et qui, en interne, invoque la méthode de la Gateway. Ainsi, en utilisant l&#8217;injection de dépendance, il est possible d&#8217;exposer l&#8217;interface aux méthodes business.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">NettyGateway</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="n">DtoRequest</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi, notre service REST se présentera comme suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/sample&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">NettyGateway</span> <span class="n">messageProducer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGateway</span><span class="o">(</span><span class="n">NettyGateway</span> <span class="n">messageProducer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">messageProducer</span> <span class="o">=</span> <span class="n">messageProducer</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@POST</span>
</span><span class='line'>    <span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/write&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Consumes</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">write</span><span class="o">(</span><span class="n">DtoRequest</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">messageProducer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On y constatera que l&#8217;inteface NettyGateway lui a été injecté afin qu&#8217;il puisse servir de passe plat.</p>

<p>Coté Spring, la configuration est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;int:gateway</span> <span class="na">id=</span><span class="s">&quot;nettyGateway&quot;</span> <span class="na">service-interface=</span><span class="s">&quot;fr.jetoile.sample.gateway.NettyGateway&quot;</span>
</span><span class='line'>                 <span class="na">default-request-channel=</span><span class="s">&quot;channel&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;simpleService&quot;</span> <span class="na">class=</span><span class="s">&quot;fr.jetoile.sample.service.SimpleService&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;gateway&quot;</span> <span class="na">ref=</span><span class="s">&quot;nettyGateway&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Du coté de démarrage de notre serveur Resteasy-Netty4, cela ne sera, bien sûr, plus fait dans le <code>main()</code>, mais dans notre bean Spring à qui sera injectée notre classe implémentant notre service REST :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;nettyContainer&quot;</span> <span class="na">class=</span><span class="s">&quot;fr.jetoile.sample.gateway.NettyContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;simpleService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NettyContainer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">NettyContainer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CONF_PROPERTIES</span> <span class="o">=</span> <span class="s">&quot;conf.properties&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Configuration</span> <span class="n">config</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SimpleService</span> <span class="n">simpleService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">NettyContainer</span><span class="o">(</span><span class="n">SimpleService</span> <span class="n">simpleService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PropertiesConfiguration</span><span class="o">(</span><span class="n">CONF_PROPERTIES</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ConfigurationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;bad config&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">simpleService</span> <span class="o">=</span> <span class="n">simpleService</span><span class="o">;</span>
</span><span class='line'>        <span class="n">initServer</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initServer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ResteasyDeployment</span> <span class="n">deployment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResteasyDeployment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nettyPort</span> <span class="o">=</span> <span class="mi">8081</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">config</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceEnabled</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceEnabled&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">));</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceMaxJobResults</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceMaxJobResults&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceMaxWait</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceMaxWait&quot;</span><span class="o">,</span> <span class="mi">300000</span><span class="o">));</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceThreadPoolSize</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceThreadPoolSize&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">nettyPort</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;netty.port&quot;</span><span class="o">,</span> <span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LOGGER</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;is going to use default netty config&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">deployment</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="n">asList</span><span class="o">(</span><span class="n">simpleService</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MyNettyJaxrsServer</span> <span class="n">netty</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyNettyJaxrsServer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setDeployment</span><span class="o">(</span><span class="n">deployment</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">nettyPort</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setRootResourcePath</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setSecurityDomain</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà&hellip; c&#8217;est tout!</p>

<p>Ne reste plus que la classe implémentant notre main() qui ne fera que charger le contexte spring :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ConfigurationException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;springintegration-config.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Juste un dernier point : le lecteur un peu concentré aura remarqué qu&#8217;il y a, ici, un petit meli melo dans la lecture des fichiers de configuration (parfois chargé par Spring, parfois chargé via commons-configuration). Je laisse cependant ces points en suspens et à la discrétion de la personne qui utilisera et lira cet article (ou qui aura atteint ce point&hellip;) (s&#8217;il y en a&hellip; ;&ndash;) ).</p>

<h2>Intégration de Metrics</h2>

<p>L&#8217;objectif de cet article étant de monter une stack &ldquo;presque complète&rdquo;, il est, bien sûr, primordial de fournir les bonnes métriques.</p>

<p>Comme dans mon article précédent, ce sera Metrics qui sera utilisé.</p>

<p>Cependant, alors que cela avait été fait programmatiquement, ce coup-ci, cela sera fait via Spring (parce que sinon ce n&#8217;est pas drôle&hellip; ;&ndash;) ).</p>

<p>Pour ce faire, c&#8217;est très simple, en tirant la dépendance <strong>&lsquo;com.ryantenney.metrics&rsquo;, name: &lsquo;metrics-spring&rsquo;, version:&lsquo;3.0.0-RC4&rsquo;</strong> au lieu de <strong>&lsquo;com.codahale.metrics&rsquo;, name: &lsquo;metrics-core&rsquo;</strong>, il ne reste qu&#8217;à ajouter à notre service REST l&#8217;annotation <code>@Timed</code> et d&#8217;ajouter dans la configuration Spring les éléments suivants :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@POST</span>
</span><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/write&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Consumes</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Timed</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Response</span> <span class="nf">write</span><span class="o">(</span><span class="n">DtoRequest</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">messageProducer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec la configuration Spring suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:int=</span><span class="s">&quot;http://www.springframework.org/schema/integration&quot;</span>
</span><span class='line'>       <span class="na">xmlns:file=</span><span class="s">&quot;http://www.springframework.org/schema/integration/file&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:metrics=</span><span class="s">&quot;http://www.ryantenney.com/schema/metrics&quot;</span>
</span><span class='line'>       <span class="na">xmlns:int-jmx=</span><span class="s">&quot;http://www.springframework.org/schema/integration/jmx&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd</span>
</span><span class='line'><span class="s">                  http://www.ryantenney.com/schema/metrics http://www.ryantenney.com/schema/metrics/metrics-3.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;metrics:metric-registry</span> <span class="na">id=</span><span class="s">&quot;metrics&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;metrics:annotation-driven</span> <span class="na">metric-registry=</span><span class="s">&quot;metrics&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;metrics:reporter</span> <span class="na">type=</span><span class="s">&quot;jmx&quot;</span> <span class="na">metric-registry=</span><span class="s">&quot;metrics&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour montrer que je ne mens pas, on a donc (ici, utilisation de Hawt.io via Jolokia) :</p>

<p><img src="http://4.bp.blogspot.com/-CZebCZS47aE/Ux8fk-EwKQI/AAAAAAAABRY/C7OwMBMZNEc/s1600/si-hawtio-connextion.png" alt="medium" /></p>

<p><img src="http://2.bp.blogspot.com/-H-LmsIrivjA/Ux8fo7ORYpI/AAAAAAAABRg/EIp_-F6LzF4/s1600/si-hawtio-metrics.png" alt="medium" /></p>

<p>On constate encore une fois la simplicité de la chose!</p>

<h2>Intégration de Jolokia</h2>

<p>De même que pour notre paragraphe précédent, l&#8217;intégration de Jolokia se fera ici par configuration Spring plutôt que de manière programmatique.</p>

<p>Pour ce faire, il suffit de tirer la dépendance <strong>&lsquo;org.jolokia&rsquo;, name: &lsquo;jolokia-spring&rsquo;, version:&lsquo;1.1.2&rsquo;</strong> au lieu de <strong>&lsquo;org.jolokia&rsquo;, name: &lsquo;jolokia-jvm&rsquo;</strong>, et d&#8217;ajouter le bon bean à Spring :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:int=</span><span class="s">&quot;http://www.springframework.org/schema/integration&quot;</span>
</span><span class='line'>       <span class="na">xmlns:file=</span><span class="s">&quot;http://www.springframework.org/schema/integration/file&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:metrics=</span><span class="s">&quot;http://www.ryantenney.com/schema/metrics&quot;</span>
</span><span class='line'>       <span class="na">xmlns:int-jmx=</span><span class="s">&quot;http://www.springframework.org/schema/integration/jmx&quot;</span>
</span><span class='line'>       <span class="na">xmlns:jolokia=</span><span class="s">&quot;http://www.jolokia.org/jolokia-spring/schema/config&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd</span>
</span><span class='line'><span class="s">                  http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd</span>
</span><span class='line'><span class="s">                  http://www.jolokia.org/jolokia-spring/schema/config http://www.jolokia.org/jolokia-spring/schema/config/jolokia-config.xsd</span>
</span><span class='line'><span class="s">                  http://www.ryantenney.com/schema/metrics http://www.ryantenney.com/schema/metrics/metrics-3.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span> <span class="na">id=</span><span class="s">&quot;corePlaceHolder&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;locations&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>classpath:/conf.properties<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;jolokia:agent</span> <span class="na">lookupConfig=</span><span class="s">&quot;true&quot;</span> <span class="na">systemPropertiesMode=</span><span class="s">&quot;never&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;jolokia:config</span>
</span><span class='line'>                <span class="na">autoStart=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>                <span class="na">host=</span><span class="s">&quot;${jolokia.host}&quot;</span>
</span><span class='line'>                <span class="na">port=</span><span class="s">&quot;${jolokia.port}&quot;</span>
</span><span class='line'>                <span class="na">user=</span><span class="s">&quot;${jolokia.user}&quot;</span>
</span><span class='line'>                <span class="na">password=</span><span class="s">&quot;${jolokia.password}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/jolokia:agent&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et&hellip; c&#8217;est tout&hellip; Jolokia est intégré à notre petite stack.</p>

<h2>Intégration de Swagger</h2>

<p>Concernant l&#8217;intégration de Swagger, cela ne diffère en rien de mon article précédent. Même problème de CORS, même hack&hellip;</p>

<p><img src="http://4.bp.blogspot.com/-ev6GX1U7SEs/Ux8fxhWTl_I/AAAAAAAABRo/srY62BOqZS4/s1600/si-swagger.png" alt="medium" /></p>

<h2>Branchement des plugins Maven Appassembler et Assembly</h2>

<p>De même que pour Swagger, rien à signaler de particulier par rapport à mon article précédent&hellip; cela fonctionne sans problème ;&ndash;)</p>

<h1>Conclusion</h1>

<p>En conclusion, on peut constater que l&#8217;intégration de Spring integration dans notre petite stack est tout aussi trivial que le reste!</p>

<p>Encore une fois, simple et efficace ;&ndash;)</p>

<p>Ainsi, on peut bénéficier du meilleur des deux mondes.</p>

<p>Bien sûr, on peut se poser la question de l&#8217;intérêt de brancher quelques choses de véloce (Netty) avec un framework succeptible d&#8217;entrainer un Overhead (spring integration) et qui serait, alors, le point de contension. La question est légitime mais je n&#8217;y répondrai pas&hellip; ;&ndash;) (pour bien faire, il faudrait faire un benchmark).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Livereload Et Linux Ou Comment Rédiger Du Html Simplement]]></title>
    <link href="http://blog.jetoile.fr/2014/03/livereload-et-linux-ou-comment-rediger.html"/>
    <updated>2014-03-20T11:24:11+01:00</updated>
    <id>http://blog.jetoile.fr/2014/03/livereload-et-linux-ou-comment-rediger</id>
    <content type="html"><![CDATA[<p><img src="http://3.bp.blogspot.com/-iICRkMH0vhY/UxnsLscNtII/AAAAAAAABRA/uXMjhVZjOBg/s1600/ubuntu_livereload.png" alt="left-small" /></p>

<p>Cet article n&#8217;a rien à voir avec le monde Java.</p>

<p>Il s&#8217;agit plus d&#8217;un petit tutoriel surtout destiné&hellip; à moi-même&hellip; ;&ndash;)</p>

<p>En effet, mon blog étant hébergé sur blogger, lorsque je rédige un article, je le fais le plus souvent directement en HTML. Afin d&#8217;avoir une idée de l&#8217;aperçu, je le charge directement dans mon navigateur mais passer son temps à faire du Alt-Tab/F5 a rapidement commencé à m&#8217;énerver.</p>

<p>Aussi, ayant entendu parlé depuis un moment de livereload, je me suis dis que cela pouvait être pas mal de l&#8217;utiliser.</p>

<p>Cependant, j&#8217;avoue avoir subi un échec cuisant (je suis sous un environnement linux et je tiens à préciser que je ne suis pas des plus à l&#8217;aise avec le monde nodejs ou ruby &ndash; ceci explique aussi cela&hellip; ;&ndash;) ) et cela malgré avoir mes multiples tentatives (à coup de gem install) et recherche sur mon ami Google (enfin, quand on n&#8217;est pas doué, on n&#8217;est pas doué&hellip; :&lsquo;( )</p>

<p>Du coup, j&#8217;ai pris l&#8217;option :</p>

<blockquote><p>&ldquo;J&#8217;appelle un ami&rdquo;</p></blockquote>

<p>Dans mon cas, je remercie <a href="https://twitter.com/hcapitaine">Harold</a> pour son aide.</p>

<p>Il m&#8217;a conseillé de me jeter un oeil sur <a href="http://gruntjs.com/">Grunt</a> qui gérait nativement livereload (bon, pour ma défense, je n&#8217;avais pas prévu de partir sur Grunt&hellip; ;&ndash;) ).</p>

<p>Cet article présentera donc comment j&#8217;ai réussi à faire fonctionner le bouzin avec, en prime, la possibilité d&#8217;utiliser Markdown.</p>

<p>Concernant l&#8217;environnement, il s&#8217;agit d&#8217;Ubuntu 13.10 (sur Mac, je ne doute pas que cela aurait été plus simple mais bon&hellip;)</p>

<p>[NDLR : encore une fois, je précise que je ne suis pas du tout expert dans ce domaine, il est donc inutile de me poser des questions. Par contre, toutes propositions d&#8217;amélioration est la bienvenue ;&ndash;)]</p>

<p>A titre informatifs, les fichiers se trouvent sur <a href="https://github.com/jetoile/livereload-grunt">Github</a>.</p>

<!-- more -->


<h1>Installation de nodejs, de npm et de grunt</h1>

<p>Dans un premier temps, il convient d&#8217;installer tout le strict minimum afin de permettre à Grunt de fonctionner.</p>

<p>Installation de NodeJS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nodejs
</span></code></pre></td></tr></table></div></figure>


<p>Installation de Npm :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install npm
</span></code></pre></td></tr></table></div></figure>


<p>Installation de Grunt (de manière global au système) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo npm install -g grunt-cli
</span></code></pre></td></tr></table></div></figure>


<p>Installer le <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">plugin</a> livereload sur Chrome ou Firefox.</p>

<p>Dans le cas de Chrome, pensez à modifier sa configuration pour qu&#8217;il autorise l&#8217;accès aux URLs de fichiers.
<img src="http://1.bp.blogspot.com/-jg_Pm58wTpc/Uxno8Z2A74I/AAAAAAAABQo/zUsVZpiPSz4/s1600/chrome-config.png" alt="medium" /></p>

<h1>Configuration de Grunt</h1>

<p>Par la suite, toutes les opérations seront effectué dans le répertoire <code>$HOME/tmp</code>.</p>

<p>Une fois tous les logiciels installés, il ne reste qu&#8217;à créer les fichiers nécessaires au bon fonctionnement de Grunt :</p>

<ul>
<li><code>package.json</code> qui permet de télécharger les modules et de les installer localement dans répertoire courant (un peu comme la rubrique dependencies de Maven),</li>
<li><code>gruntfile.js</code> qui permet de configurer les différents modules précédemment installés par la commande npm install (un peu comme la rubrique build/plugins de Maven).</li>
</ul>


<p><code>$HOME/tmp/package.json</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;yo&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;grunt&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;matchdep&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.1.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-express&quot;</span><span class="o">:</span> <span class="s2">&quot;~1.0.0-beta2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-contrib-watch&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-open&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.2.1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;engines&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;node&quot;</span><span class="o">:</span> <span class="s2">&quot;&gt;=0.8.0&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il convient maintenant de lancer le téléchargement et l&#8217;installation des modules en exécutant la commande suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>Ne reste plus qu&#8217;à configurer les modules via le fichier Gruntfile.js.</p>

<p><code>$HOME/tmp/Gruntfile.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Load Grunt tasks declared in the package.json file</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;matchdep&#39;</span><span class="p">).</span><span class="nx">filterDev</span><span class="p">(</span><span class="s1">&#39;grunt-*&#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// grunt-express will serve the files from the folders listed in `bases` on specified `port` and `hostname`</span>
</span><span class='line'>    <span class="nx">express</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">port</span><span class="o">:</span> <span class="mi">9000</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">hostname</span><span class="o">:</span> <span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">bases</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;html&#39;</span><span class="p">],</span> <span class="c1">// Replace with the directory you want the files served from</span>
</span><span class='line'>                              <span class="c1">// Make sure you don&#39;t use `.` or `..` in the path as Express</span>
</span><span class='line'>                              <span class="c1">// is likely to return 403 Forbidden responses if you do</span>
</span><span class='line'>                              <span class="c1">// http://stackoverflow.com/questions/14594121/express-res-sendfile-throwing-forbidden-error</span>
</span><span class='line'>          <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// grunt-watch will monitor the projects files</span>
</span><span class='line'>    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="s1">&#39;*.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// grunt-open will open your browser at the project&#39;s URL</span>
</span><span class='line'>    <span class="nx">open</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;http://localhost:&lt;%= express.all.options.port%&gt;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Creates the `server` task</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;express&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;open&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;watch&#39;</span>
</span><span class='line'>  <span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette configuration est fonctionnelle avec l&#8217;arborescence suivante :</p>

<p><img src="http://4.bp.blogspot.com/-yzXs78VTiFw/Uxnor5jGo_I/AAAAAAAABQY/01_s7DCQHT4/s1600/arbo01.png" alt="center" /></p>

<p>Dans cette dernière et avec cette configuration, tous les fichiers du répertoire <code>html</code> avec l&#8217;extension .html seront suivis par livereload. Aussi, il suffit de créer un fichier html dans le répertoire <code>html</code> (par exemple html/sample.html) et de lancer la commande :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grunt
</span></code></pre></td></tr></table></div></figure>


<p>Le navigateur par défaut s&#8217;ouvrira alors avec l&#8217;url : <a href="http://localhost:9000/.">http://localhost:9000/.</a> Il suffit d&#8217;y ajouter la page voulu (dans notre exemple <a href="http://localhost:9000/sample.html">http://localhost:9000/sample.html</a>) et d&#8217;activer le plugin <code>livereload</code>.</p>

<p><img src="http://1.bp.blogspot.com/-edBGc5pdGLg/UxnpKGFtjsI/AAAAAAAABQw/E6maHZkgGcs/s1600/icon_livereload.png" alt="center" /></p>

<p>Il ne reste plus qu&#8217;à modifier le fichier html et lors de sa sauvegarde, la page sera automatiquement mis à jour dans le navigateur!</p>

<p>Si l&#8217;erreur suivante apparait :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/env: node: Aucun fichier ou dossier de ce <span class="nb">type</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut installer <code>nodejs-legacy</code> (cf. <a href="https://github.com/volojs/volo/issues/154">ici</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nodejs-legacy
</span></code></pre></td></tr></table></div></figure>


<h1>Configuration de Grunt pour l&#8217;intégration de Markdown</h1>

<p>L&#8217;intégration de Markdown se fait de la même manière que précédemment.</p>

<p>Les fichiers <code>package.json</code> et <code>Gruntfile.js</code> se voient juste ajouter le module <code>grunt-markdown</code>.</p>

<p><code>package.json</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;yo&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;grunt&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;matchdep&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.1.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-express&quot;</span><span class="o">:</span> <span class="s2">&quot;~1.0.0-beta2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-contrib-watch&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-open&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.2.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-markdown&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.5.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;engines&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;node&quot;</span><span class="o">:</span> <span class="s2">&quot;&gt;=0.8.0&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Gruntfile.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">odule</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;matchdep&#39;</span><span class="p">).</span><span class="nx">filterDev</span><span class="p">(</span><span class="s1">&#39;grunt-*&#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">markdown</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;*.md&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;html/&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.html&#39;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">express</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">port</span><span class="o">:</span> <span class="mi">9000</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">hostname</span><span class="o">:</span> <span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">bases</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;html&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.md&#39;</span><span class="p">,</span><span class="s1">&#39;*.html&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">tasks</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;markdown&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">open</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;http://localhost:&lt;%= express.all.options.port%&gt;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;markdown&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;express&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;open&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;watch&#39;</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suite à la modification de ces fichiers (attention à penser de faire un <code>npm install</code> après modification du fichier <code>package.json</code>), il est alors possible d&#8217;écrire son document en Markdown.</p>

<p>L&#8217;arborescence à respecter par rapport à la configuration est la suivante :
<img src="http://2.bp.blogspot.com/-kgC6a8jRwG8/Uxno29Sr9EI/AAAAAAAABQg/lf3W_rnDAvU/s1600/arbo02.png" alt="center" /></p>

<p>Lors de la modification du fichier .md, son pendant html sera automatiquement créé (ou modifié) et pris en compte par un rechargement du navigateur.</p>

<h1>Conclusion</h1>

<p>Comme on a pu le voir, au final, configurer livereload pour permettre un rechargement automatique lors de la modification d&#8217;un fichier HTML ou Markdown n&#8217;est pas si compliquée une fois que l&#8217;on a tous les fichiers et les bons modules configurés.</p>

<p>D&#8217;ailleurs, cet article est le premier écrit en Markdown (quand je disais que ce n&#8217;était pas ma tasse de thé&hellip;).</p>

<p>En espérant qu&#8217;il pourra être utile à d&#8217;autres lecteurs et en m&#8217;excusant par avance si des informations sont approximatives&hellip;</p>

<h1>Pour aller plus loin&hellip;</h1>

<ul>
<li><a href="http://rhumaric.com/2013/07/renewing-the-grunt-livereload-magic/">http://rhumaric.com/2013/07/renewing-the-grunt-livereload-magic/</a></li>
<li><a href="http://justinklemm.com/grunt-watch-livereload-javascript-less-sass-compilation/">http://justinklemm.com/grunt-watch-livereload-javascript-less-sass-compilation/</a></li>
<li><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-</a></li>
<li><a href="http://blog.roddet.com/2013/12/nantesjs-gruntjs/">http://blog.roddet.com/2013/12/nantesjs-gruntjs/</a></li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-lists">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-lists</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAXRS, Netty 4, Jackon 2... Les Mêmes Mais en Mieux...]]></title>
    <link href="http://blog.jetoile.fr/2014/03/jaxrs-netty-4-jackon-2-les-memes-mais.html"/>
    <updated>2014-03-17T08:43:12+01:00</updated>
    <id>http://blog.jetoile.fr/2014/03/jaxrs-netty-4-jackon-2-les-memes-mais</id>
    <content type="html"><![CDATA[<p><img src="http://3.bp.blogspot.com/-Vzol1CndcjY/Uxib17Rlf2I/AAAAAAAABQI/Qi4u0DWe2s4/s1600/resteasy_jolokia_metrics.png" alt="left-small" /></p>

<p>Pour faire suite à mon <a href="http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html">article précédent</a> qui montrait comment il était possible de construire une <em>stack</em> légère basée sur Resteasy-Netty3, Jackson, <a href="http://www.jolokia.org/">Jolokia</a> et <a href="https://helloreverb.com/developers/swagger">Swagger</a>, cet article montrera comment il est possible de faire la même chose avec Resteasy-Netty4 et Jackson 2.</p>

<p>Même si les changements ne sont pas énormes, il y a quand même quelques variantes, et, histoire d&#8217;être exhaustif, cela permet de faire le tour complet&hellip; ;&ndash;)</p>

<p>En fait, les seuls points qui diffèrent, par rapport au code précédent, touchent :</p>

<ul>
<li>les dépendances,</li>
<li>l&#8217;intégration de Resteasy-netty4,</li>
<li>l&#8217;intégration du JacksonConfig (changement d&#8217;API coté Jackson),</li>
<li>le support de JodaTime dans Jackson 2,</li>
<li>et le support du CORS dans Resteasy-Netty4.</li>
</ul>


<p>C&#8217;est donc ces différents points qui seront abordés dans cet article.</p>

<p>Le code se trouve sur github sur la branche <a href="https://github.com/jetoile/resteasy-netty-sample/tree/netty4">netty4</a>.</p>

<!-- more -->


<h1>Les Dépendances</h1>

<p>Les dépendances utilisées sont les suivantes (au format gradle) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>compile group: &#39;io.netty&#39;, name: &#39;netty-all&#39;, version:&#39;4.0.17.Final&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;jaxrs-api&#39;, version:&#39;3.0.4.Final&#39;
</span><span class='line'>compile group: &#39;org.jolokia&#39;, name: &#39;jolokia-jvm&#39;, version:&#39;1.1.2&#39;
</span><span class='line'>compile group: &#39;com.wordnik&#39;, name: &#39;swagger-jaxrs_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>compile group: &#39;com.wordnik&#39;, name: &#39;swagger-annotations_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>compile group: &#39;javax.servlet&#39;, name: &#39;servlet-api&#39;, version:&#39;2.5&#39;
</span><span class='line'>compile group: &#39;com.codahale.metrics&#39;, name: &#39;metrics-core&#39;, version:&#39;3.0.1&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-netty4&#39;, version:&#39;3.0.6.Final&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-jackson2-provider&#39;, version:&#39;3.0.6.Final&#39;
</span><span class='line'>compile group: &#39;com.fasterxml.jackson.datatype&#39;, name: &#39;jackson-datatype-joda&#39;, version:&#39;2.3.2&#39;
</span><span class='line'>compile group: &#39;commons-configuration&#39;, name: &#39;commons-configuration&#39;, version:&#39;1.9&#39;
</span><span class='line'>compile group: &#39;commons-collections&#39;, name: &#39;commons-collections&#39;, version:&#39;3.2.1&#39;
</span><span class='line'>compile group: &#39;commons-io&#39;, name: &#39;commons-io&#39;, version:&#39;2.4&#39;
</span><span class='line'>compile group: &#39;joda-time&#39;, name: &#39;joda-time&#39;, version:&#39;2.3&#39;
</span><span class='line'>compile(group: &#39;com.google.guava&#39;, name: &#39;guava&#39;, version:&#39;15.0&#39;) {exclude(module: &#39;jsr305&#39;)}
</span></code></pre></td></tr></table></div></figure>


<p>On peut y constater depuis la version précédente que netty est passé en version <strong>4.0.17.Final</strong> mais également c&#8217;est maintenant l&#8217;artefact <strong>resteasy-netty4</strong> qui est utilisé plutôt que <strong>resteasy-netty</strong>. De la même manière, c&#8217;est maintenant l&#8217;artefact <strong>resteasy-jackson2-provider</strong> plutôt que <strong>resteasy-jackson-provider</strong>.</p>

<p>En outre l&#8217;artefact <strong>jackson-datatype-joda</strong> a été ajouté (nous y reviendrons ultérieurement).</p>

<h1>Intégration de Resteasy-netty4</h1>

<p>Afin de remplacer Resteasy-netty 3 par Resteasy-Netty4, il suffit de modifier les dépendances et de supprimer le hack fait précédemment concernant le CORS (ie. la classe <code>RequestHandler</code>) qui est incompatible avec cette nouvelle version.</p>

<p>Une fois cela fait, le programme devrait être de nouveau fonctionnel sans avoir à modifier quoique ce soit (modulo Swagger-UI mais nous y reviendrons ultérieurement.)</p>

<h1>Intégration de Jackson 2</h1>

<p>Comme il a été vu précédemment, c&#8217;est maintenant la version de Jackson 2 qui est utilisé plutôt que la 1.</p>

<p>Aussi, il est nécessaire de modifier les packages de Jackson importés : cela n&#8217;est à faire que dans la classe <code>JacksonConfig</code>.</p>

<p>Certaines des API ayant également évoluées, la classe <code>JacksonConfig</code> devient :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JacksonConfig</span> <span class="kd">implements</span> <span class="n">ContextResolver</span><span class="o">&lt;</span><span class="n">ObjectMapper</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">JacksonConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">SerializationFeature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">objectMapper</span><span class="o">.</span><span class="na">setSerializationInclusion</span><span class="o">(</span><span class="n">JsonInclude</span><span class="o">.</span><span class="na">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ObjectMapper</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">objectType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">objectMapper</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Support de JodaTime dans Jackson 2</h1>

<p>On a vu dans le paragraphe précédent comment il fallait modifier notre code pour utiliser Jackson 2 à la place de Jackson 1.</p>

<p>Cependant, lors d&#8217;un :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET http://localhost:8081/sample/say/hello
</span></code></pre></td></tr></table></div></figure>


<p>On obtient :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;time&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;era&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;dayOfMonth&quot;</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;dayOfWeek&quot;</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;dayOfYear&quot;</span><span class="o">:</span> <span class="mi">65</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;weekyear&quot;</span><span class="o">:</span> <span class="mi">2014</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;weekOfWeekyear&quot;</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;monthOfYear&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;yearOfEra&quot;</span><span class="o">:</span> <span class="mi">2014</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;yearOfCentury&quot;</span><span class="o">:</span> <span class="mi">14</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;centuryOfEra&quot;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;millisOfSecond&quot;</span><span class="o">:</span> <span class="mi">173</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;millisOfDay&quot;</span><span class="o">:</span> <span class="mi">53370173</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;secondOfMinute&quot;</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;secondOfDay&quot;</span><span class="o">:</span> <span class="mi">53370</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;minuteOfHour&quot;</span><span class="o">:</span> <span class="mi">49</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;minuteOfDay&quot;</span><span class="o">:</span> <span class="mi">889</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;hourOfDay&quot;</span><span class="o">:</span> <span class="mi">14</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;year&quot;</span><span class="o">:</span> <span class="mi">2014</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;zone&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;fixed&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;uncachedZone&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;cachable&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;fixed&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;Europe/Paris&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;Europe/Paris&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;millis&quot;</span><span class="o">:</span> <span class="mi">1394113770173</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;chronology&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;zone&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;fixed&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;uncachedZone&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;cachable&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;fixed&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;Europe/Paris&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;Europe/Paris&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;afterNow&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;beforeNow&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;equalNow&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour corriger cela, il suffit d&#8217;importer la dépendance <strong>&lsquo;com.fasterxml.jackson.datatype&rsquo;, name: &lsquo;jackson-datatype-joda&rsquo;</strong> et d&#8217;ajouter à l&#8217;<code>objectMapper</code> le module <code>JodaModule</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">registerModule</span><span class="o">(</span><span class="k">new</span> <span class="n">JodaModule</span><span class="o">());</span>
</span><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">SerializationFeature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi, on obtient bien :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;time&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-03-06T13:53:38.714Z&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Support du CORS dans Resteasy-Netty4</h1>

<p>Précédemment, avec Resteast-netty 3, nous avions remarqué un problème de CORS avec Swagger-UI.
Pour en venir à bout, un <em>hack</em> avait été fait mais ce n&#8217;était pas très propre&hellip;</p>

<p>Malheureusement, Resteasy-netty4 n&#8217;offre pas, non plus, de manière simple pour surmonter ce problème. Heureusement, en fouillant un peu sur internet, un <a href="http://stackoverflow.com/questions/18857546/implement-cross-origin-resource-sharing-cors-on-resteasy-netty-server">article</a> propose de rajouter un <code>ChannelInboundHandler</code> au <em>pipeline</em> Netty.</p>

<p>Cependant, je n&#8217;ai pas trouvé de moyen simple de le faire mis à part la surcharge de la méthode&hellip;</p>

<p>Le code obtenu est donc le suivant :</p>

<p>La classe <code>ChannedInboundHandler</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CorsHeadersChannelHandler</span> <span class="kd">extends</span> <span class="n">SimpleChannelInboundHandler</span><span class="o">&lt;</span><span class="n">NettyHttpRequest</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">channelRead0</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">NettyHttpRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getOutputHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Access-Control-Allow-Origin&quot;</span><span class="o">,</span> <span class="s">&quot;*&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getOutputHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Access-Control-Allow-Methods&quot;</span><span class="o">,</span> <span class="s">&quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getOutputHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Access-Control-Allow-Headers&quot;</span><span class="o">,</span> <span class="s">&quot;X-Requested-With, Content-Type, Content-Length&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ctx</span><span class="o">.</span><span class="na">fireChannelRead</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La surcharge de la méthode <code>start()</code> pour ajouter le <em>handler</em> au pipeline Netty (désolé pour le nom&hellip;) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyNettyJaxrsServer</span> <span class="kd">extends</span> <span class="n">NettyJaxrsServer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">EventLoopGroup</span> <span class="n">eventLoopGroup</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">EventLoopGroup</span> <span class="n">eventExecutor</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">ioWorkerCount</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">executorThreadCount</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SSLContext</span> <span class="n">sslContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxRequestSize</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">backlog</span> <span class="o">=</span> <span class="mi">128</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSSLContext</span><span class="o">(</span><span class="n">SSLContext</span> <span class="n">sslContext</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">sslContext</span> <span class="o">=</span> <span class="n">sslContext</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIoWorkerCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">ioWorkerCount</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">ioWorkerCount</span> <span class="o">=</span> <span class="n">ioWorkerCount</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setExecutorThreadCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">executorThreadCount</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">executorThreadCount</span> <span class="o">=</span>  <span class="n">executorThreadCount</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMaxRequestSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxRequestSize</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">maxRequestSize</span>  <span class="o">=</span> <span class="n">maxRequestSize</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBacklog</span><span class="o">(</span><span class="kt">int</span> <span class="n">backlog</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">backlog</span> <span class="o">=</span> <span class="n">backlog</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">eventLoopGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NioEventLoopGroup</span><span class="o">(</span><span class="n">ioWorkerCount</span><span class="o">);</span>
</span><span class='line'>        <span class="n">eventExecutor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NioEventLoopGroup</span><span class="o">(</span><span class="n">executorThreadCount</span><span class="o">);</span>
</span><span class='line'>        <span class="n">deployment</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RequestDispatcher</span><span class="o">((</span><span class="n">SynchronousDispatcher</span><span class="o">)</span><span class="n">deployment</span><span class="o">.</span><span class="na">getDispatcher</span><span class="o">(),</span> <span class="n">deployment</span><span class="o">.</span><span class="na">getProviderFactory</span><span class="o">(),</span> <span class="n">domain</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Configure the server.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sslContext</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">bootstrap</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="n">eventLoopGroup</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">channel</span><span class="o">(</span><span class="n">NioServerSocketChannel</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">childHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">ChannelInitializer</span><span class="o">&lt;</span><span class="n">SocketChannel</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="nd">@Override</span>
</span><span class='line'>                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initChannel</span><span class="o">(</span><span class="n">SocketChannel</span> <span class="n">ch</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpRequestDecoder</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpObjectAggregator</span><span class="o">(</span><span class="n">maxRequestSize</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpResponseEncoder</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">RestEasyHttpRequestDecoder</span><span class="o">(</span><span class="n">dispatcher</span><span class="o">.</span><span class="na">getDispatcher</span><span class="o">(),</span> <span class="n">root</span><span class="o">,</span> <span class="n">RestEasyHttpRequestDecoder</span><span class="o">.</span><span class="na">Protocol</span><span class="o">.</span><span class="na">HTTP</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">CorsHeadersChannelHandler</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">RestEasyHttpResponseEncoder</span><span class="o">(</span><span class="n">dispatcher</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="n">eventExecutor</span><span class="o">,</span> <span class="k">new</span> <span class="n">RequestHandler</span><span class="o">(</span><span class="n">dispatcher</span><span class="o">));</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">})</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">option</span><span class="o">(</span><span class="n">ChannelOption</span><span class="o">.</span><span class="na">SO_BACKLOG</span><span class="o">,</span> <span class="n">backlog</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">childOption</span><span class="o">(</span><span class="n">ChannelOption</span><span class="o">.</span><span class="na">SO_KEEPALIVE</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">SSLEngine</span> <span class="n">engine</span> <span class="o">=</span> <span class="n">sslContext</span><span class="o">.</span><span class="na">createSSLEngine</span><span class="o">();</span>
</span><span class='line'>            <span class="n">engine</span><span class="o">.</span><span class="na">setUseClientMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">bootstrap</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="n">eventLoopGroup</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">channel</span><span class="o">(</span><span class="n">NioServerSocketChannel</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">childHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">ChannelInitializer</span><span class="o">&lt;</span><span class="n">SocketChannel</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="nd">@Override</span>
</span><span class='line'>                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initChannel</span><span class="o">(</span><span class="n">SocketChannel</span> <span class="n">ch</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addFirst</span><span class="o">(</span><span class="k">new</span> <span class="n">SslHandler</span><span class="o">(</span><span class="n">engine</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpRequestDecoder</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpObjectAggregator</span><span class="o">(</span><span class="n">maxRequestSize</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpResponseEncoder</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">RestEasyHttpRequestDecoder</span><span class="o">(</span><span class="n">dispatcher</span><span class="o">.</span><span class="na">getDispatcher</span><span class="o">(),</span> <span class="n">root</span><span class="o">,</span> <span class="n">RestEasyHttpRequestDecoder</span><span class="o">.</span><span class="na">Protocol</span><span class="o">.</span><span class="na">HTTPS</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">CorsHeadersChannelHandler</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">RestEasyHttpResponseEncoder</span><span class="o">(</span><span class="n">dispatcher</span><span class="o">));</span>
</span><span class='line'>                            <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="n">eventExecutor</span><span class="o">,</span> <span class="k">new</span> <span class="n">RequestHandler</span><span class="o">(</span><span class="n">dispatcher</span><span class="o">));</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">})</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">option</span><span class="o">(</span><span class="n">ChannelOption</span><span class="o">.</span><span class="na">SO_BACKLOG</span><span class="o">,</span> <span class="n">backlog</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">childOption</span><span class="o">(</span><span class="n">ChannelOption</span><span class="o">.</span><span class="na">SO_KEEPALIVE</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">bootstrap</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">port</span><span class="o">).</span><span class="na">syncUninterruptibly</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On y observe le rajout du <em>handler</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">CorsHeadersChannelHandler</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin, l&#8217;initialisation du serveur Resteasy-netty :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MyNettyJaxrsServer</span> <span class="n">netty</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyNettyJaxrsServer</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>On a vu, dans cet article, comment il était possible d&#8217;intégrer JAX-RS avec Netty 4 à l&#8217;aide de Resteasy tout en ayant une intégration de Jackson 2.</p>

<p>On a également montré qu&#8217;il était possible d&#8217;y intégrer très simplement Swagger et Jolokia.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAXRS, Netty Et Bien Plus Encore... Mode D'emploi...]]></title>
    <link href="http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode.html"/>
    <updated>2014-03-10T08:03:49+01:00</updated>
    <id>http://blog.jetoile.fr/2014/03/jaxrs-netty-et-bien-plus-encore-mode</id>
    <content type="html"><![CDATA[<p><img src="http://1.bp.blogspot.com/-HYBTn5anFdE/Uxdv3cRgu_I/AAAAAAAABP4/gsCZjUIxDyQ/s1600/resteasy_jolokia_metrics.png" alt="left-small" /></p>

<p>L&#8217;informatique évolue constamment et c&#8217;est également le cas des architectures qui ont tendance à s&#8217;orienter de plus en plus vers l&#8217;utilisation de services REST. Ces services REST doivent, en outre, être de plus en plus véloces afin de pouvoir répondre à une charge de plus en plus forte (que ce soit d&#8217;un point de vue temps de réponse mais également d&#8217;un point de vue charge suportée). C&#8217;est dans ce contexte que des solutions comme <a href="http://restlet.org/">Restlet</a> ou <a href="http://restx.io/">RestX</a> (pour n&#8217;en citer que quelques-unes) ont vu le jour.</p>

<p>En effet, en plus d&#8217;offrir la possibilité de servir des services REST, elles s&#8217;appuient sur des framework dont la particularité est d&#8217;offrir des traitements non bloquant sur les entrées/sorties (NIO).</p>

<p>C&#8217;est dans ce contexte que cet article parlera principalement de Resteasy-Netty 3 (la version 3 a été utilisé en raison de contraintes techniques (connexion à <a href="http://cassandra.apache.org/">Apache Cassandra</a> dont le <a href="https://github.com/datastax/java-driver">driver</a> utilise Netty 3)).</p>

<p>Cependant, ce ne sera pas le seul protagoniste car, comme on verra par la suite, il est très simple à utiliser&hellip;</p>

<p>Le vrai sujet de cet article est, en fait, comment il a été possible d&#8217;ajouter d&#8217;autres framework comme Swagger ou Jolokia à Resteasy-Netty 3.</p>

<p>Cet article sera découpé en deux parties :</p>

<ul>
<li>Besoin et conception</li>
<li>Mise en oeuvre</li>
</ul>


<p>Le code se trouve sur Github <a href="https://github.com/jetoile/resteasy-netty-sample">ici</a>.</p>

<!-- more -->


<h1>Besoin et conception</h1>

<p>Le besoin était d&#8217;offrir un ensemble de services REST qui devait être suffisamment véloce pour répondre au besoin de performance en terme de charge mais également en terme de temps de réponse.</p>

<p>Venant du monde Java et plus précisément de Java EE, il aurait été pertinent de partir sur une solution classique à base de <a href="https://jcp.org/en/jsr/detail?id=311">JAX-RS</a> (<a href="https://jersey.java.net/">Jersey</a> ou <a href="http://www.jboss.org/resteasy">RestEasy</a>) hébergée par un <a href="http://tomcat.apache.org/">Tomcat</a> ou un <a href="http://www.eclipse.org/jetty/">Jetty</a>.</p>

<p>Cependant, une crainte était que le mode de fonctionnement des Servlets soit limitant concernant les entrées/sorties. Bien sûr, il était possible d&#8217;utiliser le connecteur NIO de Tomcat mais ce n&#8217;est pas cette solution qui a été retenue&hellip; ;&ndash;)</p>

<p>Suite à la lecture de l&#8217;excellent <a href="http://blog.xebia.fr/2011/11/09/java-nio-et-framework-web-haute-performance/">article</a> sur le retour d&#8217;expérience de <a href="https://twitter.com/slemesle">Séven</a> et de <a href="https://twitter.com/julienBuret">Julien</a> lors du challenge USI 2011, le choix a été fait de partir sur une solution basée sur <a href="http://netty.io/">Netty</a>.</p>

<p>Par contre, développer des services directement sur Netty était embêtant et risquait surtout de rebuter l&#8217;équipe de développement. De la même manière, introduire un nouveau framework disposant de ses propres API n&#8217;était pas préconisé (NDLR : les standards c&#8217;est bien ! ;&ndash;) ).</p>

<p>C&#8217;est pour cette raison qu&#8217;il était préférable de trouver une solution alliant à la fois les avantages de NIO (et si possible s&#8217;appuyant sur Netty) et de JAX-RS.</p>

<p>Ainsi, il a été décidé de partir sur Resteasy-Netty 3 qui semblait offrir le meilleur des deux mondes (je dis &ldquo;semblais&rdquo; car aucun comparatif en charge des différents protagonistes n&#8217;a été réalisé et les résultats obtenus ont été suffisamment satisfaisant pour n&#8217;avoir pas à pousser plus loin l&#8217;expérimentation).</p>

<p>L&#8217;un des autres avantages de n&#8217;avoir pas utiliser un conteneur de Servlet classique était qu&#8217;il permettait de rendre le livrable auto-porteur et légé (il aurait bien sûr été possible d&#8217;embarquer un Tomcat ou Jetty embedded ou de &ldquo;s&#8217;embeddé&rdquo; dans un Tomcat via le goal exec-war de Tomcat7-maven-plugin).</p>

<p>Bien sûr, l&#8217;application devait être administrable et supervisable.</p>

<p>Enfin, cerise sur le gateau, intégrer une solution comme <a href="https://helloreverb.com/developers/swagger">Swagger</a> pour documenter les API REST était un <em>&ldquo;nice to have&rdquo;</em>.</p>

<p>Pour notre cas d&#8217;exemple, le seul service exposé sera le classique service qui répète ce qu&#8217;on lui demande&hellip;</p>

<p>Il répondra donc à une requête de type GET du type :
<code>http://localhost:8081/sample/say/&lt;message&gt;</code></p>

<p>Du coté de la réponse, elle aura la forme suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">message</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;time&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-03-05T10:55:39.835+01:00&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La date de la réponse sera ajoutée juste pour le &ldquo;fun&rdquo; ;&ndash;)</p>

<h1>Mise en oeuvre</h1>

<p>A titre informatif, les versions des différentes librairies qui sont utilisés dans les exemples de code ci-dessous sont les suivantes (au format gradle pour gagner de la place) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;jaxrs-api&#39;, version:&#39;3.0.4.Final&#39;
</span><span class='line'>compile group: &#39;org.jolokia&#39;, name: &#39;jolokia-jvm&#39;, version:&#39;1.1.2&#39;
</span><span class='line'>compile group: &#39;com.wordnik&#39;, name: &#39;swagger-jaxrs_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>compile group: &#39;com.wordnik&#39;, name: &#39;swagger-annotations_2.10&#39;, version:&#39;1.3.0&#39;
</span><span class='line'>compile group: &#39;javax.servlet&#39;, name: &#39;servlet-api&#39;, version:&#39;2.5&#39;
</span><span class='line'>compile group: &#39;com.codahale.metrics&#39;, name: &#39;metrics-core&#39;, version:&#39;3.0.1&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-netty&#39;, version:&#39;3.0.6.Final&#39;
</span><span class='line'>compile group: &#39;org.jboss.resteasy&#39;, name: &#39;resteasy-jackson-provider&#39;, version:&#39;3.0.6.Final&#39;
</span><span class='line'>compile group: &#39;org.codehaus.jackson&#39;, name: &#39;jackson-core-asl&#39;, version:&#39;1.9.13&#39;
</span><span class='line'>compile group: &#39;org.codehaus.jackson&#39;, name: &#39;jackson-mapper-asl&#39;, version:&#39;1.9.13&#39;
</span><span class='line'>compile group: &#39;commons-configuration&#39;, name: &#39;commons-configuration&#39;, version:&#39;1.9&#39;
</span><span class='line'>compile group: &#39;commons-collections&#39;, name: &#39;commons-collections&#39;, version:&#39;3.2.1&#39;
</span><span class='line'>compile group: &#39;commons-io&#39;, name: &#39;commons-io&#39;, version:&#39;2.4&#39;
</span><span class='line'>compile group: &#39;joda-time&#39;, name: &#39;joda-time&#39;, version:&#39;2.3&#39;
</span><span class='line'>compile(group: &#39;com.google.guava&#39;, name: &#39;guava&#39;, version:&#39;15.0&#39;) { exclude(module: &#39;jsr305&#39;) }
</span></code></pre></td></tr></table></div></figure>


<h2>Implémentation du service REST</h2>

<p>Le mise en place du service REST basé sur JAX-RS est on ne peut plus trivial&hellip; et la classe ci-dessous fait humblement l&#8217;affaire :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/sample&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span>
</span><span class='line'>    <span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/say/{msg}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Produces</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">getPortDataSet</span><span class="o">(</span><span class="nd">@PathParam</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DtoResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DtoResponse</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;internal error: {}&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Du coté de l&#8217;objet retourné par la réponse au format JSON, Jackson intégré à Resteasy a été utilisé pour la partie marshalling/unmarshalling.</p>

<p>Coté gestion des dates, ce sera JodaTime (l&#8217;application tourne avec Java 7).</p>

<p>Du coup, un objet DTO a été écrit et annoté à l&#8217;aide d&#8217;annotations JAXB :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DtoResponse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DateTime</span> <span class="n">time</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DtoResponse</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMessage</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">message</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DateTime</span> <span class="nf">getTime</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">time</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTime</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">time</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mise en oeuvre de Resteasy-Netty 3</h2>

<p>Mettre en place Resteasy-Netty 3 est très simple, d&#8217;après la <a href="https://docs.jboss.org/resteasy/docs/3.0.6.Final/userguide/pdf/resteasy-reference-guide-en-US.pdf">documnentation</a>, il suffit de faire :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">ResteasyDeployment</span> <span class="n">deployment</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">netty</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NettyJaxrsServer</span><span class="o">();</span>
</span><span class='line'>  <span class="n">netty</span><span class="o">.</span><span class="na">setDeployment</span><span class="o">(</span><span class="n">deployment</span><span class="o">);</span>
</span><span class='line'>  <span class="n">netty</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
</span><span class='line'>  <span class="n">netty</span><span class="o">.</span><span class="na">setRootResourcePath</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">netty</span><span class="o">.</span><span class="na">setSecurityDomain</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="n">netty</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>et c&#8217;est donc ce que l&#8217;on va faire&hellip; ;&ndash;)</p>

<p><a href="http://commons.apache.org/proper/commons-configuration/">Apache commons-configuration</a> a été utilisé afin de déporter la configuration dans un fichier <em>properties</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Client</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CONF_PROPERTIES</span> <span class="o">=</span> <span class="s">&quot;conf.properties&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Configuration</span> <span class="n">config</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ConfigurationException</span><span class="o">,</span> <span class="n">BootstrapException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PropertiesConfiguration</span><span class="o">(</span><span class="n">CONF_PROPERTIES</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ConfigurationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">BootstrapException</span><span class="o">(</span><span class="s">&quot;bad config&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">initServer</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">initServer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SimpleService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleService</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ResteasyDeployment</span> <span class="n">deployment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResteasyDeployment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nettyPort</span> <span class="o">=</span> <span class="mi">8081</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">config</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceEnabled</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceEnabled&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">));</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceMaxJobResults</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceMaxJobResults&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceMaxWait</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceMaxWait&quot;</span><span class="o">,</span> <span class="mi">300000</span><span class="o">));</span>
</span><span class='line'>            <span class="n">deployment</span><span class="o">.</span><span class="na">setAsyncJobServiceThreadPoolSize</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;netty.asyncJobServiceThreadPoolSize&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">nettyPort</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;netty.port&quot;</span><span class="o">,</span> <span class="n">TestPortProvider</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LOGGER</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;is going to use default netty config&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">deployment</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="n">asList</span><span class="o">(</span><span class="n">service</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NettyJaxrsServer</span> <span class="n">netty</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NettyJaxrsServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setDeployment</span><span class="o">(</span><span class="n">deployment</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">nettyPort</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setRootResourcePath</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">setSecurityDomain</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">netty</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On y constate que pour ajouter un service, il suffit juste de déclarer la classe implémentant JAX-RS via la méthode <code>setResources()</code> sur l&#8217;instance de <code>ResteasyDeployment</code> fournit au serveur <strong>NettyJaxrs</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SimpleService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleService</span><span class="o">();</span>
</span><span class='line'><span class="n">ResteasyDeployment</span> <span class="n">deployment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResteasyDeployment</span><span class="o">();</span>
</span><span class='line'><span class="n">deployment</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="n">asList</span><span class="o">(</span><span class="n">service</span><span class="o">));</span>
</span><span class='line'><span class="n">NettyJaxrsServer</span> <span class="n">netty</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NettyJaxrsServer</span><span class="o">();</span>
</span><span class='line'><span class="n">netty</span><span class="o">.</span><span class="na">setDeployment</span><span class="o">(</span><span class="n">deployment</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">netty</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà! On dispose désormais d&#8217;un programme exécutable qui démarre un serveur REST basé sur Netty.</p>

<p>Plutôt simple non? ;&ndash;)</p>

<h2>Configuration de Jackson</h2>

<p>Avec le code précédent, si la commande suivante est exécutée :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> curl -XGET  http://localhost:8081/sample/say/hello
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Le résultat suivant est obtenu :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;time&quot;</span><span class="o">:</span> <span class="mi">1402560438128</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hum&hellip; la date n&#8217;est pas formatté comme il faut&hellip; pas glop&hellip; :&lsquo;(</p>

<p>En fait, il est possible de modifier la configuration de <a href="http://jackson.codehaus.org/">Jackson</a> et on trouve, dans la littérature, un moyen très simple de le faire en configurant l&#8217;<em>ObjectMapper</em> comme suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">SerializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bien sûr, le but n&#8217;étant pas de faire cette transformation manuellement à chaque fois, on préfère laisser Resteasy le gérer lui-même.</p>

<p>Ainsi, il existe <a href="http://stackoverflow.com/questions/19229341/changing-default-json-time-format-with-resteasy-3-x">deux autres</a> manières de faire :</p>

<ul>
<li>Le faire par annotation</li>
<li>Le faire par configuration dans le <code>web.xml</code></li>
</ul>


<p>Cependant, dans notre cas, nous ne disposons pas d&#8217;un conteneur de Servlet classique et il n&#8217;est donc pas possible de s&#8217;appuyer sur une configuration par web.xml. Pour le faire par annotation, j&#8217;avoue ne pas avoir testé mais je suis sceptique&hellip;</p>

<p>Du coup, il reste une possibilité qui est de déclarer un <code>JacksonConfig</code> et de demander à Resteasy-Netty de nous l&#8217;enregistrer en tant que <em>provider</em> (en gros de demander à Resteasy-Netty de faire manuellement ce qui est fait via le <code>web.xml</code>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JacksonConfig</span> <span class="kd">implements</span> <span class="n">ContextResolver</span><span class="o">&lt;</span><span class="n">ObjectMapper</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">JacksonConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">SerializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">objectMapper</span><span class="o">.</span><span class="na">setSerializationInclusion</span><span class="o">(</span><span class="n">JsonSerialize</span><span class="o">.</span><span class="na">Inclusion</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ObjectMapper</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">objectType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">objectMapper</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour l&#8217;enregistrement, c&#8217;est très simple puisqu&#8217;il suffit d&#8217;ajouter la ligne suivante :
<code>deployment.setProviderClasses(Lists.newArrayList("fr.jetoile.sample.JacksonConfig"));</code></p>

<p>Et voilà! C&#8217;est tout!</p>

<p>Encore une fois, simple et efficace et le résultat obtenu est bien celui escompté :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;time&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-06-12T10:06:54.553+02:00&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A noter que l&#8217;<em>ancienne</em> version de Jackson est utilisée ici car c&#8217;est celle qui est utilisé par défaut par Resteasy. Il aurait été possible de l&#8217;utiliser dans sa version plus récente mais j&#8217;avoue ne pas avoir fait l&#8217;exercice&hellip; (cf. <a href="https://docs.jboss.org/resteasy/docs/3.0.6.Final/userguide/html/json.html#d4e1046">ici</a>)</p>

<h2>Intégration de Metrics</h2>

<p>Afin de permettre une mesure des temps d&#8217;invocation de différentes opérations, la librairie <a href="http://metrics.codahale.com/">Metrics</a> a été utilisée.</p>

<p>Pour plus d&#8217;information dessus, le sujet est très bien traité sur le blog de <a href="https://twitter.com/clescot">Charles</a> :</p>

<ul>
<li><a href="http://clescot.com/blog/2013/10/11/metrics-pour-mesurer-efficacement-les-performances-les-bases/">Metrics : Les Bases</a></li>
<li><a href="http://clescot.com/blog/2013/10/11/metrics-pour-mesurer-efficacement-les-performances-integration-avec-jee/">Metrics : Intégration Avec JEE</a></li>
<li><a href="http://clescot.com/blog/2013/10/11/metrics-pour-mesurer-efficacement-les-performances-integration-avec-spring-et-guice/">Metrics : Intégration Avec Spring Et Guice</a></li>
<li><a href="http://clescot.com/blog/2013/10/11/metrics-pour-mesurer-efficacement-les-performances-integration-avec-JDBC-logback-et-jersey/">Metrics : Intégration Avec JDBC, Logback Et Jersey</a></li>
</ul>


<p>Dans notre cas, bien sûr, pas de <em>Spring</em>, de <em>Guice</em> ou de <em>Servlet Listener</em>. Une simple variable de classe dans la classe portant la méthode <code>main()</code> suffit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MetricRegistry</span> <span class="n">metricRegistry</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ConfigurationException</span><span class="o">,</span> <span class="n">BootstrapException</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">metricRegistry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MetricRegistry</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">JmxReporter</span> <span class="n">reporter</span> <span class="o">=</span> <span class="n">JmxReporter</span><span class="o">.</span><span class="na">forRegistry</span><span class="o">(</span><span class="n">metricRegistry</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="n">reporter</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concernant l&#8217;utilisation à proprement parler, cela se fait de cette manière (dans notre cas, utilisation du <strong>Timer</strong> qui représente un histogramme des durées et une mesure de la fréquence d’apparition) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GET</span>
</span><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/say/{msg}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Produces</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Response</span> <span class="nf">getPortDataSet</span><span class="o">(</span><span class="nd">@PathParam</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="n">Client</span><span class="o">.</span><span class="na">metricRegistry</span><span class="o">.</span><span class="na">timer</span><span class="o">(</span><span class="n">name</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;say-service&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Timer</span><span class="o">.</span><span class="na">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">timer</span><span class="o">.</span><span class="na">time</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une fois l&#8217;application démarrée et après 1 ou 2 appels, l&#8217;ObjectName apparait dans la console JMX et il est alors possible de voir les différents résultats.</p>

<p><img src="http://1.bp.blogspot.com/-RMh6acQ8Qkc/UxdsRqymVkI/AAAAAAAABPk/r3rvWdgPNtg/s1600/metrics-hawtio.png" alt="medium" /></p>

<p>On constate encore une fois que la mise en place de Metrics n&#8217;a demandé aucun effort particulier.</p>

<h2>Intégration de Jolokia</h2>

<p>Une autre étape de notre périple consiste à activer Jolokia que j&#8217;ai déjà présenté dans un <a href="http://blog.jetoile.fr/2014/03/jolokia-le-piment-qui-vous-veut-du-bien.html">article précédent</a>.</p>

<p>Dans notre cas d&#8217;usage, cela sera fait de manière programmatique.</p>

<p>Pour ce faire, c&#8217;est encore une fois très simple et il suffit d&#8217;ajouter le code suivant dans notre classe principale :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">initJolokiaServer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JolokiaServerConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JolokiaServerConfig</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JolokiaServer</span> <span class="n">jolokiaServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JolokiaServer</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">jolokiaServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;unable to start jolokia server&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concernant sa configuration, pour éviter d&#8217;avoir à aller chercher des properties et à repeupler une Map, le fichier par défaut (<code>default-jolokia-agent.properties</code>) a été copié (en renseignant certaines informations comme le user/password) dans le répertoire <code>src/main/resources</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># Configuration properties for the JVM jolokia-agent
</span><span class='line'>
</span><span class='line'># Host address to bind to.
</span><span class='line'># Default: localhost, determinated dynamically via InetAddress.getLocalHost()
</span><span class='line'>host=0.0.0.0
</span><span class='line'>
</span><span class='line'># Port to listen to
</span><span class='line'>port=7778
</span><span class='line'>
</span><span class='line'># Context path
</span><span class='line'>agentContext=/jolokia
</span><span class='line'>
</span><span class='line'># Backlog of request to keep when queue
</span><span class='line'>backlog=10
</span><span class='line'>
</span><span class='line'># Possible values:
</span><span class='line'>#  * &quot;fixed&quot;  : Thread pool with at max nrThreads
</span><span class='line'>#  * &quot;single&quot; : A single thread serves all requests (default)
</span><span class='line'>#  * &quot;cached&quot; : A thread pool which reuses threads and creates threads on demand (unbounded)
</span><span class='line'># executor=fixed
</span><span class='line'># nrThreads=5
</span><span class='line'>
</span><span class='line'># User and password for basic authentication
</span><span class='line'>user=jolokia
</span><span class='line'>password=jolokia
</span><span class='line'>
</span><span class='line'># How many entroes to keep in the history
</span><span class='line'>historyMaxEntries=10
</span><span class='line'>
</span><span class='line'># Switch on debugging
</span><span class='line'>debug=false
</span><span class='line'>
</span><span class='line'># How many debug entries to keep on the server side which can be queried by JMX
</span><span class='line'>debugMaxEntries=100
</span><span class='line'>
</span><span class='line'># Maximum traversal depth for serialization of complex objects.
</span><span class='line'>maxDepth=15
</span><span class='line'>
</span><span class='line'># Maximum size of collections returned during serialization.
</span><span class='line'>maxCollectionSize=1000
</span><span class='line'>
</span><span class='line'># Maximum number of objects returned by serialization
</span><span class='line'>maxObjects=0
</span></code></pre></td></tr></table></div></figure>


<p>Un petit coup de (le user jolokia et le mot de passe jolokia ont été positionné dans le fichier <em>properties</em>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET -u jolokia:jolokia http://localhost:7778/jolokia/version
</span></code></pre></td></tr></table></div></figure>


<p>nous permet bien d&#8217;obtenir la réponse attendue :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="o">:</span> <span class="mi">1394036344</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;request&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;version&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;protocol&quot;</span><span class="o">:</span> <span class="s2">&quot;7.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;agent&quot;</span><span class="o">:</span> <span class="s2">&quot;1.1.2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;info&quot;</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A noter que les user/password ont été positionné car cela permet une connexion via <a href="http://hawt.io/">Hawt.io</a>.</p>

<h2>Intégration de Swagger</h2>

<p><a href="https://helloreverb.com/developers/swagger">Swagger</a> offre une manière très simple de documenter une API REST. En effet, en s&#8217;appuyant sur des annotations à mettre dans la classe de service, elle permet d&#8217;offrir une interface d&#8217;écrivant les API.</p>

<p><img src="http://4.bp.blogspot.com/-92lPQm1F_DM/UxdsgUK3bDI/AAAAAAAABPs/yWh6QRHKkFc/s1600/swagger.png" alt="medium" /></p>

<p>Pour le mettre en place, il suffit donc de rajouter les annotations adéquates à notre classe <code>SimpleService</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Api</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/sample&quot;</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;the sample api&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/sample&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span>
</span><span class='line'>    <span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/say/{msg}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Produces</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;repeat the word&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">notes</span> <span class="o">=</span> <span class="s">&quot;response the word&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">DtoResponse</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ApiResponses</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">code</span> <span class="o">=</span> <span class="mi">500</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Internal server error&quot;</span><span class="o">)})</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">getPortDataSet</span><span class="o">(</span><span class="nd">@PathParam</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="n">Client</span><span class="o">.</span><span class="na">metricRegistry</span><span class="o">.</span><span class="na">timer</span><span class="o">(</span><span class="n">name</span><span class="o">(</span><span class="n">SimpleService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;say-service&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Timer</span><span class="o">.</span><span class="na">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">timer</span><span class="o">.</span><span class="na">time</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">DtoResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DtoResponse</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;internal error: {}&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reste maintenant à ajouter Swagger à notre <code>main()</code> que l&#8217;on doit faire programmatiquement faute d&#8217;être dans un conteneur de Servlet standard&hellip;</p>

<p>Pour ce faire, il est nécessaire d&#8217;instancier un objet <code>BeanConfig</code> qui contient la configuration de Swagger mais surtout l&#8217;adresse et le port du serveur sur lequel tourne le service ainsi que le package où se trouve ce dernier. Ces informations sont renseignées, dans notre cas, dans notre fichier de configuration et positionnées programmatiquement dans notre <code>BeanConfig</code>.</p>

<p>Enfin, il faut trouver le moyen de faire le pendant de ce qui est déclaré sur <a href="https://github.com/wordnik/swagger-core/wiki/Servlet-Quickstart">cette page</a>&hellip; bien sûr, le tout sans Servlet&hellip; ouch&hellip; :&lsquo;( En fouillant un peu, on tombe rapidement sur le <a href="https://github.com/wordnik/swagger-core/wiki/Java-CXF-Quickstart">quickstart swagger/cxf</a> où les <em>providers</em> sont positionnés : il suffit de faire pareil avec Resteasy-Netty ;&ndash;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">initSwagger</span><span class="o">(</span><span class="n">ResteasyDeployment</span> <span class="n">deployment</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BeanConfig</span> <span class="n">swaggerConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanConfig</span><span class="o">();</span>
</span><span class='line'>    <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setVersion</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.version&quot;</span><span class="o">,</span> <span class="s">&quot;1.0.0&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setBasePath</span><span class="o">(</span><span class="s">&quot;http://&quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.host&quot;</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.port&quot;</span><span class="o">,</span> <span class="s">&quot;8081&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;swagger.title&quot;</span><span class="o">,</span> <span class="s">&quot;jetoile sample app&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setScan</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">swaggerConfig</span><span class="o">.</span><span class="na">setResourcePackage</span><span class="o">(</span><span class="s">&quot;fr.jetoile.sample.service&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deployment</span><span class="o">.</span><span class="na">setProviderClasses</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;fr.jetoile.sample.JacksonConfig&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;com.wordnik.swagger.jaxrs.listing.ResourceListingProvider&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;com.wordnik.swagger.jaxrs.listing.ApiDeclarationProvider&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">deployment</span><span class="o">.</span><span class="na">setResourceClasses</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">deployment</span><span class="o">.</span><span class="na">setSecurityEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, ça fonctionne!</p>

<p>En exécutant la commande :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET http://localhost:8081/api-docs/sample
</span></code></pre></td></tr></table></div></figure>


<p>On obtient bien le JSON escompté :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;apiVersion&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;swaggerVersion&quot;</span><span class="o">:</span> <span class="s2">&quot;1.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;basePath&quot;</span><span class="o">:</span> <span class="s2">&quot;http://localhost:8081&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;resourcePath&quot;</span><span class="o">:</span> <span class="s2">&quot;/sample&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;apis&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;path&quot;</span><span class="o">:</span> <span class="s2">&quot;/sample/say/{msg}&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;operations&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;method&quot;</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;summary&quot;</span><span class="o">:</span> <span class="s2">&quot;repeat the word&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;notes&quot;</span><span class="o">:</span> <span class="s2">&quot;response the word&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;DtoResponse&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;nickname&quot;</span><span class="o">:</span> <span class="s2">&quot;getPortDataSet&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;produces&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>                    <span class="p">],</span>
</span><span class='line'>                    <span class="s2">&quot;parameters&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;msg&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                            <span class="s2">&quot;allowMultiple&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s2">&quot;paramType&quot;</span><span class="o">:</span> <span class="s2">&quot;path&quot;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">],</span>
</span><span class='line'>                    <span class="s2">&quot;responseMessages&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="s2">&quot;code&quot;</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>                            <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="s2">&quot;Internal server error&quot;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;models&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;DtoResponse&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;DtoResponse&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;time&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;$ref&quot;</span><span class="o">:</span> <span class="s2">&quot;DateTime&quot;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais (car il y a un mais&hellip;) en utilisant <a href="https://github.com/wordnik/swagger-ui">Swagger-UI</a> (qu&#8217;il faut déployer sur un apache/nginx/tomcat ou autre), il peut arriver que cela ne fonctionne pas&hellip; )(ie. que Swagger-IU n&#8217;arrive pas à fetcher les ressources de notre service REST). Cela arrivera d&#8217;ailleurs sûrement si notre application est déployée sur une machine différente de celle où est déployée Swagger-UI (pour rappel, on ne dispose pas, ici, d&#8217;un conteneur de Servlet et exposer des pages statiques n&#8217;est pas l&#8217;objectif de notre petite application). Le problème vient de notre cher ami, le <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>&hellip; Du coup, il devient nécessaire d&#8217;ajouter des <em>headers</em> dans le requête de réponse.</p>

<p>Et c&#8217;est là que la tâche se gâte&hellip; En effet, pas de possibilité de positionner un filtre comme avec les Servlets. Pas non plus de possibilité de modifier la configuration de Resteasy-Netty 3 pour lui demander d&#8217;ajouter des headers (si cela existe, je n&#8217;ai pas trouvé)&hellip;</p>

<p>Du coup, la seule solution a été de patcher sauvagement notre ami Resteasy-Netty 3 en surchargeant une de ses classes pour y ajouter les bons headers&hellip; Pas très classe mais bon&hellip;</p>

<p>Pour ce faire, il suffit de créer dans notre application le package <code>org.jboss.resteasy.plugins.server.netty</code> et d&#8217;y copier la classe <code>RequestHandler</code> en y ajoutant les headers utiles :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">jboss</span><span class="o">.</span><span class="na">resteasy</span><span class="o">.</span><span class="na">plugins</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">netty</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.netty.channel.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.netty.channel.ChannelHandler.Sharable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.netty.handler.codec.frame.TooLongFrameException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.netty.handler.codec.http.DefaultHttpResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.netty.handler.codec.http.HttpResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.netty.handler.codec.http.HttpResponseStatus</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.resteasy.logging.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.resteasy.spi.Failure</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">jboss</span><span class="o">.</span><span class="na">netty</span><span class="o">.</span><span class="na">handler</span><span class="o">.</span><span class="na">codec</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpResponseStatus</span><span class="o">.</span><span class="na">CONTINUE</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">jboss</span><span class="o">.</span><span class="na">netty</span><span class="o">.</span><span class="na">handler</span><span class="o">.</span><span class="na">codec</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpVersion</span><span class="o">.</span><span class="na">HTTP_1_1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * TODO : hack to add CORS into header</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * {@link org.jboss.netty.channel.SimpleChannelUpstreamHandler} which handles the requests and dispatch them.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This class is {@link org.jboss.netty.channel.ChannelHandler.Sharable}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author The Netty Project</span>
</span><span class='line'><span class="cm"> * @author Andy Taylor (andy.taylor@jboss.org)</span>
</span><span class='line'><span class="cm"> * @author Trustin Lee</span>
</span><span class='line'><span class="cm"> * @author Norman Maurer</span>
</span><span class='line'><span class="cm"> * @version $Rev: 2368 $, $Date: 2010-10-18 17:19:03 +0900 (Mon, 18 Oct 2010) $</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Sharable</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestHandler</span> <span class="kd">extends</span> <span class="n">SimpleChannelUpstreamHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">jboss</span><span class="o">.</span><span class="na">resteasy</span><span class="o">.</span><span class="na">plugins</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">netty</span><span class="o">.</span><span class="na">RequestHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RequestHandler</span><span class="o">(</span><span class="n">RequestDispatcher</span> <span class="n">dispatcher</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">dispatcher</span> <span class="o">=</span> <span class="n">dispatcher</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">messageReceived</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">MessageEvent</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">NettyHttpRequest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">NettyHttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">NettyHttpRequest</span><span class="o">)</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//HACK ICI!!!</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getOutputHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Access-Control-Allow-Origin&quot;</span><span class="o">,</span> <span class="s">&quot;*&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getOutputHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Access-Control-Allow-Methods&quot;</span><span class="o">,</span> <span class="s">&quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getOutputHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Access-Control-Allow-Headers&quot;</span><span class="o">,</span> <span class="s">&quot;X-Requested-With, Content-Type, Content-Length&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//FIN DU HACK</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">is100ContinueExpected</span><span class="o">())</span> <span class="o">{</span> <span class="n">send100Continue</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NettyHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">dispatcher</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Failure</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">e1</span><span class="o">.</span><span class="na">getErrorCode</span><span class="o">());</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unexpected&quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Write the response.</span>
</span><span class='line'>            <span class="n">ChannelFuture</span> <span class="n">future</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getChannel</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Close the non-keep-alive connection after the write operation is done.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">request</span><span class="o">.</span><span class="na">isKeepAlive</span><span class="o">())</span> <span class="o">{</span> <span class="n">future</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">ChannelFutureListener</span><span class="o">.</span><span class="na">CLOSE</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">send100Continue</span><span class="o">(</span><span class="n">MessageEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultHttpResponse</span><span class="o">(</span><span class="n">HTTP_1_1</span><span class="o">,</span> <span class="n">CONTINUE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">getChannel</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exceptionCaught</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">ExceptionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// handle the case of to big requests.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getCause</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">TooLongFrameException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">DefaultHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultHttpResponse</span><span class="o">(</span><span class="n">HTTP_1_1</span><span class="o">,</span> <span class="n">HttpResponseStatus</span><span class="o">.</span><span class="na">REQUEST_ENTITY_TOO_LARGE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">getChannel</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">addListener</span><span class="o">(</span><span class="n">ChannelFutureListener</span><span class="o">.</span><span class="na">CLOSE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">getCause</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">getChannel</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, après ce petit tour de passe passe, notre swagger-UI fonctionne comme un charme ;&ndash;)</p>

<p>Au final, (presque?) simple non? ;&ndash;)</p>

<h2>Branchement des plugins Maven Appassembler et Assembly</h2>

<p>Afin de générer une application utilisable <em>out of the box</em>, le plugin maven <a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/">appassembler</a> a été utilisé. Pour ceux qui ne saurait pas ce que c&#8217;est, je les invite à regarder soit la documentation officielle soit un article que j&#8217;avais fait <a href="http://blog.jetoile.fr/2012/02/petit-focus-sur-2-plugins-maven.html">précédemment</a> (#autopromo ;&ndash;) ).</p>

<p>Ainsi, ici, le goal <code>generate-daemons</code> du plugin a été utilisé :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>appassembler-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>spring-integ-reader<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>generate-daemons<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;target&gt;</span>${project.build.directory}/appassembler-jsw<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;repositoryLayout&gt;</span>flat<span class="nt">&lt;/repositoryLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;daemons&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;daemon&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>${project.name}<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;mainClass&gt;</span>fr.jetoile.sample.Client<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;commandLineArguments&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/commandLineArguments&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;platforms&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;platform&gt;</span>jsw<span class="nt">&lt;/platform&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/platforms&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;generatorConfigurations&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;generatorConfiguration&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;generator&gt;</span>jsw<span class="nt">&lt;/generator&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;includes&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;include&gt;</span>linux-x86-64<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;include&gt;</span>linux-x86-32<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;/includes&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;name&gt;</span>configuration.directory.in.classpath.first<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;value&gt;</span>conf<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'>                                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/generatorConfiguration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/generatorConfigurations&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;jvmSettings&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;initialMemorySize&gt;</span>256M<span class="nt">&lt;/initialMemorySize&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;maxMemorySize&gt;</span>2048M<span class="nt">&lt;/maxMemorySize&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;systemProperties&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;systemProperty&gt;</span>com.sun.management.jmxremote<span class="nt">&lt;/systemProperty&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;systemProperty&gt;</span>com.sun.management.jmxremote.port=8199<span class="nt">&lt;/systemProperty&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;systemProperty&gt;</span>com.sun.management.jmxremote.authenticate=false
</span><span class='line'>                                <span class="nt">&lt;/systemProperty&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;systemProperty&gt;</span>com.sun.management.jmxremote.ssl=false<span class="nt">&lt;/systemProperty&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;systemProperty&gt;</span>com.sun.management.jmxremote.local.only=false
</span><span class='line'>                                <span class="nt">&lt;/systemProperty&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/systemProperties&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;extraArguments&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;extraArgument&gt;</span>-Xdebug<span class="nt">&lt;/extraArgument&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;extraArgument&gt;</span>
</span><span class='line'>                                    -Xrunjdwp:transport=dt_socket,address=9999,server=y,suspend=n
</span><span class='line'>                                <span class="nt">&lt;/extraArgument&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;extraArgument&gt;</span>-server<span class="nt">&lt;/extraArgument&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;extraArgument&gt;</span>-XX:+UnlockCommercialFeatures<span class="nt">&lt;/extraArgument&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;extraArgument&gt;</span>-XX:+FlightRecorder<span class="nt">&lt;/extraArgument&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;extraArgument&gt;</span>-XX:+HeapDumpOnOutOfMemoryError<span class="nt">&lt;/extraArgument&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/extraArguments&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/jvmSettings&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/daemon&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/daemons&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En outre, ce plugin ne créant pas le répertoire <code>logs</code> et ne positionnant pas les droits d&#8217;exécution sur les fichiers du répertoire bin, le plugin Maven <a href="https://maven.apache.org/plugins/maven-assembly-plugin/">assembly</a> a été utilisé conjointement :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;descriptors&gt;</span>
</span><span class='line'>            <span class="nt">&lt;descriptor&gt;</span>src/main/assembly/descriptor.xml<span class="nt">&lt;/descriptor&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/descriptors&gt;</span>
</span><span class='line'>        <span class="nt">&lt;appendAssemblyId&gt;</span>false<span class="nt">&lt;/appendAssemblyId&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>single<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec le descripteur simple suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;assembly</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2&quot;</span>
</span><span class='line'>          <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>          <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>reader<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;includeBaseDirectory&gt;</span>false<span class="nt">&lt;/includeBaseDirectory&gt;</span>
</span><span class='line'>    <span class="nt">&lt;formats&gt;&lt;format&gt;</span>tar.gz<span class="nt">&lt;/format&gt;&lt;/formats&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;fileSets&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fileSet&gt;</span>
</span><span class='line'>            <span class="nt">&lt;directory&gt;</span>${project.build.directory}/appassembler-jsw/jsw/${project.name}<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;outputDirectory&gt;</span>/<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;excludes&gt;</span>
</span><span class='line'>                <span class="nt">&lt;exclude&gt;</span>bin/${project.name}<span class="nt">&lt;/exclude&gt;</span>
</span><span class='line'>                <span class="nt">&lt;exclude&gt;</span>bin/wrapper-linux-x86-32<span class="nt">&lt;/exclude&gt;</span>
</span><span class='line'>                <span class="nt">&lt;exclude&gt;</span>bin/wrapper-linux-x86-64<span class="nt">&lt;/exclude&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/excludes&gt;</span>
</span><span class='line'>            <span class="nt">&lt;fileMode&gt;</span>640<span class="nt">&lt;/fileMode&gt;</span>
</span><span class='line'>            <span class="nt">&lt;directoryMode&gt;</span>750<span class="nt">&lt;/directoryMode&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/fileSet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fileSet&gt;</span>
</span><span class='line'>            <span class="nt">&lt;directory&gt;</span>src/main/assembly<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;outputDirectory&gt;</span>/logs<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;excludes&gt;&lt;exclude&gt;</span>*<span class="nt">&lt;/exclude&gt;&lt;/excludes&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/fileSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fileSets&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;files&gt;</span>
</span><span class='line'>        <span class="nt">&lt;file&gt;</span>
</span><span class='line'>            <span class="nt">&lt;source&gt;</span>${project.build.directory}/appassembler-jsw/jsw/${project.name}/bin/${project.name}<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>            <span class="nt">&lt;outputDirectory&gt;</span>bin<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;fileMode&gt;</span>750<span class="nt">&lt;/fileMode&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/file&gt;</span>
</span><span class='line'>        <span class="nt">&lt;file&gt;</span>
</span><span class='line'>            <span class="nt">&lt;source&gt;</span>${project.build.directory}/appassembler-jsw/jsw/${project.name}/bin/wrapper-linux-x86-64<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>            <span class="nt">&lt;outputDirectory&gt;</span>bin<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;fileMode&gt;</span>750<span class="nt">&lt;/fileMode&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/file&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/files&gt;</span>
</span><span class='line'><span class="nt">&lt;/assembly&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi, l&#8217;exécution de la commande suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn package
</span></code></pre></td></tr></table></div></figure>


<p>génère un livrable exploitable directement après sa décompression.</p>

<p>Lors d&#8217;un <code>mvn release</code>, il sera également automatiquement uploadé sur le <em>Repository Manager</em>.</p>

<h1>Conclusion</h1>

<p>En conclusion, je n&#8217;ai pas grand chose à ajouter si ce n&#8217;est que j&#8217;ai trouvé Resteasy-Netty simple à utiliser et qu&#8217;il a été aisé d&#8217;y ajouter tout ce qui était nécessaire à notre besoin.</p>

<p>Et le tout de manière simple et efficace pour une solution véloce et légère!</p>

<p>Pour faire encore plus simple, <a href="http://projectlombok.org/">Lombok</a> aurait pu être utilisé mais, de mémoire, en test de Java 8, une incompatibilité est apparue&hellip; à creuser donc pour cette partie&hellip; ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jolokia : Le Piment Qui Vous Veut Du Bien]]></title>
    <link href="http://blog.jetoile.fr/2014/03/jolokia-le-piment-qui-vous-veut-du-bien.html"/>
    <updated>2014-03-04T00:30:40+01:00</updated>
    <id>http://blog.jetoile.fr/2014/03/jolokia-le-piment-qui-vous-veut-du-bien</id>
    <content type="html"><![CDATA[<p><img src="http://3.bp.blogspot.com/-6Xm2grUWMtI/UxTNAazymaI/AAAAAAAABPE/dXJ7fti_FLA/s1600/jolokia.png" alt="left-small" /></p>

<p> Dans des articles précédents, je m&#8217;étais déjà exprimé sur le fait que je trouvais qu&#8217;il était important de monitorer son application (qu&#8217;il s&#8217;agisse d&#8217;une application web, d&#8217;un batch ou d&#8217;une application standalone) (cf. <a href="http://blog.jetoile.fr/2010/05/jmx-ou-comment-administrer-et.html">ici</a>). J&#8217;avais même creusé un peu la spécification JMX (cf. <a href="http://blog.jetoile.fr/2010/10/jmx-pour-les-nuls-introduction.html">là</a>).</p>

<p>Pour faire suite à ce besoin, je vais, dans cet article, faire un focus sur un outils que j&#8217;ai découvert récemment (merci Romain ;&ndash;) ) mais qui existe depuis un moment (la version 1.0.0 est apparue en octobre 2011 sur le repo Maven central et le premier commit apparaissant sur Github date de Juillet 2010) : cet outils est <strong>Jolokia</strong>.</p>

<p>Comme à mon habitude, pour présenter cet outils, je m&#8217;appuierai sur la document officielle dans sa version courante, à savoir la 1.2.0.</p>

<p>Cependant, je ne ferai pas un plagiat exhaustif de la documentation qui est très complète (et surtout, je n&#8217;ai pas envie de me traduire les 92 pages de cette dernière&hellip; ;&ndash;) ) mais j&#8217;essaierai de faire un focus sur les points que je trouve les plus intéressants (à savoir les principes ainsi que le mode agent JVM (cf. plus tard) ).</p>

<!-- more -->


<h1>Principes et concepts</h1>

<h2>Jolokia&hellip; pour quoi faire?</h2>

<p>Dans le monde Java, il existe un standard pour faire de l&#8217;administration/supervision : il s&#8217;agit de JMX (Java Management eXtension). Il est inclus depuis le JDK 1.5.</p>

<p>Cependant, JMX est malheureusement un des parents pauvres de Java : souvent méconnu ou mal utilisé, il est aussi très orienté vers le monde Java (et cela, même s&#8217;il existe la <a href="https://jcp.org/en/jsr/detail?id=160">JSR 160 &ndash; Java Management eXtension Remote API</a>).</p>

<p>C&#8217;est la raison d&#8217;être de Jolokia qui offre une approche agent (qui cohabite avec la JSR 160) tout en offrant une interopérabilité via HTTP au moyen de JSON pour la partie <em>payload</em>. Cela lui permet d&#8217;exposer les couches d&#8217;administration/supervision JMX des applicatifs Java via une protocole interopérable de tous.</p>

<h2>Architecture</h2>

<p>L&#8217;architecture de Jolokia diffère de celle de la JSR 160. En effet, la JSR 160 permet à un client d&#8217;invoquer de manière transparente un MBean qu&#8217;il soit dans un <strong>MBeanServer</strong> local ou distant.</p>

<p>Cependant, même si cela est intéressant, c&#8217;est également une approche dangereuse puisque cela masque la partie transport qui peut entraîner un <em>overhead</em> mais cela expose aussi le modèle des objets qui transitent.</p>

<p>En effet, il existe une adhérence implicite au protocole RMI (qui est d&#8217;ailleurs le protocole par défaut des connecteurs JMX) pour la partie mécanisme de sérialisation des objets. C&#8217;est ce dernier point qui pose un problème d&#8217;interopérabilité avec tout programme extérieur à une JVM.</p>

<p>Ainsi, Jolokia, en offrant une approche différente via HTTP/JSon, permet de réconcilier ces différents mondes. Pour ce faire, il propose 2 modes :</p>

<ul>
<li>un mode agent,</li>
<li>un mode proxy.</li>
</ul>


<h3>Le mode agent</h3>

<p>Dans ce mode, Jolokia se présente comme un agent qui expose un protocole au format JSON via HTTP et qui permet de servir de bridge vers les MBeans JMX locaux. Cela se passe donc en dehors du scope de la JSR 160.</p>

<p>Ainsi, il est possible d&#8217;exporter ce protocole de différentes manières dont la plus courante est via un conteneur de Servlet (qu&#8217;il soit légé ou pas).</p>

<p>Cependant, il existe d&#8217;autres possibilités comme des agents spécialisés qui peuvent utiliser un service HTTP OSGI ou qui peuvent embarquer un serveur Jetty.</p>

<p>Il est à noter que l&#8217;agent utilise le serveur HTTP embarqué dans toutes les JVM 6 d&#8217;Oracle et qu&#8217;il peut donc s&#8217;attacher dynamiquement à toutes les processus Java.</p>

<p><img src="http://2.bp.blogspot.com/-TnigS1cXxaI/UxTNwI9jtzI/AAAAAAAABPM/q0rHjKSMmq4/s1600/jolokia-agent.png" alt="medium" /></p>

<h3>Le mode proxy</h3>

<p>Ce mode peut être utilisé lorsqu&#8217;il n&#8217;est pas possible de déployer un agent Jolokia sur la plateforme cible. Pour ce mode, le seul prérequis est l&#8217;accès au serveur cible via une connexion à travers de la JSR 160. Cela peut être le cas si l&#8217;application ne peut pas être modifiée ou si l&#8217;application expose déjà ses MBeans via la JSR 160.</p>

<p>Ce mode nécessite un conteneur de Servlet dans lequel sera déployée l&#8217;application web <code>jolokia.war</code> qui a, à sa charge, de &ldquo;<em>proxyfier</em>&rdquo; et qui, par défaut, supporte à la fois le mode agent et le mode proxy.</p>

<p>Ainsi, dans ce mode, un client enverra une requête Jolokia avec une section supplémentaire spécifiant la cible qui doit être atteinte. Toutes les information de routage est donc contenu dans la requête elle-même de manière à ce que le proxy puisse agir sans configuration spécifique.</p>

<p><img src="http://2.bp.blogspot.com/-wf_ReDc9AKk/UxTN2msI-BI/AAAAAAAABPU/neUmwiePEs0/s1600/jolokia-proxy.png" alt="medium" /></p>

<h2>Les agents</h2>

<p>Jolokia propose une approche orientée agent qui doit être, soit déployé sur la cible (<strong>mode agent</strong>), soit sur un serveur proxy (<strong>mode proxy</strong>).</p>

<p>Pour ces deux modes, il existe 4 types d&#8217;agent :</p>

<ul>
<li><strong>WAR agent</strong> : cet agent est packagé sous forme de WAR.</li>
<li><strong>OSGI agent</strong> : cet agent au format OSGI (bundle) vient sous 2 formes : un agent minimal qui dispose d&#8217;une dépendance sur un OSGI <em>HTTService</em> qui doit être démarré et un agent &ldquo;tout en un&rdquo; qui embarque une implémentation de <em>HTTPService</em>.</li>
<li><strong>Mule agent</strong> : cet agent s&#8217;intègre à Mule et fourni une API d&#8217;adminitration/supervision dans lequel un agent jolokia dédié est intégré. Il inclut un serveur Jetty embarqué.</li>
<li><strong>JVM agent</strong> : Depuis la version 1.6 du JDK d&#8217;Oracle, la JVM embarque un serveur HTTP légé. En utilisant ce dernier, Jolokia expose ses fonctionnalité. Cependant, cet agent peut être un peu lent en raison du fait que le serveur HTTP embarqué dans la JVM ne soit pas optimisé pour les performances.</li>
</ul>


<p>Les deux types d&#8217;agent qui seront un peu plus détaillés dans cet article sont les types WAR agent et JVM agent.</p>

<h2>WAR agent</h2>

<p>Le type WAR agent se présente comme une application web standard (au format WAR). La configuration se fait alors via l&#8217;élément <code>init-param</code> du web.xml.</p>

<p>Un autre moyen consiste à utiliser le context (dans le cas de Tomcat) qui permet de déporter la configuration en dehors du WAR. Ainsi, par exemple avec Tomcat, avec le context de l&#8217;application web se trouvant dans <code>$TOMCAT_HOME/conf/Catalina/localhost</code>, on peut avoir par exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Context&gt;</span>
</span><span class='line'><span class="nt">&lt;Parameter</span> <span class="na">name=</span><span class="s">&quot;maxDepth&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/Context&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au niveau paramétrage, je vous laisse aller voir la document officielle ;&ndash;).</p>

<p>Du point de vue sécurité, il est possible de bénéficier de la sécurité du conteneur de Servlet via le <code>web.xml</code>.</p>

<p>Une autre manière de faire consite à intégrer Jolokia comme Servlet dans son application web. Pour ce faire, il suffit de tirer la bonne dépendance et de préciser le Servlet de Jolokia de manière classique via les éléments <code>servlet</code> et <code>servlet-mapping</code> du <code>web.xml</code> de l&#8217;application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.jolokia<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jolokia-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>${jolokia.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme il est possible de déployer de multiples WAR agents Jolokia sur une même JVM, puisque des MBeans spécifiques Jolokia sont déployé dans le <strong>PlatformMBeansServer</strong>, il faut préciser la valeur de l&#8217;élément mbeanQualifier dans les paramètres d&#8217;init.</p>

<h2>JVM agent</h2>

<p>Ce type d&#8217;agent Jolokia que j&#8217;ai testé IRL est très simple à utiliser et permet d&#8217;attacher un agent à une JVM afin qu&#8217;elle expose à la mode REST ses couches d&#8217;administration et de supervision.</p>

<p>Il est possible de :</p>

<ul>
<li><em>bootstrapper</em> l&#8217;agent JVM au démarrage de la JVM en lui fournissant le jar adéquate ainsi que les options qui vont bien :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -javaagent:agent.jar<span class="o">=</span><span class="nv">port</span><span class="o">=</span>7777,host<span class="o">=</span>localhost
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>bootstrapper</em> l&#8217;agent JVM en lui fournissant directement une fichier de configuration :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -javaagent:agent.jar<span class="o">=</span><span class="nv">config</span><span class="o">=</span><span class="nv">$FICHIER_CONFIG_JOLOKIA</span>
</span></code></pre></td></tr></table></div></figure>


<p>où un exemple de fichier de configuration peut être trouvé dans jar de l&#8217;agent (au nom de <code>default-jolokia-agent.properties</code>).</p>

<p>où <code>agent.jar</code> peut être téléchargé de <a href="http://www.jolokia.org/download.html">http://www.jolokia.org/download.html</a> (artifact : <strong>JVM-Agent</strong>).</p>

<p>De la même manière, un agent Jolokia peut être attaché à une processus Java à la demande (un peu comme lorsque JConsole se connecte à un processus local). Pour ce faire, il suffit de lancer la commande suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar agent.jar start &lt;PID&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Jolokia et la sécurité</h2>

<p>Jolokia permet de configurer la sécurité assez finement. N&#8217;ayant pas tester, je ne m&#8217;attarderai pas trop sur le sujet.</p>

<p>Cependant, il est intéressant de noter que Jolokia permet de filtrer l&#8217;accès des clients par IP mais offre également un accès plus fin pour l&#8217;accès aux MBeans (<code>read</code>/<code>write</code>/<code>exec</code>/<code>list</code>/<code>search</code>/<code>version</code>).</p>

<p>Point également important, Jolokia supporte la spécification W3C pour le Cross-Origin Resource Sharing (CORS) qui permet d&#8217;utiliser des outils comme <a href="http://hawt.io/">Hawt.io</a> (mais nous y reviendront plus tard&hellip;).</p>

<h2>Le protocole Jolokia</h2>

<p>Jolokia utilise un protocole JSON sur HTTP. La communication est basé sur le paradigme requête/réponse où chaque requête fournit une réponse.</p>

<p>Les requêtes peuvent être envoyées de deux manières :</p>

<ul>
<li>soit avec une requête HTTP GET (dans ce cas, les paramètres sont encodés dans l&#8217;URL),</li>
<li>soit avec une requête HTTP POST où la requête est incluse dans le corps de la requête au format JSON.</li>
</ul>


<p>Les réponses retournées par l&#8217;agent sont, quant à elles, toujours envoyées en JSON.</p>

<p>De plus, les requêtes au format HTTP GET peuvent prendre deux formes :</p>

<ul>
<li>utiliser un format REST (ex : <a href="http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage">http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage</a>)</li>
<li>utiliser un format où la requête est donnée par un paramètre <strong>p=</strong> (ex : <a href="http://localhost:8080/jolokia?p=/read/jboss.jmx:alias=jmx%2Frmi%2FRMIAdaptor/State">http://localhost:8080/jolokia?p=/read/jboss.jmx:alias=jmx%2Frmi%2FRMIAdaptor/State</a>)</li>
</ul>


<p>A noter que Jolokia utilise le caractère &ldquo;!&rdquo; comme caractère d&#8217;échappement.</p>

<p>Plutôt que de longs discours, quelques exemples issus de la documentation aideront à comprendre&hellip;</p>

<p>Pour lire la valeur du MBean dont l&#8217;objectName est <strong>java.lang:type=Memory/HeapMemoryUsage</strong>, les requêtes suivantes sont équivalentes :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s2">&quot;http://127.0.0.1:8778/jolokia/read/java.lang:type=Memory/HeapMemoryUsage/used&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<br/>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s2">&quot;http://127.0.0.1:8778/jolokia/?p=/read/java.lang:type=Memory/HeapMemoryUsage/used&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<br/>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -d <span class="s1">&#39;{&quot;type&quot; : &quot;read&quot;, &quot;mbean&quot; : &quot;java.lang:type=Memory&quot;, &quot;attribute&quot; : &quot;HeapMemoryUsage&quot;, &quot;path&quot; : &quot;used&quot; }&#39;</span> http://127.0.0.1:8778/jolokia/
</span></code></pre></td></tr></table></div></figure>


<p>soit en format lisible :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;read&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mbean&quot;</span><span class="o">:</span> <span class="s2">&quot;java.lang:type=Memory&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;attribute&quot;</span><span class="o">:</span> <span class="s2">&quot;HeapMemoryUsage&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;path&quot;</span><span class="o">:</span> <span class="s2">&quot;used&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La réponse obtenue est de la forme :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="o">:</span> <span class="mi">1393865787</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;request&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;mbean&quot;</span><span class="o">:</span> <span class="s2">&quot;java.lang:type=Memory&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;path&quot;</span><span class="o">:</span> <span class="s2">&quot;used&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;attribute&quot;</span><span class="o">:</span> <span class="s2">&quot;HeapMemoryUsage&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;read&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span><span class="o">:</span> <span class="mi">162037504</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour montrer le coté structuré de la réponse, à une requête de type :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>http://127.0.0.1:8778/jolokia/read/java.lang:type<span class="o">=</span>Memory
</span></code></pre></td></tr></table></div></figure>


<p>on obtient :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="o">:</span> <span class="mi">1393866039</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;request&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;mbean&quot;</span><span class="o">:</span> <span class="s2">&quot;java.lang:type=Memory&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;read&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;Verbose&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;ObjectPendingFinalizationCount&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;NonHeapMemoryUsage&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;max&quot;</span><span class="o">:</span> <span class="mi">329252864</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;committed&quot;</span><span class="o">:</span> <span class="mi">218951680</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;init&quot;</span><span class="o">:</span> <span class="mi">19136512</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;used&quot;</span><span class="o">:</span> <span class="mi">139774968</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;HeapMemoryUsage&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;max&quot;</span><span class="o">:</span> <span class="mi">518979584</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;committed&quot;</span><span class="o">:</span> <span class="mi">518979584</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;init&quot;</span><span class="o">:</span> <span class="mi">134217728</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;used&quot;</span><span class="o">:</span> <span class="mi">179096552</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;ObjectName&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;objectName&quot;</span><span class="o">:</span> <span class="s2">&quot;java.lang:type=Memory&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> Concernant les opérations possibles (dans l&#8217;exemple précédent, il s&#8217;agissait d&#8217;une lecture), il existe :</p>

<ul>
<li><strong>read</strong> avec le format GET suivant :</li>
</ul>


<p><code>&lt;base-url&gt;/read/&lt;mbean name&gt;/&lt;attribute name&gt;/&lt;inner path&gt;</code></p>

<p>(ex : <a href="http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage/used">http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage/used</a>)</p>

<ul>
<li><strong>write</strong> avec le foramt GET suivant :</li>
</ul>


<p><code>&lt;base url&gt;/write/&lt;mbean name&gt;/&lt;attribute name&gt;/&lt;value&gt;/&lt;inner path&gt;</code></p>

<p>(ex : <a href="http://localhost:8080/jolokia/write/java.lang:type=Memory/Verbose/true">http://localhost:8080/jolokia/write/java.lang:type=Memory/Verbose/true</a>)</p>

<ul>
<li><strong>exec</strong> avec le format GET suivant :</li>
</ul>


<p><code>&lt;base url&gt;/exec/&lt;mbean name&gt;/&lt;operation name&gt;/&lt;arg1&gt;/&lt;arg2&gt;/....</code></p>

<p>(ex : <a href="http://localhost:8080/jolokia/exec/java.lang:type=Memory/gc">http://localhost:8080/jolokia/exec/java.lang:type=Memory/gc</a>)</p>

<ul>
<li><strong>search</strong> avec le format GET suivant :</li>
</ul>


<p><code>&lt;base-url&gt;/search/&lt;pattern&gt;</code></p>

<p>(ex : <a href="http://localhost:8080/jolokia/search/*:j2eeType=J2EEServer,*">http://localhost:8080/jolokia/search/*:j2eeType=J2EEServer,*</a>)</p>

<ul>
<li><strong>list</strong> avec le format GET suivant :</li>
</ul>


<p><code>&lt;base-url&gt;/list/&lt;inner path&gt;</code></p>

<p>(ex : <a href="http://localhost:8080/jolokia/list/java.lang/type=Memory/attr">http://localhost:8080/jolokia/list/java.lang/type=Memory/attr</a>)</p>

<ul>
<li><strong>version</strong> qui permet d&#8217;avoir la version du protocole utilisé ainsi qu&#8217;un ensemble de paramètre avec le format GET suivant :</li>
</ul>


<p><code>&lt;base-url&gt;/version</code></p>

<p>(ex : <a href="http://localhost:8080/jolokia/version">http://localhost:8080/jolokia/version</a>)</p>

<p>Enfin, si le mode proxy est utilisé, seul le mode POST peut être utilisé et doit, alors, avoir le format suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;read&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mbean&quot;</span> <span class="o">:</span> <span class="s2">&quot;java.lang:type=Memory&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;attribute&quot;</span> <span class="o">:</span> <span class="s2">&quot;HeapMemoryUsage&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;target&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>         <span class="s2">&quot;url&quot;</span> <span class="o">:</span> <span class="s2">&quot;service:jmx:rmi:///jndi/rmi://targethost:9999/jmxrmi&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;user&quot;</span> <span class="o">:</span> <span class="s2">&quot;jolokia&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;password&quot;</span> <span class="o">:</span> <span class="s2">&quot;s!cr!t&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne rentrerai pas plus en détaille sur cette partie là qui est beaucoup plus exhaustive dans la documentation officielle (comment les objets sont sérialisés, le mapping complet des MXBeans, la découverte des agents ou les différentes versions du protocole Jolokia &ndash; actuellement la version 7.1 &ndash; ) et si cela est nécessaire, je conseille d&#8217;aller directement se référer à la documentation.</p>

<h1>Autres features</h1>

<p>En plus des fonctionnalités présentées précédemment, Jolokia offre les fonctionnalités suivantes :</p>

<ul>
<li>exposition de son propre MBean,</li>
<li>différents clients (javascript, plugin cubism, java, Jmx4Perl),</li>
<li>une API de programmation pour exposer sont MBeanServer,</li>
<li>un JSonMBean,</li>
<li>une integration Spring,</li>
</ul>


<p>Pour l&#8217;intégration avec Spring, cela se fait via l&#8217;import Maven suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.jolokia<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jolokia-spring<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.2.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>et le contexte Spring suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>       <span class="na">xmlns:jolokia=</span><span class="s">&quot;http://www.jolokia.org/jolokia-spring/schema/config&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">       http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">       http://www.jolokia.org/jolokia-spring/schema/config  http://www.jolokia.org/jolokia-spring/schema/config/jolokia-config.xsd</span>
</span><span class='line'><span class="s">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;jolokia:agent</span> <span class="na">lookupConfig=</span><span class="s">&quot;true&quot;</span> <span class="na">systemPropertiesMode=</span><span class="s">&quot;never&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;jolokia:config</span>
</span><span class='line'>                <span class="na">autoStart=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>                <span class="na">host=</span><span class="s">&quot;${jolokia.host}&quot;</span>
</span><span class='line'>                <span class="na">port=</span><span class="s">&quot;${jolokia.port}&quot;</span>
</span><span class='line'>                <span class="na">user=</span><span class="s">&quot;${jolokia.user}&quot;</span>
</span><span class='line'>                <span class="na">password=</span><span class="s">&quot;${jolokia.password}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/jolokia:agent&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;mbeanServer&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jmx.support.MBeanServerFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;locateExistingServerIfPossible&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>Dans cet article, une présentation succincte a été faite de Jolokia. J&#8217;espère qu&#8217;elle vous aura plu ;&ndash;)&hellip;</p>

<p>Il s&#8217;agit d&#8217;un outils simple, pluggable très facilement à n&#8217;importe quelle application (une intégration à Cassandra s&#8217;est fait en 5 minutes).</p>

<p>Cette présentation était surtout axé concepts et principes afin de bien comprendre ce que peut apporter cet outils.</p>

<p>Cependant, un des gros avantage de Jolokia est un point qui n&#8217;a pas été abordé dans cet article : il s&#8217;agit de son intégration à <a href="http://hawt.io/">Hawt.io</a>. Cet outils ayant déjà fait le sujet d&#8217;article sur le blog de Zenika, je vous invite à y jeter un oeil :</p>

<ul>
<li><a href="http://blog.zenika.com/index.php?post/2014/01/07/HawtIO-la-console-web-polyvalente">HawtIO, la console web polyvalente</a></li>
<li><a href="http://blog.zenika.com/index.php?post/2014/01/14/HawtIO-ecrire-un-plugin">HawtIO, écrire un plugin</a></li>
</ul>


<p>Ainsi, en production, disposer du combo Hawt.io + Jolokia offre, à mon sens, d&#8217;énormes avantages comme, par exemple, accèder aux informations de n&#8217;importe quelle application qui, généralement, n&#8217;est pas accessible pour des raisons de sécurité (cf. <a href="http://blog.jetoile.fr/2010/05/jmx-et-firewall.html">ici</a>).</p>

<p>Bien sûr, il existe d&#8217;autres solutions comme l&#8217;utilisation de <a href="http://www.crashub.org/">CraSH</a> mais exposer ses MBeans via JSON over HTTP est tellement simple et peut surtout être exploité simplement par les équipes de production ;&ndash;) .</p>

<h1>Pour aller plus loin&hellip;</h1>

<ul>
<li>Site de Jolokia : <a href="http://www.jolokia.org/">http://www.jolokia.org/</a></li>
<li>Site de documentation de Jolokia : <a href="http://www.jolokia.org/reference/html/index.html">http://www.jolokia.org/reference/html/index.html</a></li>
<li>Site d&#8217;Hawt.io : <a href="http://hawt.io/">http://hawt.io/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BreizhCamp 2013]]></title>
    <link href="http://blog.jetoile.fr/2013/06/breizhcamp-2013.html"/>
    <updated>2013-06-13T01:27:32+02:00</updated>
    <id>http://blog.jetoile.fr/2013/06/breizhcamp-2013</id>
    <content type="html"><![CDATA[<p><img src="http://1.bp.blogspot.com/-Q9wf4o9BcBc/UboAHmjPqbI/AAAAAAAAA8M/2DZwYkDxpUg/s1600/logo.png" alt="left-small" /></p>

<p>Pour ceux qui l&#8217;aurait loupé, le BreizhCamp dans sa version 2013 a actuellement lieu.</p>

<p>Etant un grand amoureux de la Bretagne, je ne pouvais manquer le cru de cette année&hellip;</p>

<p>En outre, j&#8217;ai eu la chance d&#8217;y présenter un <strong>Tools In Action</strong> d&#8217;&frac12; heure sur le sujet des tests d&#8217;acceptance et plus précisément sur la façon dont il est possible d&#8217;intégrer Cucumber JVM, Selenium et FluentLenium.</p>

<p>Les slides sont dès à présent disponibles :</p>

<iframe frameborder="0" height="400" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/22931252" width="476"></iframe>


<p>Et un projet d&#8217;exemple est accessible <a href="http://github.com/jetoile/sample-cucumber">ici</a>.</p>

<p>A noter que cette présentation concorde parfaitement avec la version de FluentLenium dans sa version 9.0 (comme par hasard! ;&ndash;) ).</p>

<p>Enjoy! ;&ndash;)</p>

<p>PS : en plus, pour une fois, il ne pleut pas&hellip; ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Industrialiser La Récolte De Métriques Web]]></title>
    <link href="http://blog.jetoile.fr/2013/04/industrialiser-la-recolte-de-metriques.html"/>
    <updated>2013-04-25T22:01:09+02:00</updated>
    <id>http://blog.jetoile.fr/2013/04/industrialiser-la-recolte-de-metriques</id>
    <content type="html"><![CDATA[<p><img src="http://1.bp.blogspot.com/-3MDuvu3M7y8/UXhaQ4KpF0I/AAAAAAAAA7c/0_a7KhiLEfw/s1600/01-timeline-harstorage5.png" alt="left-small" /></p>

<p> A l&#8217;origine, une des principales raisons à la mise en place d&#8217;un serveur d&#8217;intégration continue était l&#8217;automatisation des processus qui, fait manuellement, étaient souvent consommateur de temps et générateur d&#8217;erreurs humaines. Petit à petit, ce dernier s&#8217;est imposé comme l&#8217;orchestrateur de tous les processus et est devenu un des points central de l&#8217;usine de développement. En effet, en plus de ses capacités à compiler, packager, faire passer les tests unitaires, d&#8217;intégration et d&#8217;acceptance, il est souvent utilisé pour livrer mais également pour effectuer des tests de non régression.</p>

<p>Parmi ces tests de non regression, il est possible d&#8217;y inclure (en plus des classiques tests unitaires, d&#8217;intégration et d&#8217;acceptances) les tests de performances (<a href="http://jmeter.apache.org/">JMeter</a>, <a href="http://jmeter.apache.org/">Gatling</a>, <a href="http://clif.ow2.org/">Clif</a>) et la remontée de métriques de qualité de code (<a href="http://pmd.sourceforge.net/">PMD/CPD</a>, <a href="http://findbugs.sourceforge.net/">Findbugs</a>, <a href="http://checkstyle.sourceforge.net/">Checkstyle</a>, ou plus simplement <a href="http://www.sonarsource.org/">Sonar</a>).</p>

<p>Bien évidemment, récupérer des métriques sans les consolider ni les comparer avec l&#8217;historique est totalement inutile car cela n&#8217;offrirait aucune visibilité sur l&#8217;amélioration ou la dégradation du produit.</p>

<p>Ce petit laïus semble trivial pour ceux qui font du Java (enfin je l&#8217;espère&hellip; ;&ndash;) ). Cependant il l&#8217;est un peu moins dans le monde pur web (ie. lorsque l&#8217;on veut tester une couche pur front). Bien sûr, il y a Selenium &amp; co mais cela ne permet de ne tester que le fonctionnel. En outre, en cherchant dans la littérature (pour rappel, je ne suis pas développeur front), on peut constater que, souvent, les outils utilisés pour obtenir des métriques sur la qualité de rendu d&#8217;une page ou le temps de chargement de ses différents composants sont souvent intégrés au <a href="https://developers.google.com/chrome-developer-tools/">navigateur du développeur</a> et que, souvent, il est nécessaire de se faire des nœuds au cerveau pour les intégrer aux usines logicielles telles que celles dont l&#8217;écosystème Java a l&#8217;habitude.</p>

<p>Vous l&#8217;aurez compris, cet article a donc pour objectif de montrer comment il est possible d&#8217;intégrer tout ce beau monde&hellip;</p>

<p>Il se limitera cependant à la récupération de métriques sur la qualité de rendu d&#8217;une page ainsi qu&#8217;à son temps de chargement.</p>

<p>Dans un premier temps, cet article présentera donc comment il est possible de récupérer des métriques type <a href="http://yslow.org/">YSlow</a> ou <a href="https://developers.google.com/speed/pagespeed/">Pagespeed</a> (ie. une note globale sur la page) puis, dans un second temps, comment il est possible de récupérer des métriques sur le temps de chargement des pages. Enfin, pour faire le liant avec mes articles précédent, on verra comment il est possible de remonter et historiser ces métriques au travers un test d&#8217;acceptance.</p>

<p>Evidemment, l&#8217;objectif n&#8217;étant pas d&#8217;obtenir ces métriques de manière &ldquo;one shot&rdquo;, une attention particulière sera portée sur l&#8217;intégration de ces outils à une usine logicielle et à leurs capacités à fournir une évolution dans le temps.</p>

<!-- more -->


<h1>HTML et ses bonnes pratiques</h1>

<h2>Contexte</h2>

<p>Parmi les outils courants pour récupérer une évaluation d&#8217;une page HTML au sein d&#8217;un navigateur, il existe YSlow et Pagespeed. Ces deux outils fournissent un ensemble de notes qui permettent de qualifier les <em>bonnes</em> pratiques tels que la minification des fichiers Javascript.</p>

<p><img src="http://1.bp.blogspot.com/-FK0JmFOA6-E/UXhYlIp8YuI/AAAAAAAAA6M/X7S8oxoqMA4/s1600/01-pagespeed_chrome.png" alt="medium" /></p>

<p><img src="http://3.bp.blogspot.com/-BzaEnN79iIo/UXhZTxUiGaI/AAAAAAAAA6Y/YTmOqzR5c7M/s1600/yslow.png" alt="medium" /></p>

<p> Bien sûr, le fait d&#8217;utiliser un plugin de navigateur n&#8217;est pas ce qu&#8217;il y a de plus industrialisable. Le besoin peut être décomposé en deux étapes :</p>

<ul>
<li>la récupération des métriques,</li>
<li>la présentation de ces métriques dans un <em>dashboard</em> afin qu&#8217;elles soient lisibles et qu&#8217;il soit possible de voir leur évolution dans le temps.</li>
</ul>


<h2>Solution et mise en oeuvre</h2>

<p>Comme dit dans le paragraphe précédent, il convient au préalable de générer les métriques.</p>

<p>Du coté de YSlow, cela est facilement faisable en s&#8217;appuyant sur phantomjs.</p>

<p>Pour ce faire, il suffit de récupérer et d&#8217;installer le binaire de <a href="http://phantomjs.org/">phantomjs</a>. Il reste ensuite à récupérer le script yslow.js puis d&#8217;exécuter la commande suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/opt/phantomjs/bin/phantomjs yslow.js &lt;url page&gt;
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://2.bp.blogspot.com/-YmCjl2Qldg8/UXgB31zhtoI/AAAAAAAAA5U/P79Nn3j6Pvo/s1600/01-yslow_cmd2.png" alt="medium" /></p>

<p>Il est également possible de s&#8217;appuyer sur <a href="http://nodejs.org/">nodejs</a> mais l&#8217;opération devient alors un peu plus compliqué : il faut d&#8217;abord installer nodejs puis yslow avant de pouvoir lancer la génération du rapport en passant par la génération d&#8217;un fichier HAR (<a href="http://httparchive.org/index.php">HTTP ARchive</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /opt/nodejs/bin/npm install yslow -g
</span><span class='line'>/opt/phantomjs/bin/phantomjs /opt/phantomjs/examples/netsniff.js  &lt;url page&gt; | yslow
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://2.bp.blogspot.com/-gD-DFJtuChI/UXgBG-wifGI/AAAAAAAAA5M/2M1bFUsavqc/s1600/01-yslow_cmd.png" alt="medium" /></p>

<p> Coté génération du rapport Pagespeed, trois pistes ont été étudiées :</p>

<ul>
<li>la première en utilisant un <a href="https://github.com/pauly/pagespeed">module nodejs</a>,</li>
<li>la deuxième en compilant Pagespeed directement depuis le <a href="https://code.google.com/p/page-speed/">site de google</a>,</li>
<li>la troisième en s&#8217;appuyant sur un <a href="https://code.google.com/p/harstorage/downloads/list">binaire déjà compilé</a> trouvé sur le site de <a href="https://code.google.com/p/harstorage/">HarStorage</a>.</li>
</ul>


<p>Les deux premières solutions se sont malheureusement avérées être un échec : en effet, concernant le module nodejs, il s&#8217;est avéré être incompatible à l&#8217;installation avec la version courante de nodejs (0.10.4). Or une version antérieure se trouvait être incompatible avec le module YSlow&hellip; (j&#8217;avoue ne pas m&#8217;être amusé à tester toutes les versions de nodejs et j&#8217;ai donc laissé cette piste de coté).</p>

<p>Du coté de la deuxième piste, je n&#8217;ai malheureusement pas réussi à la faire compiler&hellip; :&lsquo;( et cela malgré moultes tentatives sur les versions 1.7, 1.8 et 1.9 sur mon système Linux (Ubuntu 12.10) mais également sur un système disposant de XUbuntu 11.10. Cette piste a donc également été abandonnée&hellip;</p>

<p>La troisième tentative a, heureusement, été plus concluante. Ainsi, après téléchargement du binaire, il est possible, en lui fournissant un fichier HAR (générable, par exemple, à l&#8217;aide du module netsniff de phantomjs), de générer nos métriques PageSpeed :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/opt/phantomjs/bin/phantomjs /opt/phantomjs/examples/netsniff.js  &lt;url page&gt; &gt; monhar.har
</span><span class='line'>./pagespeed_bin --input_file monhar.har
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://3.bp.blogspot.com/-EPCoFg22lhA/UXhTkX7iPOI/AAAAAAAAA5k/mHf-dyeVctI/s1600/01-pagespeed_cmd.png" alt="medium" /></p>

<p> La génération des rapports ayant été effectuée, l&#8217;étape suivante pour répondre à notre cahier des charges consiste à remonter nos métriques récoltées par YSlow dans un outils un peu plus agréable.</p>

<p>Pour ce faire, le plugin <a href="https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin">TAP</a> (<em>Test Anything Protocol</em>) de Jenkins a été utilisé. Ainsi, combiné avec l&#8217;exécution de récupération de la métrique, cela permet d&#8217;avoir au sein de Jenkins un job dédié à la génération de cette dernière et à son affichage, la gestion de l&#8217;historisation étant déléguée à l&#8217;historique du job.</p>

<p>Cependant, YSlow ne prenant en entrée qu&#8217;une url, un job doit être créé pour chaque page ciblée.</p>

<p><img src="http://2.bp.blogspot.com/-FEOYf1dOdCA/UXhXRxIT9SI/AAAAAAAAA50/iMrSJG1J3N4/s1600/01-tap.png" alt="medium" /></p>

<p><img src="http://2.bp.blogspot.com/-cFZAvtOQj0k/UXhX3xVuVUI/AAAAAAAAA58/9JNC8XhNsRo/s1600/01-tap1.png" alt="medium" /></p>

<p>Coté Pagespeed, j&#8217;avoue ne pas avoir cherché mais le chapitre suivant proposera une solution simple et efficace pour obtenir une visualisation et une historisation de ces métriques.</p>

<h2>Conclusion</h2>

<p>Comme on a pu le constater, la génération de métriques YSlow et/ou Pagespeed oblige (je n&#8217;ai pas trouvé d&#8217;autres moyens plus simples :&lsquo;( ) à passer par des frameworks tierces tels que phantomjs ou nodejs.</p>

<p>Pour le lecteur qui a su lire entre les lignes, il a pu constater qu&#8217;il y a deux approches possibles : soit passer par phantomjs (qui offre un navigateur headless) pour capturer la page rendu en déléguant au script de YSlow l&#8217;analyse de la page, soit passer par phantomjs pour générer un fichier HAR (qui contient, entre autre, les ressources chargées par la page ainsi que leur temps de récupération et le statut associé) puis de le passer à YSlow (via son module nodeJS) ou à PageSpeed.</p>

<p>En outre, du fait que les résultats obtenus l&#8217;ont été par page, pour un site complet, cela peut vite devenir&hellip; rébarbatif (pour rester poli)&hellip; pas glop&hellip;</p>

<h1>Vitesse de rendu</h1>

<h2>Contexte</h2>

<p>Dans la première partie, nous avons vu comment il était possible de générer des rapports d&#8217;exécution de bonnes pratiques d&#8217;une page HTML. Dans ce chapitre, nous nous intéresserons à la récupération de métriques de rendu d&#8217;une page au sens temps de récupération de ses différents éléments.</p>

<p><img src="http://2.bp.blogspot.com/-9lTF11FrC0M/UXhZk7aI6gI/AAAAAAAAA6g/0ei3KIbIxUQ/s1600/02-timeline_firefox.png" alt="medium" /></p>

<p><img src="http://2.bp.blogspot.com/-ImWAUCGEEIk/UXhZtgHULqI/AAAAAAAAA6o/RV8oNYSYBWg/s1600/01-timeline.png" alt="medium" /></p>

<p> Comme précédemment, le problème peut être décomposé en deux étapes :</p>

<ul>
<li>la génération du rapport,</li>
<li>sa représentation graphique pour une utilisation exploitable ainsi que son historisation.</li>
</ul>


<p>Pour la partie génération, plusieurs pistes ont été étudiées :</p>

<ul>
<li>utilisation de phantomjs et de son plugin loadpage,</li>
<li>utilisation de phantomjs et de son plugin netsniff (se trouvant dans le répertoire examples) pour générer un rapport HAR.</li>
</ul>


<p>Coté affichage et historisation, nous verrons que cela a, encore une fois, été un peu galère même si les résultats obtenus sont satisfaisant (ouf&hellip; heureusement).</p>

<h2>Solution et mise en oeuvre</h2>

<p>La première piste étudiée a été celle utilisant le plugin loadpage.js de phantomjs :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/opt/phantomjs/bin/phantomjs /opt/phantomjs/examples/loadspeed.js &lt;url page&gt;
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://2.bp.blogspot.com/-EnsolVkBftc/UXhYbNBGVSI/AAAAAAAAA6E/_gwMF7JBVnY/s1600/01-timeline-loadspeed.png" alt="medium" /></p>

<p> Cependant, ce plugin ne renvoie que le temps de chargement de la page et ne fournit pas un niveau de granulatité suffisante.</p>

<p>Le deuxième piste étudiée a été l&#8217;utilisation du plugin netsniff de phantomjs. Ce plugin permet de générer un fichier HAR (HTTP ARchive) qui contient l&#8217;ensemble des ressources chargées par la page ainsi que leur temps de chargement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/opt/phantomjs/bin/phantomjs /opt/phantomjs/examples/netsniff.js &lt;url page&gt; &gt; monFichier.har
</span></code></pre></td></tr></table></div></figure>


<p> Cette solution semble satisfaisante. Ne reste plus qu&#8217;à afficher le fichier HAR dans un dashboard&hellip;</p>

<p>Coté affichage, deux approches ont été testées :</p>

<ul>
<li>HarViewer,</li>
<li>HarStorage.</li>
</ul>


<p><a href="https://github.com/jarib/har">HarViewer</a> est un visualisateur de fichiers HAR. Il s&#8217;agit d&#8217;un programme ruby et demande donc une installation de ce dernier.</p>

<p><img src="http://4.bp.blogspot.com/-U2Ki3STxZYM/UXhZ7TQPV6I/AAAAAAAAA6w/UbXv2iVxqVU/s1600/01-timeline-har1.png" alt="medium" /></p>

<p> Cependant, il ne permet pas de suivre l&#8217;évolution d&#8217;une page dans le temps (pas de fonctionnalité d&#8217;historisation ni de comparaison)&hellip; dommage&hellip;</p>

<p>Du coté de <a href="https://code.google.com/p/harstorage/">HarStorage</a>, son <a href="https://code.google.com/p/harstorage/wiki/Installation">installation</a> demande de nombreux autres composants (MongoDB, Python, &hellip;). Cependant, il offre une interface web par laquelle il est possible d&#8217;uploader ses fichiers HAR et, ainsi, d&#8217;en obtenir un stockage et donc, une historisation. Cerise sur la gateau, il offre également (modulo quelques manipulations) une génération et une visualisation des métriques PageSpeed.</p>

<p><img src="http://1.bp.blogspot.com/-m9UWNizIcgQ/UXhaHh19BQI/AAAAAAAAA64/JDn7UAs0O_4/s1600/01-timeline-harstorage1.png" alt="medium" /></p>

<p><img src="http://4.bp.blogspot.com/-1H5GqfbNF6Y/UXhaP7dQSjI/AAAAAAAAA7A/0Mq75mOVQ74/s1600/01-timeline-harstorage2.png" alt="medium" /></p>

<p><img src="http://1.bp.blogspot.com/-bCcDJ9DDRLU/UXhaP-REdGI/AAAAAAAAA7E/4SbClht1xao/s1600/01-timeline-harstorage3.png" alt="medium" /></p>

<p><img src="http://4.bp.blogspot.com/-xPHq6jh2V8A/UXhaQU3VcHI/AAAAAAAAA7I/8tyx8vKdB_4/s1600/01-timeline-harstorage4.png" alt="medium" /></p>

<p><img src="http://1.bp.blogspot.com/-3MDuvu3M7y8/UXhaQ4KpF0I/AAAAAAAAA7M/LzB4r9hRU98/s1600/01-timeline-harstorage5.png" alt="medium" /></p>

<h2>Conclusion</h2>

<p>On a vu dans ce chapitre comment il était possible de générer et de visualiser des timeline de rendu de pages HTML. La solution HarStorage me semble, dans le cadre d&#8217;une phase d&#8217;industrialisation, la solution la plus aboutie en permettant de conserver un historique pour évaluer l&#8217;évolution de la page tout en fournissant un moyen de visualiser les métriques de PageSpeed (chose qui n&#8217;avait, pour rappel, pas été abordé dans le chapitre précédent).</p>

<p>Cependant, on a pu constater qu&#8217;il était nécessaire de faire pas mal d&#8217;actions : génération d&#8217;un fichier HAR puis upload manuel dans HarStorage ou exécution manuel de HarViewer.</p>

<p>En outre, le même constat peut être fait que pour le chapitre précédent : les résultats obtenus l&#8217;ont été par page&hellip; pas glop&hellip;</p>

<h1>Automatisation totale</h1>

<h2>Contexte</h2>

<p>On a vu dans les chapitres précédent comment générer des rapports au format HAR via phantomjs. Cependant, dans le cas où des tests d&#8217;acceptance sont déjà mis en place sur le projet via, par exemple, Selenium et Cucumber JVM, il peut être judicieux de se servir de l&#8217;existant pour intégrer la génération des rapports ainsi que la remonté de ces dernières dans l&#8217;outils de DashBoard.</p>

<p>Cela permet ainsi de faire une pierre deux coups, mais également d&#8217;éviter les étapes manuelles ou d&#8217;avoir à maintenir des jobs jenkins un peu trop techniques.</p>

<h2>Solution et mise en oeuvre</h2>

<p>Comme annoncé précédemment, l&#8217;objectif de ce chapitre est d&#8217;étudier la faisabilité d&#8217;intégration de la génération de rapport HAR et leur upload dans HarStorage avec notre trio <a href="http://blog.jetoile.fr/2013/04/fluentlenium-et-cucumber-jvm-complement.html">Cucumber JVM/FluentLenium/Selenium</a>.</p>

<p>En fait, il est possible d&#8217;automatiser la génération d&#8217;un rapport HAR à travers Selenium (et donc FluentLenium) en utilisant un proxy. Pour ce faire deux approches sont possibles :</p>

<ul>
<li>utiliser le proxy <a href="http://opensource.webmetrics.com/browsermob-proxy/">BrowserMobProxy</a> de manière autonome,</li>
<li>utiliser le proxy BrowserMobProxy de manière programmatique.</li>
</ul>


<p>La partie upload au sein de HarStorage peut également être faite à l&#8217;aide des API Rest offertes par HarStorage.</p>

<p>Pour la première piste, je ne m&#8217;étendrai pas dessus puisque la solution est directement accessible sur le <a href="https://code.google.com/p/harstorage/wiki/JavaTutorial">site de HarStorage</a>. Il est juste important de noter que cette dernière nécessite d&#8217;avoir préalablement récupérer le proxy BrowserMobProxy en le compilant si nécessaire via un coup de mvn package -Preleasse (l&#8217;assembly se trouve branché au profil release) et de l&#8217;avoir lancé avec un port d&#8217;écoute donné, port qui est nommé PROXY_API_PORT dans le code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/browsermob-proxy --port 9090
</span></code></pre></td></tr></table></div></figure>


<p> En effet, BrowserMobProxy se comporte comme un serveur de proxy qu&#8217;il est possible de créer et d&#8217;enregistrer dynamiquement. Dans le code, la variable de classe PROXY_PORT correspond au port du proxy réel qui sera créé au sein du server BrowserMobProxy exécuté sur le port indiqué par PROXY_API_PORT. La classe fournit n&#8217;a pour rôle que d&#8217;interagir avec le serveur BrowserMobProxy au travers de son API REST (création d&#8217;un proxy, création et récupération du HAR).</p>

<p>La deuxième approche consiste, quant à elle, à créer ce serveur programmatiquement puis à lui demander l&#8217;instanciation d&#8217;un proxy Selenium (il n&#8217;y a donc pas besoin de récupérer le serveur BrowerMobProxy).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProxyServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProxyServer</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">PROXY_API_PORT</span><span class="o">));</span>
</span><span class='line'>   <span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Change browser settings</span>
</span><span class='line'>   <span class="n">Proxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">seleniumProxy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">////////////////////////////////////////////////</span>
</span><span class='line'>   <span class="c1">// ip a renseigner soit manuellement soit en utilisant NetworkInterface</span>
</span><span class='line'>   <span class="c1">////////////////////////////////////////////////</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="n">proxy</span><span class="o">.</span><span class="na">setHttpProxy</span><span class="o">(</span><span class="n">ip</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">PROXY_API_PORT</span><span class="o">);</span>
</span><span class='line'>   <span class="n">proxy</span><span class="o">.</span><span class="na">setHttpProxy</span><span class="o">(</span><span class="n">ip</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">PROXY_API_PORT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">DesiredCapabilities</span> <span class="n">capabilities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DesiredCapabilities</span><span class="o">();</span>
</span><span class='line'>   <span class="n">capabilities</span><span class="o">.</span><span class="na">setCapability</span><span class="o">(</span><span class="n">CapabilityType</span><span class="o">.</span><span class="na">PROXY</span><span class="o">,</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Driver</span> <span class="n">firefoxDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">capabilities</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">server</span><span class="o">.</span><span class="na">newHar</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">////////////////////////////////////////////////</span>
</span><span class='line'>   <span class="c1">// ma navigation via selenium avec le driver</span>
</span><span class='line'>   <span class="c1">////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Read data from container</span>
</span><span class='line'>   <span class="n">Har</span> <span class="n">har</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">getHar</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">String</span> <span class="n">strFilePath</span> <span class="o">=</span> <span class="s">&quot;target/selenium_report.har&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">strFilePath</span><span class="o">);</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">file</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>   <span class="n">har</span><span class="o">.</span><span class="na">writeTo</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class='line'>   <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">InputStreamReader</span> <span class="n">inputStreamReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">file</span><span class="o">)</span> <span class="o">);</span>
</span><span class='line'>   <span class="n">LineNumberReader</span> <span class="n">lineNumberReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LineNumberReader</span><span class="o">(</span><span class="n">inputStreamReader</span><span class="o">);</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">ligne</span><span class="o">;</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">((</span><span class="n">ligne</span> <span class="o">=</span> <span class="n">lineNumberReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">res</span> <span class="o">+=</span> <span class="n">ligne</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Send results to HAR Storage</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">HarStorage</span> <span class="n">hs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HarStorage</span><span class="o">(</span><span class="n">HARSTORAGE_HOST</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">HARSTORAGE_PORT</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">hs</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par contre, il semble que le driver de phantomjs ne fonctionne pas&hellip; dommage&hellip;</p>

<p>Bien sûr, cela est parfaitement intégrable à ce qui a été fait dans mon article précédent (ie. via Cucumber JVM et FluentLenium), ce qui permet d&#8217;obtenir une feature Cucumber JVM du type :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Feature: harstorage
</span><span class='line'>
</span><span class='line'>  Scenario Outline: har browser navigation:
</span><span class='line'>    Given I connect on url http://127.0.0.1:8080 with different browsers and I register the HarStorage Server on 127.0.0.1:5000 with name test:
</span><span class='line'>      | &lt;browser&gt; | &lt;parameters&gt; | &lt;host&gt; | &lt;version&gt; | &lt;platform&gt; |
</span><span class='line'>    Given j accede a la homePage
</span><span class='line'>    And je suis sur homePage
</span><span class='line'>    When je submit
</span><span class='line'>    Then je suis sur la page result
</span><span class='line'>    Then I send har files to the HarStorage Server
</span><span class='line'>    Then drivers are closed
</span><span class='line'>  Examples:
</span><span class='line'>    | browser | parameters | host | version | platform |
</span><span class='line'>    | firefox |            | none |         |          |
</span><span class='line'>#    | firefox |            | http://10.147.2.83:4444/wd/hub |         | win7     |
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>On a vu dans ce paragraphe qu&#8217;il était aisé d&#8217;intégrer la génération et l&#8217;upload d&#8217;un fichier HAR issu d&#8217;un scénario fonctionnel dans HarStorage.</p>

<p>Cependant, ce mécanisme ne fonctionne malheureusement pas avec phantomjs, ce qui peut forcer à l&#8217;utilisation de Selenium Server (à noter que cela n&#8217;a pas été testé avec d&#8217;autres driver que Firefox).</p>

<p>Enfin, un point essentiel à noter est que par cette méthode, le temps d&#8217;exécution du javascript n&#8217;est pas remonté dans la timeline. En effet, l&#8217;utilisation d&#8217;un proxy ne fournit pas cette information alors qu&#8217;avec une génération direct d&#8217;un fichier HAR via phantomjs, cette donnée est bien présente.</p>

<h1>Conclusion</h1>

<p>Cet article a montré (enfin je l&#8217;espère&hellip;) comment il était possible d&#8217;automatiser la génération de métrique de rendu des pages HTML  dans une usine logicielle .</p>

<p>C&#8217;est vrai que de nombreuses technologies/manipulations sont nécessaires alors qu&#8217;il existe de nombreux(?) services qui rendent le même service (<a href="http://gtmetrix.com/">GTMetrix</a>, <a href="http://www.webpagetest.org/compare">WebPageSpeed</a>, &hellip;).</p>

<p>Malheureusement, ces services ne sont généralement branchées qu&#8217;en production (pas d&#8217;accès aux serveurs de tests/intégrations des entreprises) alors que les avoir au plus tôt dans le cycle de développement permettrait de minimiser les risques de régression et surtout de pousser à avoir une meilleure qualité telle que nous le permet Sonar.</p>

<p>Je tiens tout de même à préciser que j&#8217;ai été déçu de ne pas trouver une solution plus simple d&#8217;intégration de ces outils dans nos usines de développement.</p>

<p>Cela pourrait s&#8217;expliquer par un manque de maturité de l&#8217;environnement Java pour faire du Web 2.0 (sic) ou par une mutation du métier de développeur web qui tendrait vers une meilleure qualité logicielle mais qui n&#8217;aurait pas encore assimilé/intégré toutes les contraintes induites par une usine logicielle telle que celles que l&#8217;on connait dans notre monde Java&hellip; enfin, en gros, il reste du boulot&hellip;</p>

<h1>Pour aller plus loin&hellip;</h1>

<ul>
<li>YSlow : <a href="http://yslow.org">http://yslow.org</a></li>
<li><p>PageSpeed : <a href="https://code.google.com/p/page-speed">https://code.google.com/p/page-speed</a></p></li>
<li><p>HAR : <a href="http://www.softwareishard.com/blog/har-12-spec/">http://www.softwareishard.com/blog/har-12-spec/</a></p></li>
<li><p>HarViewer : <a href="https://github.com/jarib/har">https://github.com/jarib/har</a></p></li>
<li>HarStorage : <a href="https://code.google.com/p/harstorage/">https://code.google.com/p/harstorage/</a></li>
<li>BrowserMobProxy : <a href="http://opensource.webmetrics.com/browsermob-proxy/">http://opensource.webmetrics.com/browsermob-proxy/</a></li>
<li><p>Jenkins TAP Plugin : <a href="https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin">https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin</a></p></li>
<li><p>CucumberJVM : <a href="https://github.com/cucumber/cucumber-jvm">https://github.com/cucumber/cucumber-jvm</a></p></li>
<li>FluentLenium : <a href="https://github.com/FluentLenium/FluentLenium">https://github.com/FluentLenium/FluentLenium</a></li>
<li><p>Selenium : <a href="http://docs.seleniumhq.org/">http://docs.seleniumhq.org/</a></p></li>
<li><p>PhantomJS : <a href="http://phantomjs.org/">http://phantomjs.org/</a></p></li>
<li><p>NodeJS : <a href="http://nodejs.org/">http://nodejs.org/</a></p></li>
<li><p><a href="http://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/">http://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/</a></p></li>
<li><p><a href="http://fr.slideshare.net/watsonmw/performance-monitoring-in-a-day">http://fr.slideshare.net/watsonmw/performance-monitoring-in-a-day</a></p></li>
<li><p>code du POC : <a href="https://github.com/jetoile/fluentlenium-cucumber/tree/harStorage">https://github.com/jetoile/fluentlenium-cucumber/tree/harStorage</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FluentLenium Et Cucumber JVM... Complément Et Precision]]></title>
    <link href="http://blog.jetoile.fr/2013/04/fluentlenium-et-cucumber-jvm-complement.html"/>
    <updated>2013-04-11T21:38:54+02:00</updated>
    <id>http://blog.jetoile.fr/2013/04/fluentlenium-et-cucumber-jvm-complement</id>
    <content type="html"><![CDATA[<p><img src="http://4.bp.blogspot.com/-R3ORi15Ei3Y/UTmwoq5A2II/AAAAAAAAA3o/uaIMSSZlq38/s1600/logo.png" alt="left-small" /></p>

<p>Dans mon article précédent, j&#8217;avais tenté d&#8217;expliquer comment il était possible d&#8217;intégrer les frameworks <a href="https://github.com/cucumber/cucumber-jvm">Cucumber JVM</a> et <a href="http://docs.seleniumhq.org/">Selenium</a> au travers de <a href="https://github.com/FluentLenium/FluentLenium">FluentLenium</a>.</p>

<p>En effet, pour rappel, FluentLenium permettait d&#8217;abstraire Selenium en lui offrant une API plus <em>fluent</em> mais également en lui apportant nativement ce qu&#8217;il préconise, à savoir le <a href="http://docs.seleniumhq.org/docs/06_test_design_considerations.jsp#page-object-design-pattern">Page Object Design Pattern</a>.</p>

<p>Pour ce faire, j&#8217;avais proposé d&#8217;utiliser la délégation de l&#8217;initialisation de FluentLenium à une classe tierce injectée via le mécanisme d&#8217;injection de Cucumber JVM.</p>

<p>Cependant, suite à discussion avec la créatrice de FluentLenium (à savoir <a href="https://twitter.com/mathildelemee">Mathilde</a>), on s&#8217;est rendu compte que l&#8217;axe utilisé était légèrement biaisé (même s&#8217;il fonctionnait&hellip;).</p>

<p>Cet article revient donc sur ce point en proposant une solution plus simple mais présentera également comment il est possible de tester le scénario Cucumber avec différents navigateurs et il y aura un petit mot sur l&#8217;utilisation de navigateurs déportés (via les RemoteWebDriver de Selenium 2).</p>

<p>Pour ce faire, il sera découpé en 3 parties qui couvriront des usecases différents se traduisant donc par des implémentations différentes :</p>

<ul>
<li>cas de tests pour un site simple,</li>
<li>cas de tests pour un site complet,</li>
<li>cas de tests multi-navigateurs pour un site complet.</li>
</ul>


<p>A noter que je ne reviendrai pas sur les principes des différents frameworks/concepts mais juste sur comment il est possible d&#8217;implémenter ces différents usecases.</p>

<p>A noter également que l&#8217;article précédent aurait pu être modifié mais qu&#8217;en raison du nombre important de changements, il était plus simple d&#8217;en initier un autre&hellip;</p>

<!-- more -->


<h1>Cas de tests pour un site simple</h1>

<h2>Présentation et proposition d&#8217;implémentation</h2>

<p>Ce premier cas d&#8217;usage couvre le cas : &ldquo;j&#8217;ai un site que je veux tester avec Cucumber JVM et l&#8217;ensemble des steps peut être réuni dans une seule et même classe.&rdquo;</p>

<p>Bon je vois déjà la levée de bouclier : pourquoi réunir toutes les steps dans une seule et même classe. En fait, la raison du pourquoi sera expliquée un peu plus tard dans le paragraphe <em>Limites</em> de ce chapitre donc patience&hellip; ;&ndash;)</p>

<p>Contrairement à la façon que j&#8217;avais présentée dans mon article précédent, il n&#8217;est pas obligatoire de déléguer la déclaration des pages <code>FluentPage</code> à une autre classe étendant <code>FluentTest</code>. En fait, il suffit juste de faire étendre la classe contenant les steps cucumber de <code>FluentAdapter</code>, d&#8217;y déclarer les pages et d&#8217;appeler dans la méthode annotée par @Before (celui de Cucumber JVM bien sûr) les méthode d&#8217;initialisation du contexte de FluentLenium.</p>

<p>Pour rappel, cette initialisation instancie le WebDriver utilisé par Selenium 2 mais également les pages (annotées par l&#8217;annotation <code>@Page</code>) présentes dans la classe courante (ou ses parentes) qui doit, au minimum, étendre de <code>FluentAdapter</code>. Cela se fait au travers des méthodes <code>initFluent()</code> et <code>initTest()</code>.</p>

<p>Le code est donc extrêmement simple puisqu&#8217;il suffit de faire quelque chose du style :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.After</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.Before</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.Given</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.Then</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.When</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.FluentAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.annotation.Page</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.htmlunit.HtmlUnitDriver</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">fest</span><span class="o">.</span><span class="na">assertions</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleStep</span> <span class="kd">extends</span> <span class="n">FluentAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Page</span>
</span><span class='line'> <span class="n">BingPage</span> <span class="n">page</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Before</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">initFluent</span><span class="o">(</span><span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">());</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">initTest</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Given</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;j accede a bing&quot;</span><span class="o">)</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">step1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">goTo</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@When</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;je recherche ([^ ]*) &quot;</span><span class="o">)</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">step2</span><span class="o">(</span><span class="n">String</span> <span class="n">keyword</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">fill</span><span class="o">(</span><span class="s">&quot;#sb_form_q&quot;</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">keyword</span><span class="o">);</span>
</span><span class='line'>  <span class="n">submit</span><span class="o">(</span><span class="s">&quot;#sb_form_go&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Then</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;le titre est ([^ ]*) &quot;</span><span class="o">)</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">step3</span><span class="o">(</span><span class="n">String</span> <span class="n">keyword</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">title</span><span class="o">()).</span><span class="na">contains</span><span class="o">(</span><span class="n">keyword</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@After</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">quit</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>où BingPage est :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.FluentPage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BingPage</span> <span class="kd">extends</span> <span class="n">FluentPage</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;http://www.bing.com&quot;</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>et la feature, la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Feature: basic
</span><span class='line'>
</span><span class='line'>  Scenario: scenar1
</span><span class='line'>    Given j accede a bing
</span><span class='line'>    When je recherche toto
</span><span class='line'>    Then le titre est toto
</span></code></pre></td></tr></table></div></figure>


<p>Il est intéressant de remarquer la simplicité de la chose (et rien à voir avec l&#8217;implémentation que j&#8217;avais proposé précédemment!).</p>

<p>A part cela, peu de choses à ajouter : le code parle de lui même&hellip;</p>

<h2>Limites</h2>

<p>On vient de voir comme il était simple de faire cohabiter FluentLenium et Cucumber JVM.</p>

<p>Bien sûr, il y a un mais&hellip; (ça serait trop simple sinon) : comme on peut le constater, actuellement, toutes les steps se trouvent être dans la même classe. Cependant, dans le cas d&#8217;un site web un peu plus complexe, il est courant et même encouragé de séparer les steps dans différentes classes.</p>

<p>Dans l&#8217;implémentation précédente, l&#8217;annotation <code>@Before</code> a été utilisée pour initialiser le contexte (et plus particulièrement le webDriver et les pages pour ensuite injecter le webDriver dans ces dernières).</p>

<p>Cependant, dans le cas où les steps se trouvent être dans plusieurs classes, cela pose potentiellement un problème.</p>

<p>En effet, Cucumber JVM instancie la classe qui contient la définition de la step dès qu&#8217;il en a besoin et appelle la méthode annotée par <code>@Before</code> à l&#8217;instanciation de cette classe. Ainsi, dans notre cas, si les steps s&#8217;étaient trouvées dans deux classes, chacune étendant <code>FluentAdapter</code> et appelant <code>initFluent()</code> et <code>initTest()</code> dans la méthode annotée par @Before, alors cette instanciation aurait été faite deux fois et non une seule fois comme on aurait pu s&#8217;y attendre pour un même scénario donné&hellip;</p>

<p>Pire, les pages déclarées dans les classes n&#8217;auraient pas eu la même instance du webDriver et elles ne se seraient pas vu l&#8217;une l&#8217;autre&hellip;</p>

<p>Pas glop tout ça&hellip; :&lsquo;(</p>

<p>Ainsi, l&#8217;implémentation précédente fonctionne pour des cas &ldquo;simples&rdquo; mais si la partie test d’acceptante/intégration avait été plus complexe, alors cela aurait empêché la réutilisation et le découplage.</p>

<h1>Cas de tests pour un site complet</h1>

<h2>Présentation et proposition d&#8217;implémentation</h2>

<p>Il a été vu dans le paragraphe précédent qu&#8217;il pouvait être utile de disposer de plusieurs classes disposant des implémentations des fixtures.
Cependant, la question principale est de trouver comment il est possible de n&#8217;instancier qu&#8217;une seule fois par scénario le webDriver et de l&#8217;injecter dans des instances de pages propres au scénario.</p>

<p>La proposition présentée dans l&#8217;article précédent (modulo qu&#8217;il ne faut pas étendre de <code>FluentTest</code> mais de <code>FluentAdapter</code>) reste viable, mais il y a plus simple.</p>

<p>En effet, dans la proposition faite précédemment, la classe <code>FluentTestDelegator</code> avait à sa charge, à la fois la déclaration des pages, et l&#8217;instanciation et l&#8217;initialisation du contexte de FluentLenium. Pour rappel, cette instanciation/initialisation était réalisée par <a href="http://picocontainer.codehaus.org/">Pico Container</a> lors de l&#8217;injection de l&#8217;instance de cette classe dans la classe contenant les fixtures.</p>

<p>En fait, il est plus propre, d&#8217;un point de vue séparation des concepts, de laisser à cette classe le soin de proposer les fixtures d&#8217;initialisation du webDriver tout en séparant la déclaration des pages.</p>

<p>Cela peut être réalisé en créant une classe (<code>FluentPageInjector</code>) étendant de <code>FluentAdapter</code> qui définit les pages et de la faire étendre d&#8217;une classe (<code>FluentLeniumStepInitilizer</code>) qui définit les fixtures d&#8217;instanciation du webDriver.</p>

<p>Cela offre deux avantages : les classes qui définissent les steps de navigation n&#8217;ont qu&#8217;à étendre de <code>FluentPageInjector</code> pour avoir une visibilité sur les pages (tout en continuant d&#8217;injecter via pico l&#8217;instance de <code>FluentLeniumStepInitilizer</code>) et il devient alors possible de variabiliser le webDriver à utiliser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Feature: browser
</span><span class='line'>
</span><span class='line'>  Scenario: navigation version firefox
</span><span class='line'>    Given I connect on url http://localhost:8080 with firefox
</span><span class='line'>    Given j accede a la homePage
</span><span class='line'>    And je suis sur homePage
</span><span class='line'>    When je submit
</span><span class='line'>    Then je suis sur la page result
</span><span class='line'>    And driver is closed
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Scenario: navigation version chrome
</span><span class='line'>    Given I connect on url http://localhost:8080 with chrome with parameters webdriver.chrome.driver:/opt/chromedriver/chromedriver
</span><span class='line'>    Given j accede a la homePage
</span><span class='line'>    And je suis sur homePage
</span><span class='line'>    When je submit
</span><span class='line'>    Then je suis sur la page result
</span><span class='line'>    And driver is closed
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Scenario: navigation version phantomjs
</span><span class='line'>    Given I connect on url http://localhost:8080 with phantomjs with parameters phantomjs.binary.path:/opt/phantomjs-1.9.0-linux-x86_64/bin/phantomjs
</span><span class='line'>    Given j accede a la homePage
</span><span class='line'>    And je suis sur homePage
</span><span class='line'>    When je submit
</span><span class='line'>    Then je suis sur la page result
</span><span class='line'>    And driver is closed
</span></code></pre></td></tr></table></div></figure>


<br/>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">step</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.FluentAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.annotation.Page</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">page.HomePage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">page.ResultPage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FluentPageInjector</span> <span class="kd">extends</span> <span class="n">FluentAdapter</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Page</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">HomePage</span> <span class="n">homePage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Page</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">ResultPage</span> <span class="n">resultPage</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On remarque, comme dit plus haut, que cette classe n&#8217;a qu&#8217;un seul rôle qui est de déclarer les pages tout en étendant de <code>FluentAdapter</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomePageStep</span> <span class="kd">extends</span> <span class="n">FluentPageInjector</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="nf">HomePageStep</span><span class="o">(</span><span class="n">FluentLeniumStepInitilizer</span> <span class="n">delegator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">homePage</span> <span class="o">=</span> <span class="n">delegator</span><span class="o">.</span><span class="na">homePage</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">resultPage</span> <span class="o">=</span> <span class="n">delegator</span><span class="o">.</span><span class="na">resultPage</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>     <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^j accede a la homePage$&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">j_accede_a_homePage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">goTo</span><span class="o">(</span><span class="n">homePage</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^je suis sur homePage$&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">je_suis_sur_homePage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">homePage</span><span class="o">.</span><span class="na">isAt</span><span class="o">();</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^je submit$&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">je_submit</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">homePage</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultPageStep</span> <span class="kd">extends</span> <span class="n">FluentPageInjector</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ResultPageStep</span><span class="o">(</span><span class="n">FluentLeniumStepInitilizer</span> <span class="n">delegator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">resultPage</span> <span class="o">=</span> <span class="n">delegator</span><span class="o">.</span><span class="na">resultPage</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^je suis sur la page result$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">je_suis_sur_la_page_result</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resultPage</span><span class="o">.</span><span class="na">isAt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ces classes correspondent aux classes qui définissent les fixtures. Elles étendent de <code>FluentPageInjector</code> de façon à pouvoir bénéficier de la visibilité sur les pages. Par contre, il est intéressant de constater que, dans son constructeur, la classe <code>FluentLeniumStepInitializer</code> est injecté via Pico Container. Cela permet d&#8217;affecter la valeur des pages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FluentLeniumStepInitilizer</span> <span class="kd">extends</span> <span class="n">FluentPageInjector</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^I connect on url ([^ ]*) with ([^ ]*) with parameters ([^ ]*)$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">browser_connect</span><span class="o">(</span><span class="n">String</span> <span class="n">host</span><span class="o">,</span> <span class="n">String</span> <span class="n">browser</span><span class="o">,</span> <span class="n">String</span> <span class="n">parameters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">init</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">browser</span><span class="o">,</span> <span class="n">parameters</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;^drivers are closed&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">quit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@After</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterClose</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">quit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">String</span> <span class="n">host</span><span class="o">,</span> <span class="n">String</span> <span class="n">browserName</span><span class="o">,</span> <span class="n">String</span> <span class="n">parametersLine</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Browser</span> <span class="n">browser</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DesiredCapabilities</span> <span class="n">capabilities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DesiredCapabilities</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">parametersLine</span><span class="o">.</span><span class="na">slip</span><span class="o">(</span><span class="s">&quot;;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">parameter</span> <span class="o">:</span> <span class="n">parameters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">parameter</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span><span class="o">[]</span> <span class="n">key_value</span> <span class="o">=</span> <span class="n">parameter</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">capabilities</span><span class="o">.</span><span class="na">setCapability</span><span class="o">(</span><span class="n">key_value</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">key_value</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">browser</span> <span class="o">=</span> <span class="n">Browser</span><span class="o">.</span><span class="na">getBrowser</span><span class="o">(</span><span class="n">browserLine</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="n">capabilities</span><span class="o">.</span><span class="na">setBrowserName</span><span class="o">(</span><span class="n">browser</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">initWebDriver</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">browserHost</span><span class="o">,</span> <span class="n">browser</span><span class="o">,</span> <span class="n">capabilities</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initWebDriver</span><span class="o">(</span><span class="n">String</span> <span class="n">host</span><span class="o">,</span> <span class="n">String</span> <span class="n">browserHost</span><span class="o">,</span> <span class="n">Browser</span> <span class="n">browser</span><span class="o">,</span> <span class="n">DesiredCapabilities</span> <span class="n">capabilities</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Fluent</span> <span class="n">fluent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">browser</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">driver</span> <span class="o">=</span> <span class="n">BrowserMapper</span><span class="o">.</span><span class="na">getDriver</span><span class="o">(</span><span class="n">browser</span><span class="o">,</span> <span class="n">capabilities</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fluent</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">initFluent</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fluent</span><span class="o">.</span><span class="na">withDefaultUrl</span><span class="o">(</span><span class="n">host</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">initTest</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette classe étend par transitivité <code>FluentAdapter</code> et dispose donc de la visibilité sur les méthodes d&#8217;initialisation de <code>FluentLenium</code>. En outre, en étendant <code>FluentPageInjector</code> (qui étend de <code>FluentAdapter</code>), cela lui permet, à l&#8217;appel de <code>initTest()</code>, d&#8217;initialiser les pages.
Concernant l&#8217;initialisation des webDriver, cela est fait au niveau de la classe <code>BrowserMapper</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Browser</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HTMLUNIT</span><span class="o">(</span><span class="s">&quot;default&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">FIREFOX</span><span class="o">(</span><span class="s">&quot;firefox&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">CHROME</span><span class="o">(</span><span class="s">&quot;chrome&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">PHANTOMJS</span><span class="o">(</span><span class="s">&quot;phantomjs&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Browser</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Browser</span> <span class="nf">getBrowser</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Browser</span> <span class="n">browser</span> <span class="o">:</span> <span class="n">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">browser</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">browser</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HTMLUNIT</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<br/>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.Capabilities</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.chrome.ChromeDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.htmlunit.HtmlUnitDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.phantomjs.PhantomJSDriver</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrowserMapper</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Browser</span><span class="o">,</span> <span class="n">WebDriverLazyLoader</span><span class="o">&gt;</span> <span class="n">browserMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Browser</span><span class="o">,</span> <span class="n">WebDriverLazyLoader</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">browserMapper</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Browser</span><span class="o">.</span><span class="na">CHROME</span><span class="o">,</span> <span class="k">new</span> <span class="n">WebDriverLazyLoader</span><span class="o">(</span><span class="n">ChromeDriver</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>  <span class="n">browserMapper</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Browser</span><span class="o">.</span><span class="na">FIREFOX</span><span class="o">,</span> <span class="k">new</span> <span class="n">WebDriverLazyLoader</span><span class="o">(</span><span class="n">FirefoxDriver</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>  <span class="n">browserMapper</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Browser</span><span class="o">.</span><span class="na">HTMLUNIT</span><span class="o">,</span> <span class="k">new</span> <span class="n">WebDriverLazyLoader</span><span class="o">(</span><span class="n">HtmlUnitDriver</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>  <span class="n">browserMapper</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Browser</span><span class="o">.</span><span class="na">PHANTOMJS</span><span class="o">,</span> <span class="k">new</span> <span class="n">WebDriverLazyLoader</span><span class="o">(</span><span class="n">PhantomJSDriver</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="n">WebDriver</span> <span class="nf">getDriver</span><span class="o">(</span><span class="n">Browser</span> <span class="n">browser</span><span class="o">,</span> <span class="n">Capabilities</span> <span class="n">capabilities</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">WebDriverLazyLoader</span> <span class="n">webDriverLazyLoader</span> <span class="o">=</span> <span class="n">browserMapper</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">browser</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">webDriverLazyLoader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">browser</span> <span class="o">==</span> <span class="n">Browser</span><span class="o">.</span><span class="na">PHANTOMJS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">webDriverLazyLoader</span><span class="o">.</span><span class="na">getWebDriverClass</span><span class="o">(</span><span class="n">capabilities</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">browser</span> <span class="o">==</span> <span class="n">Browser</span><span class="o">.</span><span class="na">CHROME</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;webdriver.chrome.driver&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">capabilities</span><span class="o">.</span><span class="na">getCapability</span><span class="o">(</span><span class="s">&quot;webdriver.chrome.driver&quot;</span><span class="o">));</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">webDriverLazyLoader</span><span class="o">.</span><span class="na">getWebDriverClass</span><span class="o">(</span><span class="n">capabilities</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">webDriverLazyLoader</span><span class="o">.</span><span class="na">getWebDriverClass</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">browserMapper</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Browser</span><span class="o">.</span><span class="na">HTMLUNIT</span><span class="o">).</span><span class="na">getWebDriverClass</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette classe permet de faire le pont avec les webDriver qu&#8217;il est possible d&#8217;utiliser. Cependant, la petite astuce consiste à instancier de manière &ldquo;Lazy&rdquo; ces derniers.</p>

<p>En effet, appeler le constructeur d&#8217;un webDriver l&#8217;instancie mais le démarre également (ie. que la fenêtre du navigateur s&#8217;ouvre réellement). Du coup, la petite classe présentée ci-dessous a été utilisée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.Capabilities</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">WebDriverLazyLoader</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Class</span> <span class="n">webDriverClass</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">WebDriverLazyLoader</span><span class="o">(</span><span class="n">Class</span> <span class="n">webDriverClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">webDriverClass</span> <span class="o">=</span> <span class="n">webDriverClass</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">WebDriver</span> <span class="nf">getWebDriverClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">WebDriver</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">webDriverClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ReflectiveOperationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">WebDriver</span> <span class="nf">getWebDriverClass</span><span class="o">(</span><span class="n">Capabilities</span> <span class="n">capabilities</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">WebDriver</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">webDriverClass</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="n">Capabilities</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">newInstance</span><span class="o">(</span><span class="n">capabilities</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ReflectiveOperationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Limites</h2>

<p>Comme on a pu le voir dans ce chapitre, il est aisé de partager les fixtures Cucumber JVM dans des classes différentes tout en bénéficiant de FluentLenium.</p>

<p>Cependant, pour certains besoins, il peut être utile de vouloir lancer les tests d&#8217;acceptance/intégration sur différents navigateurs.</p>

<p>Bien sûr, chaque step pourrait boucler sur l&#8217;ensemble des navigateurs sur lesquels les tests doivent être exécutés, mais cela induirait des problématiques d&#8217;entrelacement des actions et donc soulèverait des problématiques comme la gestion d&#8217;un contexte par webDriver, l&#8217;accès à un rapport &ldquo;illisible&rdquo; ou un manque de contrôle sur les préconditions du test qui sont, généralement, lié au scénario et non à une Step.</p>

<p>Le chapitre suivant tentera de répondre à cette problématique en proposant un moyen de &ldquo;boucler&rdquo; sur le scénario avec différents navigateurs.</p>

<h1>Cas de tests multi-navigateurs pour un site complet</h1>

<h2>Présentation et proposition d&#8217;implémentation</h2>

<p>Il a été vu dans le chapitre précédent comment il était possible d&#8217;exécuter des tests d&#8217;acceptances/intégration sur un navigateur donné.</p>

<p>Ce chapitre présentera, pour sa part, une façon de les lancer sur différents navigateurs sans avoir à faire de copier/coller ;&ndash;).</p>

<p>En fait, Cucumber JVM permet nativement de boucler sur un scénario en utilisant différents paramètres. Cela se fait par le mécanisme de <code>scenario outline</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Feature: multibrowser
</span><span class='line'>
</span><span class='line'>  Scenario Outline: multi browser navigation version 1:
</span><span class='line'>    Given I connect on url http://localhost:8080 with &lt;browser&gt; with parameters &lt;parameters&gt;
</span><span class='line'>    Given j accede a la homePage
</span><span class='line'>    And je suis sur homePage
</span><span class='line'>    When je submit
</span><span class='line'>    Then je suis sur la page result
</span><span class='line'>    And driver is closed
</span><span class='line'>  Examples:
</span><span class='line'>    | browser | parameters                                             |
</span><span class='line'>    | firefox |                                                        |
</span><span class='line'>    | default |                                                        |
</span><span class='line'>    | chrome  | webdriver.chrome.driver:/opt/chromedriver/chromedriver |
</span></code></pre></td></tr></table></div></figure>


<p>Et&hellip; c&#8217;est tout!</p>

<p>Le code n&#8217;a pas à être modifié : Cucumber JVM s&#8217;occupe de tout! ;&ndash;)</p>

<h2>Limites</h2>

<p>On a vu dans le paragraphe précédent comment il était possible d&#8217;exécuter facilement des tests d&#8217;acceptance/intégration en s&#8217;appuyant sur la notion de scénario outline offerte nativement par Cucumber JVM.</p>

<p>Coté limitation, je n&#8217;en vois pas trop&hellip;</p>

<p>Peut être le fait de ne pas instancier le webDriver pour chaque scénario (opération assez coûteuse en temps) mais cela est aisément résolvable en utilisant une sorte de cache de webDriver fonctionnant sur le principe de singleton qui serait réinialisé lors de l&#8217;appel à la step drivers are closed qui serait isolée dans son propre <code>scenario outline</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  Scenario Outline: browsers are closed:
</span><span class='line'>    Then driver is closed
</span><span class='line'>  Examples:
</span><span class='line'>    | browser   | parameters                                                            |
</span><span class='line'>    | firefox   |                                                                       |
</span><span class='line'>    | default   |                                                                       |
</span><span class='line'>    | phantomjs | phantomjs.binary.path:/opt/phantomjs-1.9.0-linux-x86_64/bin/phantomjs |
</span><span class='line'>    | chrome    | webdriver.chrome.driver:/opt/chromedriver/chromedriver                |
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>Il a été présenté dans cet article comment il était possible d&#8217;implémenter l&#8217;intégration de Cucumber JVM et de Selenium à l&#8217;aide de FluentLenium.</p>

<p>Cet article n&#8217;a, cependant, pas fait mention de l&#8217;exécution des tests sur des navigateurs distants via les <strong>RemoteWebDriver</strong> mais cela est tout à fait possible (même si le code montré ici ne le présente pas) et est même totalement fonctionnel : pour ce faire (code disponible <a href="https://github.com/jetoile/fluentlenium-cucumber/tree/multiNav">ici</a>), il suffit de fournir, entre autre, des paramètres supplémentaires comme l&#8217;url de connexion au hub Selenium et d&#8217;instancier un <code>RemoteWebDriver</code> plutôt que le webDriver.</p>

<p>De même, le code permettant d&#8217;instancier à la mode singleton les webDriver est disponible <a href="https://github.com/jetoile/fluentlenium-cucumber/blob/multiNav/src/test/java/step/FluentLeniumStepInitilizer.java">ici</a> (voir la méthode <code>initCachedWebDriver()</code> de la classe <code>FluentLeniumStepInitilizer</code>).</p>

<p>Enfin, un dernier mot sur la façon dont il est possible d&#8217;exécuter tout ce beau monde (comme ça, je réponds à la remarque très pertinente de <a href="https://twitter.com/josepaumard">José</a> ;&ndash;) ) parce que faire des tests, c&#8217;est bien, les jouer, c&#8217;est mieux!</p>

<p>Il est possible de jouer les tests d&#8217;au moins trois manières distinctes : une orienté &ldquo;vraie vie&rdquo; (ie. utilisable au sein d&#8217;un build maven et donc exécutable via une usine d&#8217;intégration continue) et deux autres plutôt orientés développement.</p>

<p>Ainsi, pour jouer les tests via maven, il suffit de le déclarer dans le <code>pom.xml</code> le plugin failsafe en le branchant sur la &ldquo;bonne phase&rdquo;, à savoir le runner Cucumber JVM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-failsafe-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>integration-test<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>verify<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;includes&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include&gt;</span>**/BasicRunner.java<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/includes&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coté jouabilité des tests sur un environnement de développement  il est possible d&#8217;exécuter le <strong>Runner</strong> Cucumber JVM directement (comme lors de l&#8217;exécution d&#8217;une classe de test unitaire) ou d&#8217;utiliser le plugin Cucumber JVM proposé par notre IDE préféré (pour moi IntelliJ, pour les autres, je ne sais pas&hellip;).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.junit.Cucumber</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">Cucumber</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Cucumber.Options</span><span class="o">(</span><span class="n">features</span> <span class="o">=</span> <span class="s">&quot;classpath:fr/jetoile/webapp/acceptance&quot;</span><span class="o">,</span> <span class="n">format</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;pretty&quot;</span><span class="o">,</span> <span class="s">&quot;html:target/cucumber&quot;</span><span class="o">,</span> <span class="s">&quot;json:target/cucumber.json&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunCucumberFeatures</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://4.bp.blogspot.com/-RGW7oSAChOQ/UWXmqPsYh6I/AAAAAAAAA4Y/cDH-YyVcpgs/s1600/screenshot01.png" alt="medium" /></p>

<br/>


<p><img src="http://3.bp.blogspot.com/-FkF8ZO6r6co/UWXnUNjqjII/AAAAAAAAA4g/obtSC7BS6kI/s1600/screenshot02.png" alt="medium" /></p>

<p>Enfin, pour rappel, mon usecase étant de tester mon application web en boite noire, un prérequis était que mon application web soit démarrée au préalable.</p>

<p>Pour ce faire, le plugin maven Jetty (ou Tomcat au choix) a été utilisé et branché sur la phase de pré-integration.</p>

<p>Lors de l&#8217;exécution des tests en mode développement (ie. en les lançant comme un TU ou à l&#8217;aide du plugin Cucumber JVM via l&#8217;IDE), un profil n&#8217;exécutant pas le plugin failsafe mais uniquement le démarrage du jetty/tomcat embarqué a été utilisé.</p>

<h1>Pour aller plus loin&hellip;</h1>

<ul>
<li>article sur les limitations de Cucumber JVM pour le partage de données entre steps : <a href="http://zsoltfabok.com/blog/2012/09/cucumber-jvm-hooks/">http://zsoltfabok.com/blog/2012/09/cucumber-jvm-hooks/</a></li>
<li>page de fluentLenium : <a href="https://github.com/FluentLenium/FluentLenium">https://github.com/FluentLenium/FluentLenium</a></li>
<li>page des webDriver de Selenium : <a href="http://docs.seleniumhq.org/docs/03_webdriver.jsp">http://docs.seleniumhq.org/docs/03_webdriver.jsp</a></li>
<li>code : <a href="http://github.com/jetoile/fluentlenium-cucumber/">http://github.com/jetoile/fluentlenium-cucumber/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FluentLenium Et Cucumber JVM Sont Sur Un Bateau...]]></title>
    <link href="http://blog.jetoile.fr/2013/03/fluentlenium-et-cucumber-jvm-sont-sur.html"/>
    <updated>2013-03-14T16:39:36+01:00</updated>
    <id>http://blog.jetoile.fr/2013/03/fluentlenium-et-cucumber-jvm-sont-sur</id>
    <content type="html"><![CDATA[<p><img src="http://4.bp.blogspot.com/-R3ORi15Ei3Y/UTmwoq5A2II/AAAAAAAAA3o/uaIMSSZlq38/s1600/logo.png" alt="left-small" /></p>

<p>Dans un <a href="http://blog.jetoile.fr/2013/03/demarrer-une-webapp-en-mode-embedded.html">article précédent</a>, j&#8217;avais abordé comment il était possible de démarrer une application web dans un conteneur de Servlet de manière embedded au sein de la phase integration de Maven. Bien sûr, cela n&#8217;a pas été fait que pour l&#8217;exercice de style et il y avait une petite idée derrière : pouvoir exécuter des tests d&#8217;acceptance en mode boite noire sur l&#8217;application.</p>

<p>Pour faire les tests d&#8217;acceptance, le choix de Cucumber JVM a été fait afin de permettre l&#8217;expression de tests d&#8217;acceptance avec une sémantique utilisant le pattern <strong>Given/When/Then</strong> mais également afin de permettre à des non développeurs de comprendre/écrire les scénarii de test à exécuter.</p>

<p>L&#8217;application à tester étant une application web, un besoin s&#8217;est fait sentir de tester la partie rendue. Dans cet article, lorsque l&#8217;on parlera de tester la partie rendue, il sera question de vérifier que l&#8217;élément recherché se trouve bien dans le document html remonté dans le navigateur web. Pour rappel (cf. le paragraphe Contexte de ce <a href="2013/03/demarrer-une-webapp-en-mode-embedded.html">post</a>), l&#8217;application testée s&#8217;appuie sur un framework web java de type Struts2.</p>

<p>Aussi, il ne sera pas question, ici, de tester le rendu dans différents navigateurs.</p>

<p>Il a été décidé de partir sur une solution s&#8217;appuyant sur un runtime à base de Selenium : en effet, un besoin latent étant, à terme, de tester le rendu de l&#8217;application web sur les différents navigateurs, cette solution semblait correspondre le mieux aux besoins.</p>

<p>Bref, passons ce besoin pour revenir à notre objectif premier, à savoir, vérifier la présence des éléments dans l&#8217;arbre DOM remonté par l&#8217;application web.</p>

<p>Pour résumer, il a été décidé de partir sur :</p>

<ul>
<li>Cucumber JVM pour la partie représentation/écriture des scénarii,</li>
<li>Selenium pour la partie exécution des tests.</li>
</ul>


<p>Cependant, la syntaxe sur la partie WebDriver de Selenium 2 étant assez verbeuse, il a été décidé d&#8217;utiliser le framework FluentLenium qui offre une API plus simple et plus naturelle (enfin plus fluent quoi! ;&ndash;) ). En outre, en plus d&#8217;une API plus facile d&#8217;utilisation, la notion native de Page de FluentLenium poussant à mieux découpler la représentation d&#8217;une page et son test, cela a joué en sa faveur ;&ndash;)</p>

<p>Ainsi, cet article présentera comment il a été possible d&#8217;intégrer Cucumber JVM avec FluentLenium afin de pouvoir faire tourner des tests avec Selenium.</p>

<p>A noter que je ne m&#8217;attarderai pas, dans cet article, à présenter exhaustivement les différents protagonistes mais seulement les quelques points qu&#8217;il est nécessaires de connaitre afin d&#8217;intégrer ensemble ces différents framework.</p>

<p>[update] Suite à discussion avec la créatrice de FluentLenium, un autre article a été initié et apporte de nombreux compléments mais également correction à cet article. Pour en savoir, plus, rendez vous <a href="http://blog.jetoile.fr/2013/04/fluentlenium-et-cucumber-jvm-complement.html">ici</a>&hellip;</p>

<!-- more -->


<h1>Présentation des protagonistes</h1>

<h2>Cucumber JVM</h2>

<p><img src="http://2.bp.blogspot.com/-vb7zd_BqITk/UTmwyd4yWsI/AAAAAAAAA3w/tYVxH4hxlig/s1600/cucumber2.jpg" alt="center" /></p>

<p><a href="https://github.com/cucumber/cucumber-jvm">Cucumber JVM</a> est un fork Java de <a href="http://cukes.info/">Cucumber</a> inialement développé en Ruby.</p>

<p>Tout comme <a href="http://jbehave.org/">JBehave</a>, il est orienté BDD (<em>Behaviour Driven Development</em>) et il permet d&#8217;écrire ses <strong>scénarii</strong> de tests en suivant le pattern <strong>Given/When/Then</strong> qui correspond à déterminer un ensemble de <a href="https://github.com/cucumber/cucumber/wiki/Step-Definitions">Step</a>.</p>

<p>Ces scénarii s&#8217;écrivent dans des fichiers <strong>features</strong> qui sont lus par Cucumber JVM. Ce dernier se charge alors de faire correspondre les <strong>Steps</strong> avec les fixtures associés. Ces <strong>steps</strong> sont des méthodes Java annotées par :</p>

<ul>
<li>@Given(value = &ldquo;&rdquo;)</li>
<li>@When(value = &ldquo;&rdquo;)</li>
<li>@Then(value = &ldquo;&rdquo;)</li>
</ul>


<p>A noter que seule la valeur de l&#8217;annotation est utilisée par Cucumber JVM.</p>

<p>Alors que les steps à la sémantique Given permettront de poser les conditions nécessaires à l&#8217;exécution du scénario, les steps When exécuteront l&#8217;action à tester et les steps Then testeront que tout s&#8217;est bien passé en utilisant le framework d&#8217;assertion de son choix tels que JUnit, Fest-assert et/ou Harmcrest.</p>

<p>A noter également que pour passer un état d&#8217;une Step à une autre, Cucumber JVM nous oblige à stocker ces derniers dans des variables de classe ou à passer par son mécanisme d&#8217;injection à l&#8217;aide de framework IoC tels que <a href="http://picocontainer.codehaus.org/">Picocontainer</a>.</p>

<p>Ainsi, on peut résumer grossièrement en disant qu&#8217;un scénario est écrit dans un fichier <strong>feature</strong> et est composé d&#8217;un ensemble de Step qui sont associés à des méthodes qui correspondent aux différentes <strong>fixtures</strong>.</p>

<p>Pour plus d&#8217;informations sur le BDD, je vous renvoie sur un <a href="http://blog.soat.fr/2011/06/breizhcamp-behaviour-driven-development-par-olivier-billard-et-thierry-henrio/">compte rendu</a> d&#8217;une présentation d&#8217;Olivier Billard et de Thierry Henrio réalisé au BreizhCamp que j&#8217;avais fait à l&#8217;époque.</p>

<h2>Selenium 2</h2>

<p><img src="http://4.bp.blogspot.com/-xOJkyRycXEU/UTmxGd1a-nI/AAAAAAAAA4A/kMPuTOc5tpY/s1600/big-logo.png" alt="center" /></p>

<p>Dans notre cas d&#8217;usage, il y a assez peu de chose à dire sur <a href="http://docs.seleniumhq.org/">Selenium</a> si ce n&#8217;est qu&#8217;il permet, en fournissant différents <strong>WebDriver</strong>, de tester le rendu d&#8217;une page HTML en simulant différentes actions telles que le submit de formulaires, le clique d&#8217;un bouton et en allant chercher différents éléments dans la page rendue.</p>

<p>Il propose différentes implémentations de WebDriver tels que <strong>FirefoxDriver</strong> ou <strong>HtmlUnitDriver</strong>.</p>

<p>Selenium offre également la possibilité d&#8217;exécuter les navigateurs qu&#8217;il lance sur différentes machines via Selenium Server mais, dans notre cas, cette fonctionnalité ne sera pas utile. De même, il ne sera pas abordé la partie Selenium IDE qui est peu exploitable car difficilement maintenable. En effet, il est courant et même fortement recommandé de séparer, pour des raisons évidentes, les scénarii à tester du rendu de la page (par exemple en utilisant le <a href="http://docs.seleniumhq.org/docs/06_test_design_considerations.jsp#page-object-design-pattern">Page Object Design Pattern</a>).</p>

<p>Les liens suivants détaillent plus précisément ces différents points :</p>

<ul>
<li><a href="http://fr.slideshare.net/MathildeLemee/selenium-testng-selenium-grid-best-practices">http://fr.slideshare.net/MathildeLemee/selenium-testng-selenium-grid-best-practices</a></li>
<li><a href="http://docs.seleniumhq.org/docs/03_webdriver.jsp#selenium-webdriver-api-commands-and-operations">http://docs.seleniumhq.org/docs/03_webdriver.jsp#selenium-webdriver-api-commands-and-operations</a></li>
</ul>


<h2>FluentLenium</h2>

<p><img src="http://1.bp.blogspot.com/-fyH1CNEBvIw/UTmxNk5WZTI/AAAAAAAAA4I/obgbEW5Ae6w/s1600/code.png" alt="center" /></p>

<p><a href="https://github.com/FluentLenium/FluentLenium">FluentLenium</a> est un framework utilisant Selenium mais proposant une API plus simple et plus naturelle que celle offerte par ce dernier.</p>

<p>Il a été pensé pour s&#8217;intégrer à des tests exécutés avec JUnit ou TestNG et se charge donc d&#8217;initialiser le <strong>WebDriver</strong> Selenium à chaque fois qu&#8217;il exécute un test.</p>

<p>Pour ce faire, il utilise, au moment de l&#8217;écriture de ces lignes, le mécanisme de <strong>Rule</strong> JUnit qui fait, grosso modo, comme le @Before de JUnit mais qui peut être partagé entre les différentes classes de test.</p>

<p>En outre, FluentLenium s&#8217;appuie sur la notion de <strong>FluentPage</strong> et de <strong>FluentTest</strong>. En fait, pour faire simple, les classes de tests doivent étendre FluentTest, ce qui permet à toutes les méthodes annotées par @Test d&#8217;initialiser le WebDriver Selenium. La classe peut, de plus, bénéficier des méthodes portées par FluentTest.</p>

<p>La notion de FluentPage permet, quant à elle, de représenter une page (au sens HTML). Cette implémentation du <a href="http://docs.seleniumhq.org/docs/06_test_design_considerations.jsp#page-object-design-pattern">Page Object Design Pattern</a> incite ainsi l&#8217;utilisateur à découpler le test du contenu de la page qui sera alors la seule à être garante du rendu.</p>

<p>Enfin, via l&#8217;annotation <strong>Page</strong>, les classes qui étendent FluentPage peuvent être injectées directement dans l&#8217;implémentation du FluentTest. Les liens suivants détaillent plus précisément ces différents points :</p>

<ul>
<li><a href="http://fr.slideshare.net/MathildeLemee/fluentlenium">http://fr.slideshare.net/MathildeLemee/fluentlenium</a></li>
<li><a href="https://github.com/FluentLenium/FluentLenium">https://github.com/FluentLenium/FluentLenium</a></li>
</ul>


<h1>Etude sur la mise en oeuvre</h1>

<p>On a vu dans le paragraphe précédent quelques-unes des notions nécessaires à l&#8217;intégration de nos trois comparses.</p>

<p>Cependant, il est intéressant de noter que Cucumber JVM et FluentLenium s&#8217;appuient sur deux paradigmes potentiellement opposés. En effet, alors que Cucumber JVM dispose d&#8217;une représentation par Step formalisé par des méthodes java, FluentLenium propose une granularité par méthode.</p>

<p>En outre, deux points sont primordiaux :</p>

<ul>
<li>FluentLenium s&#8217;appuie sur la notion de Rule JUnit pour instancier, démarrer puis stopper le webDriver,</li>
<li>Cucumber JVM ne supporte pas la <a href="https://github.com/cucumber/cucumber-jvm/issues/393">notion de Rule</a> et refuse tout autre Runner différent que le sien.</li>
</ul>


<p>Bien sûr, on peut se douter qu&#8217;il est possible de contourner le problème sinon cet article serait un peu mensongé&hellip; ;&ndash;)</p>

<p>En fait, la solution qui a été mise en place pour faire fonctionner conjointement ces deux framework est assez simple : faire que les classes déclarant les <strong>Steps</strong> Cucumber JVM délèguent à une classe étendant FluentTest les différentes actions et vérifications.</p>

<p>Cette classe pourra porter les différentes pages (au sens FluentLenium) et devra exposer les méthodes adéquates qui initialiseront et arrêteront le webDriver cible (méthodes fournies par FluentTest).</p>

<p>A titre informatif, le fait d&#8217;utiliser l&#8217;<em>Autocloseable</em> (et plus précisément le <em>try-with-resources</em>) de Java 7 s&#8217;est traduit par un échec puisque le driver doit rester actif entre les différentes Steps.</p>

<p>De même, essayer d&#8217;injecter via Picocontainer les pages ne fonctionne pas car, à ce jour, l&#8217;implémentation même de FluentLenium fait que les annotations @Page qui permettent d&#8217;initialiser et d&#8217;instancier les <strong>FluentPages</strong> doivent être dans une implémentation de <strong>FluentTest</strong>.</p>

<p>Ainsi, cela pourrait se traduire par le code suivant :</p>

<p><code>HomePageStep.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.Then</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.When</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fest.assertions.fluentlenium.FluentLeniumAssertions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomePageStep</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">FluentTestDelegator</span> <span class="n">fluentLeniumDelegate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * injection par pico donc pas besoin d&#39;initialiser le driver (deja fait par le delegator)</span>
</span><span class='line'><span class="cm">     * @param fluentLeniumDelegate</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">HomePageStep</span><span class="o">(</span><span class="n">FluentTestDelegator</span> <span class="n">fluentLeniumDelegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fluentLeniumDelegate</span> <span class="o">=</span> <span class="n">fluentLeniumDelegate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;I go on home page&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">homePageIsDisplayed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fluentLeniumDelegate</span><span class="o">.</span><span class="na">goTo</span><span class="o">(</span><span class="n">fluentLeniumDelegate</span><span class="o">.</span><span class="na">homePage</span><span class="o">).</span><span class="na">await</span><span class="o">().</span><span class="na">untilPage</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Then</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;home page is displayed&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">homePageIsDisplayed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FluentLeniumAssertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">fluentLeniumDelegate</span><span class="o">.</span><span class="na">homePage</span><span class="o">).</span><span class="na">isAt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;I submit the form&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">submitForm</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fluentLeniumDelegate</span><span class="o">.</span><span class="na">homePage</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ResultPageStep.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultPageStep</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">FluentTestDelegator</span> <span class="n">fluentLeniumDelegate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * injection par pico donc pas besoin d&#39;initialiser le driver (deja fait par le delegator)</span>
</span><span class='line'><span class="cm">     * @param fluentLeniumDelegate</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ResultPageStep</span><span class="o">(</span><span class="n">FluentTestDelegator</span> <span class="n">fluentLeniumDelegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fluentLeniumDelegate</span> <span class="o">=</span> <span class="n">fluentLeniumDelegate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Then</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;I am on result page&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">isOnPage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FluentLeniumAssertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">fluentLeniumDelegate</span><span class="o">.</span><span class="na">resultPage</span><span class="o">).</span><span class="na">isAt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>CommonStep.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.When</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommonStep</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">FluentTestDelegator</span> <span class="n">fluentLeniumDelegate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">StepHelper</span><span class="o">(</span><span class="n">FluentTestDelegator</span> <span class="n">fluentLeniumDelegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fluentLeniumDelegate</span> <span class="o">=</span> <span class="n">fluentLeniumDelegate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;I stop my driver&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">webDrivercloser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fluentLeniumDelegate</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>FluentTestDelegator.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.java.en.When</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.adapter.FluentTest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.annotation.Page</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.htmlunit.HtmlUnitDriver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openqa.selenium.remote.DesiredCapabilities</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FluentTestDelegator</span> <span class="kd">extends</span> <span class="n">FluentTest</span> <span class="kd">implements</span> <span class="n">AutoCloseable</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Page</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">HomePage</span> <span class="n">homePage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Page</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ResultPage</span> <span class="n">resultPage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FluentTestDelegator</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">    * Appel des operations faites par le Rule Junit de FluentTest</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">initFluent</span><span class="o">(</span><span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">()).</span><span class="na">withDefaultUrl</span><span class="o">(</span><span class="s">&quot;http://localhost:9090&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">//        initFluent(getDefaultDriver()).withDefaultUrl(&quot;http://localhost:9090&quot;);</span>
</span><span class='line'>        <span class="n">initTest</span><span class="o">();</span>
</span><span class='line'>        <span class="n">setDefaultConfig</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getDriver</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">quit</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>HomePage.jave</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.DataTable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.FluentPage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.domain.FluentList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.fluentlenium.core.domain.FluentWebElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">fest</span><span class="o">.</span><span class="na">assertions</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">fluentlenium</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">FilterConstructor</span><span class="o">.</span><span class="na">withText</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomePage</span> <span class="kd">extends</span> <span class="n">FluentPage</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;/webapp/home&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">isAt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">title</span><span class="o">()).</span><span class="na">containsIgnoringCase</span><span class="o">(</span><span class="s">&quot;homePage&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">submit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">submit</span><span class="o">(</span><span class="s">&quot;#searchForm &gt; form&quot;</span><span class="o">).</span><span class="na">await</span><span class="o">().</span><span class="na">untilPage</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ResultPage.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultPage</span> <span class="kd">extends</span> <span class="n">FluentPage</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;/webapp/result&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">isAt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">title</span><span class="o">()).</span><span class="na">containsIgnoringCase</span><span class="o">(</span><span class="s">&quot;resultPage&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>scenario1.feature</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># encoding: iso-8859-1
</span><span class='line'>
</span><span class='line'>Feature: homepage test
</span><span class='line'>
</span><span class='line'>  Scenario: homePage should be displayed
</span><span class='line'>    When I go on home page
</span><span class='line'>    Then home page is displayed
</span><span class='line'>    Then I stop my driver
</span><span class='line'>
</span><span class='line'>  Scenario: a submit on homePage should redirect to resultPage
</span><span class='line'>    When I go on home page
</span><span class='line'>    And I submit the form
</span><span class='line'>    Then I am on result page
</span><span class='line'>    Then I stop my driver
</span></code></pre></td></tr></table></div></figure>


<p>On constate que le code est un peu plus verbeux que ce qu&#8217;on aurait souhaité avoir mais cela fonctionne sans soucis.
A noter que via la méthode init de <strong>FluentTestDelegator</strong>, il est possible de préciser le <strong>webDriver</strong> à utiliser (dans notre cas, HtmlUnitDriver).</p>

<h1>Mise en oeuvre</h1>

<p>On a vu dans le paragraphe précédent comment il était possible de faire fonctionner conjointement Cucumber JVM et FluentLenium.</p>

<p>Du coup, il n&#8217;y a plus grand chose à rajouter dans ce paragraphe si ce n&#8217;est la configuration de notre chef d&#8217;orchestre (à savoir Maven) qui a été utilisé pour faire fonctionner tout ce beau monde&hellip; ;&ndash;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>hamcrest-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>batik<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>batik-ext<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- pas de montee de version de junit pour cause de conflit avec hamcrest --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>4.11<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exclusions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;exclusion&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>hamcrest-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/exclusion&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exclusions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>info.cukes<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>cucumber-junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>info.cukes<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>cucumber-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>info.cukes<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>cucumber-picocontainer<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.fluentlenium<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>fluentlenium-festassert<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exclusions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;exclusion&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>junit-dep<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/exclusion&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exclusions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.easytesting<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>fest-assert<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>   <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>                <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;artifactId&gt;</span>maven-failsafe-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;goal&gt;</span>integration-test<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;goal&gt;</span>verify<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;includes&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;include&gt;</span>**/RunCucumberFeatures.java<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/includes&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">cucumber.api.junit.Cucumber</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">Cucumber</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Cucumber.Options</span><span class="o">(</span><span class="n">features</span> <span class="o">=</span> <span class="s">&quot;classpath:fr/jetoile/webapp/acceptance&quot;</span><span class="o">,</span> <span class="n">format</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;pretty&quot;</span><span class="o">,</span> <span class="s">&quot;html:target/cucumber&quot;</span><span class="o">,</span> <span class="s">&quot;json:target/cucumber.json&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunCucumberFeatures</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>On a vu dans cet article (qui est la suite logique d&#8217;un <a href="http://blog.jetoile.fr/2013/03/demarrer-une-webapp-en-mode-embedded.html">article précédent</a>) comment il était possible de faire des tests d&#8217;acceptance en utilisant conjointement Cucumber JVM et FluentLenium.</p>

<p>A l&#8217;utilisation, cela s&#8217;avère agréable et rapide à écrire surtout avec quelques petits tweaks supplémentaires qui n&#8217;ont pas été exposés ici (profile Maven pour ne démarrer que le serveur embedded et exécution des scénarii Cucumber avec IntelliJ 12 avec possibilité de bénéficier du debugger que ce soit au niveau de l&#8217;exécution des tests (debugger ou utilisation d&#8217;un webDriver autre que HtmlUnitDriver) ou de l&#8217;application cible (via <code>mvnDebug</code>)).</p>

<p>Bref, en tout cas, même si la mise en oeuvre a été un peu galère, il a été possible de bénéficier du meilleur des deux framework sans avoir à se &ldquo;taper&rdquo; la lourdeux de Selenium&hellip; ;&ndash;).</p>

<p>Bien sûr, il est existe bien d&#8217;autres solutions mais je te laisse, précieux lecteur, le soin de les évaluer ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Démarrer Une Webapp en Mode Embedded Avec Maven]]></title>
    <link href="http://blog.jetoile.fr/2013/03/demarrer-une-webapp-en-mode-embedded.html"/>
    <updated>2013-03-06T15:26:29+01:00</updated>
    <id>http://blog.jetoile.fr/2013/03/demarrer-une-webapp-en-mode-embedded</id>
    <content type="html"><![CDATA[<p><img src="http://4.bp.blogspot.com/-2c2Ie9Tla54/UTaEjXrNaiI/AAAAAAAAA20/MWhTcyyJvMg/s1600/image.png" alt="left-small" /></p>

<p>La mouvance actuelle dit que tout projet qui se veut un minimum industrialisé doit pouvoir détecter les anomalies au plus tôt. Pour ce faire, il est dit qu&#8217;il doit disposer de tests, qu&#8217;ils soient unitaire, d&#8217;intégration, fonctionnel ou d&#8217;acceptance.</p>

<p> Pour adresser le problème des tests d&#8217;intégration, il est souvent utile de démarrer l&#8217;application cible de manière embedded.</p>

<p>Cette article montrera comment il est possible de faire pour un contexte donné.</p>

<p>En outre, vu que ce blog me sert également d&#8217;aide mémoire, cela me donnera une excuse pour marquer noir sur blanc des informations que je peine toujours à retrouver&hellip; ;&ndash;)</p>

<p>Pour les habitués de ce blog (oui, je sais, cela fait un moment que je n&#8217;ai rien écrit&hellip; ;&ndash;) , le plan sera toujours le même : dans un premier temps, le contexte sera décrit puis des ébauches de solutions seront proposées jusqu&#8217;à tendre vers celle qui a été retenue.</p>

<!-- more -->


<h1>Contexte</h1>

<p>Le contexte du projet est le suivant : l&#8217;application cible est composée de deux applications web qui suivent le même cycle de vie et qui sont dépendantes l&#8217;une de l&#8217;autre (au sens <em>runtime</em> en non compilation).</p>

<p>En effet, elle dispose d&#8217;une application web proposant un site web écrit en Java et utilisant un framework de type struts 2 (et qui sera nommée par la suite &ldquo;<em>application webapp</em>&rdquo;) et une application web servant un ensemble de ressources en proposant une interface REST (nommée par la suite &ldquo;<em>application rest</em>&rdquo;).</p>

<p>L&#8217;application webapp nécessitera, en plus de son rendu de page dynamique, des ressources offertes par l&#8217;application REST (appel ajax, &hellip;).</p>

<p><em>ndlr</em> : je sais que la mouvance actuelle dit que les framework web java sont le &ldquo;mal&rdquo; pour faire du web et qu&#8217;il est préférable de tendre vers une solution type framework javascript coté client. Cependant, dans notre cas, une forte contrainte SEO faisait qu&#8217;il était nécessaire de &ldquo;conserver&rdquo; un rendu dynamique des pages cotés serveur.</p>

<p>D&#8217;un point de vu technique, le projet s&#8217;appuiera sur Maven 3 (encore lui&hellip; ;&ndash;) ), et sur des technologies standards à base de Servlets (2.5+), de JSP, de JAX-RS, &hellip; enfin, de techno standard capable de tourner sur un conteneur de Servlet classique type Tomcat 6 ou 7.</p>

<p>L&#8217;arborescence du projet est la suivante :</p>

<p><img src="http://4.bp.blogspot.com/-1N_8WSbysb8/UTZKH2xIekI/AAAAAAAAA2c/itx2Qxav2CA/s1600/tree01.png" alt="center" /></p>

<p>Avant de commencer à rentrer dans le vif du sujet, il est important de remarquer qu&#8217;il existe de nombreux plugins Maven permettant de démarrer de manière <em>embedded</em> un artifact maven de type war via les goals adéquates (<code>mvn tomcat7:run</code>, <code>mvn jetty:run</code>, &hellip;). Cependant, pour rappel, notre objectif est de démarrer de manière conjointe nos deux applications web.</p>

<p>En outre, le but ultime (pour ceux qui ne l&#8217;auraient pas encore deviné ;&ndash;) ) étant d&#8217;exécuter de manière boite noire des tests d&#8217;integration/d&#8217;acceptance, le démarrage devra se faire dans un module Maven frère de nos deux modules webapp et restful.</p>

<p>L&#8217;arborescence attendue du projet est donc la suivante :</p>

<p><img src="http://2.bp.blogspot.com/-QYIOY3HI__s/UTZKLlWV1bI/AAAAAAAAA2k/HXtJ0QDW6BE/s1600/tree02.png" alt="center" /></p>

<p>Enfin, pour finir le tour de notre petit cahier des charges, le livrable généré ne devra pas dépendre de profils Maven particuliés (le but étant, bien sûr, de ne pas avoir un livrable dépendant d&#8217;une configuration donnée).</p>

<p>Cependant, afin d&#8217;avoir la main, lors des tests d&#8217;intégration/d&#8217;acceptance, sur le jeu de données qui sera injecté dans le système à tester, il devra être possible de modifier &ldquo;à chaud&rdquo; certaines configurations. Pour ce faire, une surcharge des fichiers de configuration des applications devra être faite.</p>

<p><em>ndlr</em> : l&#8217;application ayant un certain existant, elle ne dispose pas de fonctionnalités comme les <strong>Profile</strong> Spring ou l&#8217;utilisation de variables systèmes : toutes les propriétés de configuration se trouvent donc dans des fichiers properties ou dans des fichiers de contexte Spring.</p>

<h1>Le plugin tomcat 7</h1>

<p><img src="http://2.bp.blogspot.com/-vO0vp3GQG_4/UTbgJFKXJ5I/AAAAAAAAA3E/Z8EtqhZbPJU/s1600/tomcat.gif" alt="center" /></p>

<h2>Mise en oeuvre</h2>

<p>Le plugin <a href="http://tomcat.apache.org/maven-plugin-2.0/index.html">Maven Tomcat 7</a> est un plugin que j&#8217;apprécie pour sa simplicité d&#8217;utilisation et ses différentes <em>features</em> (merci <a href="https://twitter.com/olamy">@olamy</a> pour me l&#8217;avoir fait découvrir/redécouvrir ;&ndash;) ) et c&#8217;est donc naturellement que c&#8217;est le premier qui a été testé. De plus, la cible de déploiement étant Tomcat, cela tombait bien ;&ndash;) .</p>

<p>Pour répondre à notre cas d&#8217;usage, le plugin Tomcat 7 propose le goal <code>run-war-only</code> qui permet, via la configuration <code>&lt;warDirectory&gt;</code>, de préciser un répertoire où se trouve l&#8217;application web.</p>

<p>En effet, le war étant généré dans un module maven frère de celui où doit être démarré le Tomcat <em>embedded</em>, il doit, préalablement, être récupéré (en évitant, bien évidemment, les chemins relatifs). En outre, pour rappel, la nécessité de surcharger la configuration de certains fichiers à fait tendre la solution vers les étapes suivantes (opération spécifique à une application web) :</p>

<ul>
<li>récupération du war dans le repository maven,</li>
<li>dézippage du war dans le répertoire <code>target/webapp</code>,</li>
<li>copie des fichiers de configuration permettant la surcharge des fichiers de configuration de l&#8217;application dans le répertoire <code>target/webapp/WEB-INF/classes</code>,</li>
<li>un appel au goal <code>run-war-only</code> du plugin Tomcat en précisant l&#8217;emplacement du war éclaté à charger.</li>
</ul>


<p>Cela a été fait via la configuration Maven suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-dependency-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>unzip-webapp<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>compile<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>unpack<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactItems&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;artifactItem&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;groupId&gt;</span>${project.groupId}<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;artifactId&gt;</span>webapp<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;version&gt;</span>${project.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;type&gt;</span>war<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;/artifactItem&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/artifactItems&gt;</span>
</span><span class='line'> 
</span><span class='line'>                <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/webapp<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>                <span class="nt">&lt;overWriteSnapshots&gt;</span>true<span class="nt">&lt;/overWriteSnapshots&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'> 
</span><span class='line'><span class="c">&lt;!--use to copy test resources into webapp classpath--&gt;</span>
</span><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-resources-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>copy-webapp-resources<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>process-test-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>copy-resources<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/webapp/WEB-INF/classes<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>                <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>      <span class="nt">&lt;resource&gt;</span>
</span><span class='line'>          <span class="nt">&lt;directory&gt;</span>src/test/resources/webapp<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>          <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/resource&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'> 
</span><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>tomcat-war-exec<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>run-war-only<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>pre-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;warDirectory&gt;</span>${project.build.directory}/webapp/<span class="nt">&lt;/warDirectory&gt;</span>
</span><span class='line'>                <span class="nt">&lt;fork&gt;</span>true<span class="nt">&lt;/fork&gt;</span>
</span><span class='line'>                <span class="nt">&lt;ignorePackaging&gt;</span>true<span class="nt">&lt;/ignorePackaging&gt;</span>
</span><span class='line'>                <span class="nt">&lt;contextFile&gt;</span>src/test/resources/webapp/context.xml<span class="nt">&lt;/contextFile&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>start-tomcat<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>pre-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>run<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>stop-tomcat<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>post-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>shutdown<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;port&gt;</span>9090<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>        <span class="nt">&lt;path&gt;</span>/<span class="nt">&lt;/path&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- les artéfacts des jars à mettre dans le classpath du serveur Tomcat tels que les drivers de connexion--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il est intéressant de noter plusieurs points :</p>

<ul>
<li>la précision du fichier <code>context.xml</code> qui contient, entre autre, le <strong>contextName</strong> de l&#8217;application web mais surtout, dans notre cas, la déclaration de notre base de données dans l&#8217;annuaire JNDI,</li>
<li>le rajout éventuel de jar dans le classpath serveur,</li>
<li>le fait de lancer le serveur en phase de <code>pre-integration-test</code> et de l&#8217;éteindre en phase de <code>post-integration-test</code>.</li>
</ul>


<p>Cependant, pour ceux qui auraient suivi, je rappelle que l&#8217;application cible était composée de deux applications web : webapp et restful&hellip;</p>

<p>Malheureusement, sauf erreur de ma part, le plugin Maven Tomcat7 ne propose pas de déployer deux applications web simultanément lorsque ces dernières sont éclatées dans un répertoire.</p>

<h2>Conclusion</h2>

<p>On a vu dans ce paragraphe comment il était possible de déployer simplement, via le plugin Maven Tomcat 7, une application web de manière <em>embedded</em> dans un processus Maven.</p>

<p>Malheureusement, le goal qui nous intéressait ne permettant pas démarrer deux applications web simultanément, il n&#8217;a pas pu répondre à notre besoin.</p>

<h1>Le plugin Jetty</h1>

<p><img src="http://3.bp.blogspot.com/-9CX6HuFGgPA/UTbgPT2O6gI/AAAAAAAAA3M/JQ_lOt2NnsI/s1600/jetty_logo.png" alt="center" /></p>

<h2>Mise en oeuvre</h2>

<p>Dans cette deuxième tentative, c&#8217;est le <a href="http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin">plugin Maven Jetty</a> qui a été utilisé.</p>

<p>Même s&#8217;il n&#8217;est pas la cible de déploiement, nos applications étant assez standards, il a été acté que le conteneur n&#8217;aurait que peu d&#8217;impacts sur les tests d&#8217;intégration/d&#8217;acceptance.</p>

<p>La philosophie mise en oeuvre est similaire à celle choisie avec le plugin Maven Tomcat 7, à savoir :</p>

<ul>
<li>récupération du war dans le repository maven,</li>
<li>dézippage du war dans le répertoire <code>target/webapp</code>,</li>
<li>copie des fichiers de configuration dans le répertoire <code>target/webapp/WEB-INF/classes</code>,</li>
<li>appel du bon goal du plugin Jetty en précisant l&#8217;emplacement du war éclaté à charger.</li>
</ul>


<p>Bien sûr, ici, le goal est propre au plugin Jetty, à savoir <code>run-exploded</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jetty-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>7.6.9.v20130131<span class="nt">&lt;/version&gt;</span>    
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>jetty-war-exec<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>run-exploded<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>pre-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;daemon&gt;</span>true<span class="nt">&lt;/daemon&gt;</span>            
</span><span class='line'>                <span class="nt">&lt;jvmArgs&gt;</span><span class="c">&lt;!-- eventuellement les options jvm--&gt;</span><span class="nt">&lt;/jvmArgs&gt;</span>
</span><span class='line'>                <span class="nt">&lt;scanIntervalSeconds&gt;</span>0<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class='line'>                <span class="nt">&lt;jettyConfig&gt;</span>${basedir}/src/test/resources/jetty.xml<span class="nt">&lt;/jettyConfig&gt;</span>
</span><span class='line'>                <span class="nt">&lt;webAppConfig&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;contextPath&gt;</span>/webapp<span class="nt">&lt;/contextPath&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;jettyEnvXml&gt;</span>${basedir}/src/test/resources/webapp/jetty-webapp-context.xml<span class="nt">&lt;/jettyEnvXml&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/webAppConfig&gt;</span>
</span><span class='line'>                <span class="nt">&lt;war&gt;</span>${project.build.directory}/webapp<span class="nt">&lt;/war&gt;</span>
</span><span class='line'>                <span class="nt">&lt;connectors&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                       <span class="nt">&lt;host&gt;</span>127.0.0.1<span class="nt">&lt;/host&gt;</span>
</span><span class='line'>                       <span class="nt">&lt;port&gt;</span>9090<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;/connector&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/connectors&gt;</span>
</span><span class='line'> 
</span><span class='line'>                <span class="nt">&lt;contextHandlers&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;contextHandler</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                       <span class="nt">&lt;war&gt;</span>${project.build.directory}/restful<span class="nt">&lt;/war&gt;</span>
</span><span class='line'>                       <span class="nt">&lt;contextPath&gt;</span>/restful<span class="nt">&lt;/contextPath&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;/contextHandler&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/contextHandlers&gt;</span>
</span><span class='line'> 
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'> 
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>stop-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>post-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>stop<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;stopPort&gt;</span>9999<span class="nt">&lt;/stopPort&gt;</span>
</span><span class='line'>                <span class="nt">&lt;stopKey&gt;</span>stopKey<span class="nt">&lt;/stopKey&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- eventuellement les jar à ajouter au classpath du conteneur de servlet--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut remarquer que la configuration du plugin Jetty est beaucoup plus verbeuse que celle du plugin Tomcat avec, notamment, la nécessité de préciser :</p>

<ul>
<li>un fichier de configuration jetty permettant, dans notre cas, de préciser que Jetty doit démarrer son module pour charger l&#8217;annuaire JNDI (fichier <code>jetty.xml</code>),</li>
<li>la déclaration d&#8217;un connecteur pour pouvoir préciser le port de lancement du conteneur de Servlet,</li>
<li>le fichier <code>jetty-webapp-context.xml</code> pendant du <code>context.xml</code> de Tomcat,</li>
<li>l&#8217;obligation de rajouter l&#8217;élément <code>contextHandlers</code> pour pouvoir déclarer la deuxième application web à démarrer.</li>
</ul>


<p>A noter qu&#8217;il est également possible de déclarer les deux applications web via des <strong>contextHandler</strong>, permettant d&#8217;avoir une configuration plus symétrique :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jetty-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>7.6.9.v20130131<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>jetty-war-exec<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>start<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>pre-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;daemon&gt;</span>true<span class="nt">&lt;/daemon&gt;</span>
</span><span class='line'>                <span class="nt">&lt;jvmArgs&gt;&lt;/jvmArgs&gt;</span>
</span><span class='line'>                <span class="nt">&lt;scanIntervalSeconds&gt;</span>0<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class='line'>                <span class="nt">&lt;jettyConfig&gt;</span>${basedir}/src/test/resources/jetty.xml<span class="nt">&lt;/jettyConfig&gt;</span>
</span><span class='line'>                <span class="nt">&lt;webAppConfig&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;jettyEnvXml&gt;</span>${basedir}/src/test/resources/webapp/jetty-webapp-context.xml<span class="nt">&lt;/jettyEnvXml&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/webAppConfig&gt;</span>
</span><span class='line'>                <span class="nt">&lt;connectors&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;host&gt;</span>127.0.0.1<span class="nt">&lt;/host&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;port&gt;</span>9090<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;/connector&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/connectors&gt;</span>
</span><span class='line'> 
</span><span class='line'>                <span class="nt">&lt;contextHandlers&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;contextHandler</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;war&gt;</span>${project.build.directory}/webapp<span class="nt">&lt;/war&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;contextPath&gt;</span>/webapp<span class="nt">&lt;/contextPath&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;/contextHandler&gt;</span>
</span><span class='line'> 
</span><span class='line'>                     <span class="nt">&lt;contextHandler</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;war&gt;</span>${project.build.directory}/restful<span class="nt">&lt;/war&gt;</span>
</span><span class='line'>                         <span class="nt">&lt;contextPath&gt;</span>/restful<span class="nt">&lt;/contextPath&gt;</span>
</span><span class='line'>                     <span class="nt">&lt;/contextHandler&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/contextHandlers&gt;</span>
</span><span class='line'> 
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>stop-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>post-integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>stop<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;stopPort&gt;</span>9999<span class="nt">&lt;/stopPort&gt;</span>
</span><span class='line'>                <span class="nt">&lt;stopKey&gt;</span>stopKey<span class="nt">&lt;/stopKey&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>         
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A titre informatif, le fichier <code>jetty.xml</code> permettant de charger le module JNDI est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&gt;</span>
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'><span class="nt">&lt;Configure</span> <span class="na">id=</span><span class="s">&quot;Server&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.Server&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Array</span> <span class="na">id=</span><span class="s">&quot;plusConfig&quot;</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.webapp.WebInfConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.webapp.WebXmlConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.webapp.MetaInfConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.webapp.FragmentConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.plus.webapp.EnvConfiguration<span class="nt">&lt;/Item&gt;</span>                  <span class="c">&lt;!-- add for JNDI --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.plus.webapp.PlusConfiguration<span class="nt">&lt;/Item&gt;</span>                 <span class="c">&lt;!-- add for JNDI --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.annotations.AnnotationConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.webapp.JettyWebXmlConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>org.eclipse.jetty.webapp.TagLibConfiguration<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nt">&lt;Call</span> <span class="na">name=</span><span class="s">&quot;setAttribute&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Arg&gt;</span>org.eclipse.jetty.webapp.configuration<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Arg&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Ref</span> <span class="na">id=</span><span class="s">&quot;plusConfig&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>et le fichier <code>jetty-webapp-context.xml</code> pendant du fichier <code>context.xml</code> de Tomcat est :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&gt;</span>
</span><span class='line'> 
</span><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> 
</span><span class='line'><span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;myoracle&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.plus.jndi.Resource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Arg&gt;</span>jdbc/myoracle<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Arg&gt;</span>
</span><span class='line'>        <span class="nt">&lt;New</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span><span class="nt">&gt;</span>driver.jdbc.class<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span><span class="nt">&gt;</span>jdbc:url_connection<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>login<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>password<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'><span class="nt">&lt;/New&gt;</span>
</span><span class='line'> 
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>On a pu constater que l&#8217;utilisation du plugin Maven Jetty a parfaitement répondu à notre petit cahier des charges. C&#8217;est vrai que cela peut sembler un peu poussif mais cela est surtout dû au fonctionnement même de Jetty.</p>

<p>Enfin, il est à noter que la configuration présentée dans le paragraphe précédent ne fonctionne pas pour la version 6 du plugin (connecteurs et packages différents, &hellip;) et qu&#8217;elle a été testé avec la version 7.6.9.v20130131. Normalement, cela devrait fonctionner avec la version 8 mais n&#8217;ayant pas testé, je ne pourrais pas le certifier&hellip;</p>

<h1>Conclusion</h1>

<p>En conclusion, cet article avait pour objectif de présenter quelques-unes des façons de démarrer de manière <em>embedded</em> des applications web dans des conteneurs de Servlet légés au sein d&#8217;un processus Maven.</p>

<p>Cela peut, notamment, être utile pour initialiser une ou plusieurs applications au sein du processus de tests pour, par exemple, exécuter de manière automatisée des tests d&#8217;intégration ou d&#8217;acceptance, chose qui est de plus en plus courante au sein de nos usine d&#8217;intégration continue.</p>

<p>Bien sûr, il existe de nombreuses autres solutions (par exemple, <a href="http://arquillian.org/">Arquillian</a>) mais aussi d&#8217;autres approches (le choix retenu ici a été celui de la boite noire) qui ont toutes leurs avantages et leurs inconvénients par rapport à un besoin donné.</p>
]]></content>
  </entry>
  
</feed>
