<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tomcat | Jetoile]]></title>
  <link href="https://blog.jetoile.fr/blog/categories/tomcat/atom.xml" rel="self"/>
  <link href="https://blog.jetoile.fr/"/>
  <updated>2018-10-28T18:01:31+01:00</updated>
  <id>https://blog.jetoile.fr/</id>
  <author>
    <name><![CDATA[Khanh Maudoux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Démarrer une webapp en mode embedded avec Maven]]></title>
    <link href="https://blog.jetoile.fr/2013/03/demarrer-une-webapp-en-mode-embedded.html"/>
    <updated>2013-03-06T15:26:29+01:00</updated>
    <id>https://blog.jetoile.fr/2013/03/demarrer-une-webapp-en-mode-embedded</id>
    <content type="html"><![CDATA[<p><img src="http://4.bp.blogspot.com/-2c2Ie9Tla54/UTaEjXrNaiI/AAAAAAAAA20/MWhTcyyJvMg/s1600/image.png" alt="left-small" /></p>

<p>La mouvance actuelle dit que tout projet qui se veut un minimum industrialisé doit pouvoir détecter les anomalies au plus tôt. Pour ce faire, il est dit qu'il doit disposer de tests, qu'ils soient unitaire, d'intégration, fonctionnel ou d'acceptance.</p>

<p> Pour adresser le problème des tests d'intégration, il est souvent utile de démarrer l'application cible de manière embedded.</p>

<p>Cette article montrera comment il est possible de faire pour un contexte donné.</p>

<p>En outre, vu que ce blog me sert également d'aide mémoire, cela me donnera une excuse pour marquer noir sur blanc des informations que je peine toujours à retrouver&hellip; ;&ndash;)</p>

<p>Pour les habitués de ce blog (oui, je sais, cela fait un moment que je n'ai rien écrit&hellip; ;&ndash;) , le plan sera toujours le même : dans un premier temps, le contexte sera décrit puis des ébauches de solutions seront proposées jusqu'à tendre vers celle qui a été retenue.</p>

<!-- more -->


<h1>Contexte</h1>

<p>Le contexte du projet est le suivant : l'application cible est composée de deux applications web qui suivent le même cycle de vie et qui sont dépendantes l'une de l'autre (au sens <em>runtime</em> en non compilation).</p>

<p>En effet, elle dispose d'une application web proposant un site web écrit en Java et utilisant un framework de type struts 2 (et qui sera nommée par la suite &ldquo;<em>application webapp</em>&rdquo;) et une application web servant un ensemble de ressources en proposant une interface REST (nommée par la suite &ldquo;<em>application rest</em>&rdquo;).</p>

<p>L'application webapp nécessitera, en plus de son rendu de page dynamique, des ressources offertes par l'application REST (appel ajax, &hellip;).</p>

<p><em>ndlr</em> : je sais que la mouvance actuelle dit que les framework web java sont le &ldquo;mal&rdquo; pour faire du web et qu'il est préférable de tendre vers une solution type framework javascript coté client. Cependant, dans notre cas, une forte contrainte SEO faisait qu'il était nécessaire de &ldquo;conserver&rdquo; un rendu dynamique des pages cotés serveur.</p>

<p>D'un point de vu technique, le projet s'appuiera sur Maven 3 (encore lui&hellip; ;&ndash;) ), et sur des technologies standards à base de Servlets (2.5+), de JSP, de JAX-RS, &hellip; enfin, de techno standard capable de tourner sur un conteneur de Servlet classique type Tomcat 6 ou 7.</p>

<p>L'arborescence du projet est la suivante :</p>

<p><img src="http://4.bp.blogspot.com/-1N_8WSbysb8/UTZKH2xIekI/AAAAAAAAA2c/itx2Qxav2CA/s1600/tree01.png" alt="center" /></p>

<p>Avant de commencer à rentrer dans le vif du sujet, il est important de remarquer qu'il existe de nombreux plugins Maven permettant de démarrer de manière <em>embedded</em> un artifact maven de type war via les goals adéquates (<code>mvn tomcat7:run</code>, <code>mvn jetty:run</code>, &hellip;). Cependant, pour rappel, notre objectif est de démarrer de manière conjointe nos deux applications web.</p>

<p>En outre, le but ultime (pour ceux qui ne l'auraient pas encore deviné ;&ndash;) ) étant d'exécuter de manière boite noire des tests d'integration/d'acceptance, le démarrage devra se faire dans un module Maven frère de nos deux modules webapp et restful.</p>

<p>L'arborescence attendue du projet est donc la suivante :</p>

<p><img src="http://2.bp.blogspot.com/-QYIOY3HI__s/UTZKLlWV1bI/AAAAAAAAA2k/HXtJ0QDW6BE/s1600/tree02.png" alt="center" /></p>

<p>Enfin, pour finir le tour de notre petit cahier des charges, le livrable généré ne devra pas dépendre de profils Maven particuliés (le but étant, bien sûr, de ne pas avoir un livrable dépendant d'une configuration donnée).</p>

<p>Cependant, afin d'avoir la main, lors des tests d'intégration/d'acceptance, sur le jeu de données qui sera injecté dans le système à tester, il devra être possible de modifier &ldquo;à chaud&rdquo; certaines configurations. Pour ce faire, une surcharge des fichiers de configuration des applications devra être faite.</p>

<p><em>ndlr</em> : l'application ayant un certain existant, elle ne dispose pas de fonctionnalités comme les <strong>Profile</strong> Spring ou l'utilisation de variables systèmes : toutes les propriétés de configuration se trouvent donc dans des fichiers properties ou dans des fichiers de contexte Spring.</p>

<h1>Le plugin tomcat 7</h1>

<p><img src="http://2.bp.blogspot.com/-vO0vp3GQG_4/UTbgJFKXJ5I/AAAAAAAAA3E/Z8EtqhZbPJU/s1600/tomcat.gif" alt="center" /></p>

<h2>Mise en oeuvre</h2>

<p>Le plugin <a href="http://tomcat.apache.org/maven-plugin-2.0/index.html">Maven Tomcat 7</a> est un plugin que j'apprécie pour sa simplicité d'utilisation et ses différentes <em>features</em> (merci <a href="https://twitter.com/olamy">@olamy</a> pour me l'avoir fait découvrir/redécouvrir ;&ndash;) ) et c'est donc naturellement que c'est le premier qui a été testé. De plus, la cible de déploiement étant Tomcat, cela tombait bien ;&ndash;) .</p>

<p>Pour répondre à notre cas d'usage, le plugin Tomcat 7 propose le goal <code>run-war-only</code> qui permet, via la configuration <code>&lt;warDirectory&gt;</code>, de préciser un répertoire où se trouve l'application web.</p>

<p>En effet, le war étant généré dans un module maven frère de celui où doit être démarré le Tomcat <em>embedded</em>, il doit, préalablement, être récupéré (en évitant, bien évidemment, les chemins relatifs). En outre, pour rappel, la nécessité de surcharger la configuration de certains fichiers à fait tendre la solution vers les étapes suivantes (opération spécifique à une application web) :</p>

<ul>
<li>récupération du war dans le repository maven,</li>
<li>dézippage du war dans le répertoire <code>target/webapp</code>,</li>
<li>copie des fichiers de configuration permettant la surcharge des fichiers de configuration de l'application dans le répertoire <code>target/webapp/WEB-INF/classes</code>,</li>
<li>un appel au goal <code>run-war-only</code> du plugin Tomcat en précisant l'emplacement du war éclaté à charger.</li>
</ul>


<p>Cela a été fait via la configuration Maven suivante :</p>

<p>```xml
<plugin>
    <artifactId>maven-dependency-plugin</artifactId>
    <executions>
        <execution>
            <id>unzip-webapp</id>
            <phase>compile</phase>
            <goals>
                <goal>unpack</goal>
            </goals>
            <configuration>
                <artifactItems>
                     <artifactItem>
                         <groupId>${project.groupId}</groupId>
                         <artifactId>webapp</artifactId>
                         <version>${project.version}</version>
                         <type>war</type>
                     </artifactItem>
                </artifactItems>
 
                <outputDirectory>${project.build.directory}/webapp</outputDirectory>
                <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
        </execution>
    </executions>
</plugin>
 </p>

<!--use to copy test resources into webapp classpath-->


<p><plugin>
    <artifactId>maven-resources-plugin</artifactId>
    <executions>
        <execution>
            <id>copy-webapp-resources</id>
            <phase>process-test-resources</phase>
            <goals>
                <goal>copy-resources</goal>
            </goals>
            <configuration>
                <outputDirectory>${project.build.directory}/webapp/WEB-INF/classes</outputDirectory>
                <resources>
      <resource>
          <directory>src/test/resources/webapp</directory>
          <filtering>true</filtering>
      </resource>
                </resources>
            </configuration>
        </execution>
    </executions>
</plugin>
 
<plugin>
    <groupId>org.apache.tomcat.maven</groupId>
    <artifactId>tomcat7-maven-plugin</artifactId>
    <version>2.0</version>
 
    <executions>
        <execution>
            <id>tomcat-war-exec</id>
            <goals>
                <goal>run-war-only</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
                <warDirectory>${project.build.directory}/webapp/</warDirectory>
                <fork>true</fork>
                <ignorePackaging>true</ignorePackaging>
                <contextFile>src/test/resources/webapp/context.xml</contextFile>
            </configuration>
        </execution>
        <execution>
            <id>start-tomcat</id>
            <phase>pre-integration-test</phase>
            <goals>
                <goal>run</goal>
            </goals>
            <configuration>
            </configuration>
        </execution>
        <execution>
            <id>stop-tomcat</id>
            <phase>post-integration-test</phase>
            <goals>
                <goal>shutdown</goal>
            </goals>
        </execution>
    </executions>
 
    <configuration>
        <port>9090</port>
        <path>/</path>
    </configuration>
 
    <dependencies>
        <!-- les artéfacts des jars à mettre dans le classpath du serveur Tomcat tels que les drivers de connexion-->
    </dependencies>
</plugin>
```</p>

<p>Il est intéressant de noter plusieurs points :</p>

<ul>
<li>la précision du fichier <code>context.xml</code> qui contient, entre autre, le <strong>contextName</strong> de l'application web mais surtout, dans notre cas, la déclaration de notre base de données dans l'annuaire JNDI,</li>
<li>le rajout éventuel de jar dans le classpath serveur,</li>
<li>le fait de lancer le serveur en phase de <code>pre-integration-test</code> et de l'éteindre en phase de <code>post-integration-test</code>.</li>
</ul>


<p>Cependant, pour ceux qui auraient suivi, je rappelle que l'application cible était composée de deux applications web : webapp et restful&hellip;</p>

<p>Malheureusement, sauf erreur de ma part, le plugin Maven Tomcat7 ne propose pas de déployer deux applications web simultanément lorsque ces dernières sont éclatées dans un répertoire.</p>

<h2>Conclusion</h2>

<p>On a vu dans ce paragraphe comment il était possible de déployer simplement, via le plugin Maven Tomcat 7, une application web de manière <em>embedded</em> dans un processus Maven.</p>

<p>Malheureusement, le goal qui nous intéressait ne permettant pas démarrer deux applications web simultanément, il n'a pas pu répondre à notre besoin.</p>

<h1>Le plugin Jetty</h1>

<p><img src="http://3.bp.blogspot.com/-9CX6HuFGgPA/UTbgPT2O6gI/AAAAAAAAA3M/JQ_lOt2NnsI/s1600/jetty_logo.png" alt="center" /></p>

<h2>Mise en oeuvre</h2>

<p>Dans cette deuxième tentative, c'est le <a href="http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin">plugin Maven Jetty</a> qui a été utilisé.</p>

<p>Même s'il n'est pas la cible de déploiement, nos applications étant assez standards, il a été acté que le conteneur n'aurait que peu d'impacts sur les tests d'intégration/d'acceptance.</p>

<p>La philosophie mise en oeuvre est similaire à celle choisie avec le plugin Maven Tomcat 7, à savoir :</p>

<ul>
<li>récupération du war dans le repository maven,</li>
<li>dézippage du war dans le répertoire <code>target/webapp</code>,</li>
<li>copie des fichiers de configuration dans le répertoire <code>target/webapp/WEB-INF/classes</code>,</li>
<li>appel du bon goal du plugin Jetty en précisant l'emplacement du war éclaté à charger.</li>
</ul>


<p>Bien sûr, ici, le goal est propre au plugin Jetty, à savoir <code>run-exploded</code> :</p>

<p><code>xml
&lt;plugin&gt;
    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;7.6.9.v20130131&lt;/version&gt;    
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;jetty-war-exec&lt;/id&gt;
            &lt;goals&gt;
                &lt;goal&gt;run-exploded&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;phase&gt;pre-integration-test&lt;/phase&gt;
            &lt;configuration&gt;
                &lt;daemon&gt;true&lt;/daemon&gt;            
                &lt;jvmArgs&gt;&lt;!-- eventuellement les options jvm--&gt;&lt;/jvmArgs&gt;
                &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;
                &lt;jettyConfig&gt;${basedir}/src/test/resources/jetty.xml&lt;/jettyConfig&gt;
                &lt;webAppConfig&gt;
                   &lt;contextPath&gt;/webapp&lt;/contextPath&gt;
                   &lt;jettyEnvXml&gt;${basedir}/src/test/resources/webapp/jetty-webapp-context.xml&lt;/jettyEnvXml&gt;
                &lt;/webAppConfig&gt;
                &lt;war&gt;${project.build.directory}/webapp&lt;/war&gt;
                &lt;connectors&gt;
                   &lt;connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector"&gt;
                       &lt;host&gt;127.0.0.1&lt;/host&gt;
                       &lt;port&gt;9090&lt;/port&gt;
                   &lt;/connector&gt;
                &lt;/connectors&gt;
 
                &lt;contextHandlers&gt;
                   &lt;contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext"&gt;
                       &lt;war&gt;${project.build.directory}/restful&lt;/war&gt;
                       &lt;contextPath&gt;/restful&lt;/contextPath&gt;
                   &lt;/contextHandler&gt;
                &lt;/contextHandlers&gt;
 
            &lt;/configuration&gt;
        &lt;/execution&gt;
 
        &lt;execution&gt;
            &lt;id&gt;stop-jetty&lt;/id&gt;
            &lt;phase&gt;post-integration-test&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;stop&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;stopPort&gt;9999&lt;/stopPort&gt;
                &lt;stopKey&gt;stopKey&lt;/stopKey&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
 
    &lt;/executions&gt;
    &lt;dependencies&gt;
        &lt;!-- eventuellement les jar à ajouter au classpath du conteneur de servlet--&gt;
    &lt;/dependencies&gt;
&lt;/plugin&gt;
</code></p>

<p>On peut remarquer que la configuration du plugin Jetty est beaucoup plus verbeuse que celle du plugin Tomcat avec, notamment, la nécessité de préciser :</p>

<ul>
<li>un fichier de configuration jetty permettant, dans notre cas, de préciser que Jetty doit démarrer son module pour charger l'annuaire JNDI (fichier <code>jetty.xml</code>),</li>
<li>la déclaration d'un connecteur pour pouvoir préciser le port de lancement du conteneur de Servlet,</li>
<li>le fichier <code>jetty-webapp-context.xml</code> pendant du <code>context.xml</code> de Tomcat,</li>
<li>l'obligation de rajouter l'élément <code>contextHandlers</code> pour pouvoir déclarer la deuxième application web à démarrer.</li>
</ul>


<p>A noter qu'il est également possible de déclarer les deux applications web via des <strong>contextHandler</strong>, permettant d'avoir une configuration plus symétrique :</p>

<p><code>xml
&lt;plugin&gt;
    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;7.6.9.v20130131&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;jetty-war-exec&lt;/id&gt;
            &lt;goals&gt;
                &lt;goal&gt;start&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;phase&gt;pre-integration-test&lt;/phase&gt;
            &lt;configuration&gt;
                &lt;daemon&gt;true&lt;/daemon&gt;
                &lt;jvmArgs&gt;&lt;/jvmArgs&gt;
                &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;
                &lt;jettyConfig&gt;${basedir}/src/test/resources/jetty.xml&lt;/jettyConfig&gt;
                &lt;webAppConfig&gt;
                     &lt;jettyEnvXml&gt;${basedir}/src/test/resources/webapp/jetty-webapp-context.xml&lt;/jettyEnvXml&gt;
                &lt;/webAppConfig&gt;
                &lt;connectors&gt;
                     &lt;connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector"&gt;
                         &lt;host&gt;127.0.0.1&lt;/host&gt;
                         &lt;port&gt;9090&lt;/port&gt;
                     &lt;/connector&gt;
                &lt;/connectors&gt;
 
                &lt;contextHandlers&gt;
                     &lt;contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext"&gt;
                         &lt;war&gt;${project.build.directory}/webapp&lt;/war&gt;
                         &lt;contextPath&gt;/webapp&lt;/contextPath&gt;
                     &lt;/contextHandler&gt;
 
                     &lt;contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext"&gt;
                         &lt;war&gt;${project.build.directory}/restful&lt;/war&gt;
                         &lt;contextPath&gt;/restful&lt;/contextPath&gt;
                     &lt;/contextHandler&gt;
                &lt;/contextHandlers&gt;
 
            &lt;/configuration&gt;
        &lt;/execution&gt;
        &lt;execution&gt;
            &lt;id&gt;stop-jetty&lt;/id&gt;
            &lt;phase&gt;post-integration-test&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;stop&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;stopPort&gt;9999&lt;/stopPort&gt;
                &lt;stopKey&gt;stopKey&lt;/stopKey&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
 
 
    &lt;/executions&gt;
    &lt;dependencies&gt;
         
    &lt;/dependencies&gt;
&lt;/plugin&gt;
</code></p>

<p>A titre informatif, le fichier <code>jetty.xml</code> permettant de charger le module JNDI est le suivant :</p>

<p><code>xml
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd"&gt;
 
 
&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
    &lt;Array id="plusConfig" type="java.lang.String"&gt;
        &lt;Item&gt;org.eclipse.jetty.webapp.WebInfConfiguration&lt;/Item&gt;
        &lt;Item&gt;org.eclipse.jetty.webapp.WebXmlConfiguration&lt;/Item&gt;
        &lt;Item&gt;org.eclipse.jetty.webapp.MetaInfConfiguration&lt;/Item&gt;
        &lt;Item&gt;org.eclipse.jetty.webapp.FragmentConfiguration&lt;/Item&gt;
        &lt;Item&gt;org.eclipse.jetty.plus.webapp.EnvConfiguration&lt;/Item&gt;                  &lt;!-- add for JNDI --&gt;
        &lt;Item&gt;org.eclipse.jetty.plus.webapp.PlusConfiguration&lt;/Item&gt;                 &lt;!-- add for JNDI --&gt;
        &lt;Item&gt;org.eclipse.jetty.annotations.AnnotationConfiguration&lt;/Item&gt;
        &lt;Item&gt;org.eclipse.jetty.webapp.JettyWebXmlConfiguration&lt;/Item&gt;
        &lt;Item&gt;org.eclipse.jetty.webapp.TagLibConfiguration&lt;/Item&gt;
    &lt;/Array&gt;
 
    &lt;Call name="setAttribute"&gt;
        &lt;Arg&gt;org.eclipse.jetty.webapp.configuration&lt;/Arg&gt;
        &lt;Arg&gt;
            &lt;Ref id="plusConfig"/&gt;
        &lt;/Arg&gt;
    &lt;/Call&gt;
&lt;/Configure&gt;
</code></p>

<p>et le fichier <code>jetty-webapp-context.xml</code> pendant du fichier <code>context.xml</code> de Tomcat est :</p>

<p><code>xml
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd"&gt;
 
&lt;Configure class="org.eclipse.jetty.webapp.WebAppContext"&gt;
 
&lt;New id="myoracle" class="org.eclipse.jetty.plus.jndi.Resource"&gt;
    &lt;Arg&gt;jdbc/myoracle&lt;/Arg&gt;
    &lt;Arg&gt;
        &lt;New class="org.apache.commons.dbcp.BasicDataSource"&gt;
            &lt;Set name="driverClassName"&gt;driver.jdbc.class&lt;/Set&gt;
            &lt;Set name="url"&gt;jdbc:url_connection&lt;/Set&gt;
            &lt;Set name="username"&gt;login&lt;/Set&gt;
            &lt;Set name="password"&gt;password&lt;/Set&gt;
        &lt;/New&gt;
    &lt;/Arg&gt;
&lt;/New&gt;
 
&lt;/Configure&gt;
</code></p>

<h2>Conclusion</h2>

<p>On a pu constater que l'utilisation du plugin Maven Jetty a parfaitement répondu à notre petit cahier des charges. C'est vrai que cela peut sembler un peu poussif mais cela est surtout dû au fonctionnement même de Jetty.</p>

<p>Enfin, il est à noter que la configuration présentée dans le paragraphe précédent ne fonctionne pas pour la version 6 du plugin (connecteurs et packages différents, &hellip;) et qu'elle a été testé avec la version 7.6.9.v20130131. Normalement, cela devrait fonctionner avec la version 8 mais n'ayant pas testé, je ne pourrais pas le certifier&hellip;</p>

<h1>Conclusion</h1>

<p>En conclusion, cet article avait pour objectif de présenter quelques-unes des façons de démarrer de manière <em>embedded</em> des applications web dans des conteneurs de Servlet légés au sein d'un processus Maven.</p>

<p>Cela peut, notamment, être utile pour initialiser une ou plusieurs applications au sein du processus de tests pour, par exemple, exécuter de manière automatisée des tests d'intégration ou d'acceptance, chose qui est de plus en plus courante au sein de nos usine d'intégration continue.</p>

<p>Bien sûr, il existe de nombreuses autres solutions (par exemple, <a href="http://arquillian.org/">Arquillian</a>) mais aussi d'autres approches (le choix retenu ici a été celui de la boite noire) qui ont toutes leurs avantages et leurs inconvénients par rapport à un besoin donné.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Précompiler ses jsp]]></title>
    <link href="https://blog.jetoile.fr/2012/11/precompiler-ses-jsp.html"/>
    <updated>2012-11-05T12:57:40+01:00</updated>
    <id>https://blog.jetoile.fr/2012/11/precompiler-ses-jsp</id>
    <content type="html"><![CDATA[<p><img src="http://1.bp.blogspot.com/-9Hhc_8qdf1Y/UIhESh6Ls9I/AAAAAAAAAso/2fJIJUvqvIo/s1600/title.png" alt="left-small" /></p>

<p>Parce qu'il est parfois nécessaire de valider ses jsp, cet article fera un petit retour sur comment cela peut être mis en oeuvre.</p>

<p>Oui, je sais, les jsp c'est <em>has been</em> me diront certains&hellip; Cependant, il ne faut pas oublier que dans le monde Java, cela reste une des technologies indispensables quelle que soit le framework utilisé (j'entends par là dans le cas où les pages sont rendus dynamiquement par une technologie java).</p>

<p>Ayant eu récemment à intégrer une phase de validation des jsp maintenus principalement par des équipes &ldquo;front&rdquo; n'ayant que peu de connaissance en Java, ce rapide retour d'expérience tentera d'exposer les quelques points qui ont pu me poser problème et en l'occurrence les quelques-unes des différentes solutions possibles pour traiter ce point.</p>

<p>Aussi, dans une première partie, je présenterai le contexte, pour ensuite aborder trois des solutions possibles (et relativement récentes car il en existe plusieurs dans différentes versions&hellip;) pour valider les jsp.</p>

<!-- more -->


<h1>Contexte</h1>

<p>Cette partie présentera le contexte de l'application web où j'ai eu à mettre en oeuvre une validation des jsp. Le but de l'application web étant d'offrir aux utilisateurs un site web, elle disposait de nombreuses pages jsp.</p>

<p>Coté organisation, les équipes étaient divisées en 2 :</p>

<ul>
<li>l'équipe Java dont la charge était de fournir toute la partie controleur/modèle ainsi qu'un premier jet de la couche présentation au travers de jsp réduites à leurs plus simples appareils,</li>
<li>l'équipe front dont la charge était de décorer les pages jsp avec toutes les parties CSS et Javascript.</li>
</ul>


<p>Coté technologie, le site tournait sur un Tomcat 6 avec du Java 7. Pour la partie build/packaging, Maven 3 était de la partie et, pour la partie usine logicielle, un serveur Jenkins.</p>

<p>Le site étant assez vieux, il s'appuyait sur un framework de présentation maison ainsi que sur un framework de décoration : <a href="http://wiki.sitemesh.org/display/sitemesh/Home">Sitemesh 2</a>.</p>

<p>La partie compilation des jsp ayant pour objectif de prévenir au plus tôt l'équipe de développeurs front de la non conformité (au sens compilation du terme) d'une page jsp, le but était de créer un job Jenkins dont la seule tâche était de compiler les jsp.</p>

<p>Embarquer les jsp pré-compilés dans le livrable final (ie. le war) n'était donc pas la cible.</p>

<h1>Mise en oeuvre</h1>

<h2>jspc-maven-plugin</h2>

<h3>Mise en oeuvre</h3>

<p>Dans ma première tentative de mise en oeuvre, j'ai utilisé le goal compile du plugin <strong>jspc-maven-plugin</strong> pour tomcat6 :</p>

<ul>
<li><p><a href="http://mojo.codehaus.org/jspc-maven-plugin/usage.html">http://mojo.codehaus.org/jspc-maven-plugin/usage.html</a></p></li>
<li><p><a href="http://mojo.codehaus.org/jspc/jspc-maven-plugin/usage.html">http://mojo.codehaus.org/jspc/jspc-maven-plugin/usage.html</a></p></li>
</ul>


<p>Rien de bien compliqué si on regarde la documentation officielle puisqu'il n'y a cas déclarer dans le pom les informations suivantes :</p>

<p><code>xml
&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;jsp-compile-jspc-maven&lt;/id&gt;
        &lt;build&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                    &lt;artifactId&gt;jspc-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;2.0-alpha-3&lt;/version&gt;
                    &lt;executions&gt;
                        &lt;execution&gt;
                            &lt;id&gt;pre-compile-jsp&lt;/id&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;compile&lt;/goal&gt;
                            &lt;/goals&gt;
                            &lt;phase&gt;test&lt;/phase&gt;
                            &lt;configuration&gt;
                            &lt;/configuration&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;dependencies&gt;
                        &lt;dependency&gt;
                            &lt;groupId&gt;org.codehaus.mojo.jspc&lt;/groupId&gt;
                            &lt;artifactId&gt;jspc-compiler-tomcat6&lt;/artifactId&gt;
                            &lt;version&gt;2.0-alpha-3&lt;/version&gt;
                        &lt;/dependency&gt;
 
                    &lt;/dependencies&gt;
                &lt;/plugin&gt;
 
            &lt;/plugins&gt;
        &lt;/build&gt;
 
    &lt;/profile&gt;
    ...
&lt;/profiles&gt;   
...
&lt;build&gt;
    &lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3.2&lt;/version&gt;
        &lt;configuration&gt;
            &lt;target&gt;1.7&lt;/target&gt;
            &lt;source&gt;1.7&lt;/source&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
 
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;opensymphony&lt;/groupId&gt;
        &lt;artifactId&gt;sitemesh&lt;/artifactId&gt;
        &lt;version&gt;2.4.2&lt;/version&gt;
    &lt;/dependency&gt;
 
    &lt;dependency&gt;
        &lt;groupId&gt;jstl&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></p>

<p>On constate que les dépendances à sitemesh ainsi qu'à la jstl ont été déclaré afin de fournir à la compilation des jsp le nécessaire. De même, il est important de noter que le plugin <strong>jspc-maven-plugin</strong> doit obligatoirement fournir un <strong>jspc-compiler</strong> qui est spécifique à la version de tomcat utilisé.</p>

<p>Malheureusement, après un petit coup de :
<code>bash
mvn test -Pjsp-compile-jspc-maven
</code>
on peut se rendre compte que, si les jsp contiennent des scritlets avec du code Java 5 telle qu'une petite enum (oui, je sais, les scriptlets c'est mal&hellip; mais, dans mon cas, c'était pour tester&hellip;), on se fait joliment insulté&hellip; :
<img src="http://2.bp.blogspot.com/-E1qsxbHRQfI/UIgT-ax6M_I/AAAAAAAAArY/p1RBmt2us0o/s1600/error01.png" alt="medium" /></p>

<p>Après quelques recherches, je suis tombé sur ce lien :
<a href="http://stackoverflow.com/questions/7156953/maven-jspc-should-use-external-jsp-files">http://stackoverflow.com/questions/7156953/maven-jspc-should-use-external-jsp-files</a></p>

<p>Cool, peut-on se dire, il suffit de mettre la configuration de compilation en 1.5&hellip; mais ma cible n'était-elle pas le jdk 1.7?</p>

<p>Heureusement, le lien suivant semble annoncé que cela a été corrigé&hellip;
<a href="http://jira.codehaus.org/browse/MJSPC-54">http://jira.codehaus.org/browse/MJSPC-54</a></p>

<p>Malheureusement, la version actuelle ne semble pas bénéficier de ces modifications (la alpha-3 date de 2008 et le ticket a été mis à jour en 2012&hellip;). Ne reste donc plus qu'à récupérer le code source du svn et à le recompiler&hellip; (<code>svn checkout https://svn.codehaus.org/mojo/trunk/mojo/jspc</code>).</p>

<p>Donc, après avoir modifié dans mon pom les informations adéquates, je lance la précompilation et là&hellip; miracle&hellip;!!! Ca marche ;&ndash;)</p>

<p>Au final, on aura donc le code suivant :
<code>xml
&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;jsp-compile-jspc-maven&lt;/id&gt;
        &lt;build&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                    &lt;artifactId&gt;jspc-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;2.0-alpha-4-SNAPSHOT&lt;/version&gt;
                    &lt;executions&gt;
                        &lt;execution&gt;
                            &lt;id&gt;pre-compile-jsp&lt;/id&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;compile&lt;/goal&gt;
                            &lt;/goals&gt;
                            &lt;phase&gt;test&lt;/phase&gt;
                            &lt;configuration&gt;
                                &lt;source&gt;1.7&lt;/source&gt;
                                &lt;target&gt;1.7&lt;/target&gt;
                            &lt;/configuration&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;dependencies&gt;
                        &lt;dependency&gt;
                            &lt;groupId&gt;org.codehaus.mojo.jspc&lt;/groupId&gt;
                            &lt;artifactId&gt;jspc-compiler-tomcat6&lt;/artifactId&gt;
                            &lt;version&gt;2.0-alpha-4-SNAPSHOT&lt;/version&gt;
                        &lt;/dependency&gt;
 
                    &lt;/dependencies&gt;
                &lt;/plugin&gt;
 
            &lt;/plugins&gt;
        &lt;/build&gt;
 
    &lt;/profile&gt;
    ...
&lt;/profiles&gt;   
...
&lt;build&gt;
    &lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3.2&lt;/version&gt;
        &lt;configuration&gt;
            &lt;target&gt;1.7&lt;/target&gt;
            &lt;source&gt;1.7&lt;/source&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
 
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;opensymphony&lt;/groupId&gt;
        &lt;artifactId&gt;sitemesh&lt;/artifactId&gt;
        &lt;version&gt;2.4.2&lt;/version&gt;
    &lt;/dependency&gt;
 
    &lt;dependency&gt;
        &lt;groupId&gt;jstl&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></p>

<h3>Conclusion</h3>

<p>Au final, ce plugin m'aura bien fait suer (et là, je n'ai fait qu'un rapide condenser de mes recherches et de mes galères &ndash; modification des pom en cascade, recherche internet, &hellip;), mais bon&hellip; la solution est fonctionnelle même si elle demande une petite recompilation du plugin.</p>

<p>Cependant, le plugin <strong>jspc-maven-plugin</strong> ne propose pas (si j'ai bien regardé le code source) d'exclure certaines pages de la compilation, chose qui m'était nécessaire&hellip; :&lsquo;(</p>

<p>Du coup, cette solution n'a pas été retenue&hellip;</p>

<h2>jsp-compile-maven-jetty</h2>

<h3>Mise en oeuvre</h3>

<p>Dans cette deuxième tentative de mise en oeuvre, j'ai utilisé le goal <code>jspc</code> du plugin <strong>jsp-compile-maven-plugin</strong>. On peut se demander pourquoi choisir le plugin Jetty alors que la cible était Tomcat. La réponse est que, vu que ce qui m'intéressait était la partie compilation pure et non la partie packaging, cela m'était égal.</p>

<p>Pour mettre en place, ce plugin, il suffit de suivre la documentation officielle :
<a href="http://docs.codehaus.org/display/JETTY/Maven+Jetty+Jspc+Plugin">http://docs.codehaus.org/display/JETTY/Maven+Jetty+Jspc+Plugin</a></p>

<p><code>xml
&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;jsp-compile-maven-jetty&lt;/id&gt;
        &lt;build&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;jetty-jspc-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;8.1.7.v20120910&lt;/version&gt;
                    &lt;executions&gt;
                        &lt;execution&gt;
                            &lt;id&gt;pre-compile-jsp&lt;/id&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;jspc&lt;/goal&gt;
                            &lt;/goals&gt;
                            &lt;phase&gt;test&lt;/phase&gt;
                            &lt;configuration&gt;
                                &lt;includes/&gt;
                                &lt;excludes/&gt;
                                &lt;verbose&gt;true&lt;/verbose&gt;
                            &lt;/configuration&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                &lt;/plugin&gt;
 
            &lt;/plugins&gt;
        &lt;/build&gt;
 
    &lt;/profile&gt;
    ...
&lt;/profiles&gt;   
...
&lt;build&gt;
    &lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3.2&lt;/version&gt;
        &lt;configuration&gt;
            &lt;target&gt;1.7&lt;/target&gt;
            &lt;source&gt;1.7&lt;/source&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
 
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;opensymphony&lt;/groupId&gt;
        &lt;artifactId&gt;sitemesh&lt;/artifactId&gt;
        &lt;version&gt;2.4.2&lt;/version&gt;
    &lt;/dependency&gt;
 
    &lt;dependency&gt;
        &lt;groupId&gt;jstl&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;       
</code>
Malheureusement, même en épluchant la documentation et le code source, on constate qu'il n'est pas possible de spécifier la version du compilateur.</p>

<p>Aussi, avec mon code de test qui utilise de superbes &ldquo;switch case&rdquo; avec des String seulement disponible à partir de Java 7, j'obtiens le résultat suivant :
<img src="http://2.bp.blogspot.com/-MM9hVOZq5sg/UIgxyuqIjFI/AAAAAAAAAsA/Y_9ELLHlMM0/s1600/error02.png" alt="medium" /></p>

<p>En effet, après analyses (si je ne me suis pas fourvoyé&hellip;), le code source (<a href="git://git.codehaus.org/jetty-project.git">git://git.codehaus.org/jetty-project.git</a>) ne positionne pas le <code>compilerTarget</code> sur <strong>JspC</strong> et donc, à part hacker le plugin, impossible de surmonter ce manque&hellip;</p>

<h3>Conclusion</h3>

<p>On a vu que le plugin <strong>jetty-jspc-maven-plugin</strong> était très simple à mettre en oeuvre mais qu'il manquait quelques fonctionnalités comme la possibilité de compiler avec une version supérieure au jdk 1.5.</p>

<p>Du coup, cette solution n'a pas été retenue&hellip;</p>

<h2>Ant</h2>

<h3>Mise en oeuvre</h3>

<p>Dans cette troisième tentative de mise en oeuvre, j'ai gentiment suivi les préconisations présentes sur le site de Tomcat pour précompiler les jsp (<a href="http://tomcat.apache.org/tomcat-6.0-doc/jasper-howto.html">http://tomcat.apache.org/tomcat-6.0-doc/jasper-howto.html</a>) :</p>

<p><code>xml
&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;jsp-compile-ant&lt;/id&gt;
        &lt;build&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
                    &lt;version&gt;1.6&lt;/version&gt;
                    &lt;executions&gt;
                        &lt;execution&gt;
                            &lt;id&gt;pre-compile-jsp&lt;/id&gt;
                            &lt;phase&gt;test&lt;/phase&gt;
                            &lt;configuration&gt;
                                &lt;target name="pre-compile-jsp"&gt;
                                    &lt;property name="maven.dependencies.classpath" refid="maven.test.classpath"/&gt;
                                    &lt;ant antfile="${basedir}/build.xml"&gt;
                                        &lt;target name="all"/&gt;
                                    &lt;/ant&gt;
                                &lt;/target&gt;
                            &lt;/configuration&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;run&lt;/goal&gt;
                            &lt;/goals&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;dependencies&gt;
                        &lt;!-- http://docs.codehaus.org/display/MAVENUSER/Running+ant+tasks+that+use+the+JDK --&gt;
                        &lt;dependency&gt;
                            &lt;groupId&gt;com.sun&lt;/groupId&gt;
                            &lt;artifactId&gt;tools&lt;/artifactId&gt;
                            &lt;version&gt;1.6.0&lt;/version&gt;
                            &lt;scope&gt;system&lt;/scope&gt;
                            &lt;systemPath&gt;${java.home}/../lib/tools.jar&lt;/systemPath&gt;
                        &lt;/dependency&gt;
 
                        &lt;dependency&gt;
                            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                            &lt;artifactId&gt;jasper&lt;/artifactId&gt;
                            &lt;version&gt;6.0.35&lt;/version&gt;
                        &lt;/dependency&gt;
 
                        &lt;dependency&gt;
                            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                            &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
                            &lt;version&gt;6.0.35&lt;/version&gt;
                        &lt;/dependency&gt;
 
                        &lt;dependency&gt;
                            &lt;groupId&gt;jstl&lt;/groupId&gt;
                            &lt;artifactId&gt;jstl&lt;/artifactId&gt;
                            &lt;version&gt;1.2&lt;/version&gt;
                        &lt;/dependency&gt;
 
                        &lt;dependency&gt;
                            &lt;groupId&gt;opensymphony&lt;/groupId&gt;
                            &lt;artifactId&gt;sitemesh&lt;/artifactId&gt;
                            &lt;version&gt;2.4.2&lt;/version&gt;
                        &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                &lt;/plugin&gt;
 
            &lt;/plugins&gt;
        &lt;/build&gt;
 
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                &lt;artifactId&gt;jasper&lt;/artifactId&gt;
                &lt;version&gt;6.0.35&lt;/version&gt;
                &lt;scope&gt;test&lt;/scope&gt;
            &lt;/dependency&gt;
 
            &lt;dependency&gt;
                &lt;groupId&gt;opensymphony&lt;/groupId&gt;
                &lt;artifactId&gt;sitemesh&lt;/artifactId&gt;
                &lt;version&gt;2.4.2&lt;/version&gt;
                &lt;scope&gt;test&lt;/scope&gt;
            &lt;/dependency&gt;
 
        &lt;/dependencies&gt;
    &lt;/profile&gt;
    ...
&lt;/profiles&gt;   
...
&lt;build&gt;
    &lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3.2&lt;/version&gt;
        &lt;configuration&gt;
            &lt;target&gt;1.7&lt;/target&gt;
            &lt;source&gt;1.7&lt;/source&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
 
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;opensymphony&lt;/groupId&gt;
        &lt;artifactId&gt;sitemesh&lt;/artifactId&gt;
        &lt;version&gt;2.4.2&lt;/version&gt;
    &lt;/dependency&gt;
 
    &lt;dependency&gt;
        &lt;groupId&gt;jstl&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;       
</code></p>

<p>avec le fichier <code>build.xml</code> suivant :</p>

<p><code>xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
 
&lt;project name="Webapp Precompilation" default="all" basedir="."&gt;
 
 
    &lt;property name="webapp.path" value="${basedir}/src/main/webapp" /&gt;
    &lt;property name="jsp.dest.compile" value="${basedir}/target/jsp-generated"/&gt;
    &lt;property name="jsp.dest" value="${basedir}/target/jsp"/&gt;
    &lt;!--&lt;property name="tomcat.home" value="/opt/apache-tomcat-7.0.23"/&gt;--&gt;
    &lt;property name="tomcat.home" value="/usr/local/tomcat60"/&gt;
 
    &lt;import file="${tomcat.home}/bin/catalina-tasks.xml"/&gt;
 
    &lt;target name="jspc"&gt;
        &lt;jasper
                validateXml="false"
                uriroot="${webapp.path}"
                webXmlFragment="${basedir}/target/generated_web.xml"
                outputDir="${jsp.dest}"
                compiler="${java.version}"
                compilersourcevm="${java.version}"
                compilertargetvm="${java.version}"
                failonerror="true"
                verbose="9"/&gt;
    &lt;/target&gt;
 
    &lt;target name="compile"&gt;
 
        &lt;mkdir dir="${jsp.dest}"/&gt;
        &lt;mkdir dir="${jsp.dest.compile}"/&gt;
 
        &lt;javac destdir="${jsp.dest.compile}"
               optimize="off"
               fork="true"
               failonerror="true"
               srcdir="${jsp.dest}"
               memoryinitialsize="1024m"
               memoryMaximumSize="1024m"&gt;
            &lt;classpath&gt;
                &lt;path path="${maven.dependencies.classpath}"/&gt;
            &lt;/classpath&gt;
            &lt;include name="**" /&gt;
            &lt;!--&lt;exclude name="**/blabla*_jsp.java"/&gt;--&gt;
        &lt;/javac&gt;
 
    &lt;/target&gt;
 
    &lt;target name="all" depends="jspc,compile"&gt;
    &lt;/target&gt;
 
&lt;/project&gt;
</code></p>

<p>On peut constater quelques petites adaptations sur le script ant par rapport à la version proposée. Les raisons sont les suivantes :</p>

<ul>
<li>il ne me plaisait pas de dépendre de l'emplacement d'un conteneur de servlets pour effectuer une simple compilation : j'ai préféré déclarer les lib de Tomcat via Maven. Etant dans un profil Maven particulié, l'impact était négligeable pour le reste du projet,</li>
<li>je ne voulais pas que mes ressources générées partent n'importe où : j'ai donc précisé ces éléments dans les taches jasper et compile,</li>
<li>je n'ai pas pris la target cleanup car j'ai redirigé toutes mes générations dans le répertoire target géré par Maven.</li>
</ul>


<p>Par contre, j'ai malheureusement été obligé de garder une dépendance à Tomcat pour le fichier <code>catalina-tasks.xml</code>. J'aurais pu l'embarqué en le customisant un peu et en récupérant, via Maven, les jars déclarés via la variable <code>CATALINA_HOME</code>, mais j'avoue avoir été paresseux sur ce point&hellip; par contre, je pense que c'est tout à fait possible de le faire.</p>

<p>On notera que la phase se fait en 2 passes :</p>

<ul>
<li>la première qui transforme les jsp en java (target <code>jspc</code>)</li>
<li>la deuxième qui compile réellement les java en class (target <code>compile</code>)</li>
</ul>


<p>Cependant, il reste encore un point qui mérite qu'on s'attarde un peu à cette solution&hellip; En effet, le <strong>maven-ant-plugin</strong> utilisé ici pour invoquer la target Ant depuis Maven s'exécute avec la variable d'environnement <code>JAVA_HOME</code> positionnée sur le JRE : <a href="http://docs.codehaus.org/display/MAVENUSER/Running+ant+tasks+that+use+the+JDK.">http://docs.codehaus.org/display/MAVENUSER/Running+ant+tasks+that+use+the+JDK.</a></p>

<p>Afin de palier à ce point, il convient de référencer en dépendance du plugin Ant la librairie <code>tools.jar</code>&hellip; (si ça, c'est pas laid&hellip;!!!) et, en plus, de l'utiliser avec un scope <code>system</code>&hellip; :&lsquo;(</p>

<p><code>xml
&lt;dependency&gt;
    &lt;groupId&gt;com.sun&lt;/groupId&gt;
    &lt;artifactId&gt;tools&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
    &lt;scope&gt;system&lt;/scope&gt;
    &lt;systemPath&gt;${java.home}/../lib/tools.jar&lt;/systemPath&gt;
&lt;/dependency&gt;
</code></p>

<h3>Conclusion</h3>

<p>Au final, le plugin Ant fonctionne bien (même si je ne suis pas fan d'appeler du Ant via Maven&hellip;) et répond au besoin de mon cahier des charges.</p>

<p>Même si cela m'embête, c'est la solution qui a été retenue&hellip; :&lsquo;(</p>

<h1>Conclusion</h1>

<p>En conclusion, comme vous avez pu le constater, j'ai bien galéré avec une tache enfantine qui n'était qu'une simple validation des jsp par compilation.</p>

<p>Parmi les 3 solutions testées, seule une a réussi à remplir le cahier des charges qui, pourtant, était simple&hellip;</p>

<p>Aussi pas grand chose à conclure si ce n'est que je tenais à faire partager mes petites galères si cela pouvait servir à quelqu'un&hellip; ;&ndash;)</p>

<p>Le code est disponible <a href="https://github.com/jetoile/jsp-compile">ici</a> avec les différents profils :</p>

<ul>
<li><strong>jsp-compile-ant</strong>,</li>
<li><strong>jsp-compile-jspc-maven</strong>,</li>
<li><strong>jspc-compile-maven-jetty</strong>.</li>
</ul>


<p>Autre point (transverse) concernant Sitemesh (mais là, j'y vais avec des pincettes car je connais très peu ce framework&hellip;)&hellip; :</p>

<p>La visibilité des variables (au sens scriptlet) n'est pas possible entre le décorateur et la page décorée puisque les jsp sont compilées avant le passage de Sitemesh (<a href="http://wiki.sitemesh.org/display/sitemesh/Flow+Diagram">http://wiki.sitemesh.org/display/sitemesh/Flow+Diagram</a>). Par contre, les el sont tout à fait possible d'un coté comme de l'autre.</p>

<p>Pour avoir un exemple là dessus, c'est accessible sur mon github (<a href="https://github.com/jetoile/jsp-compile">https://github.com/jetoile/jsp-compile</a>) dans les jsp menu.jsp, include.jsp et basic-theme.jsp qui sont, elles-même issues d'un ensemble de copier/coller des tutoriels officiels.</p>

<p>En fait, c'est surtout ce dernier point que les différents tests présentés dans cet article voulait validé&hellip; ;&ndash;)</p>
]]></content>
  </entry>
  
</feed>
